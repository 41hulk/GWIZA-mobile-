{"ast":null,"code":"'use strict';var _classCallCheck=require(\"@babel/runtime/helpers/classCallCheck\");var _createClass=require(\"@babel/runtime/helpers/createClass\");var invariant=require('fbjs/lib/invariant');var EventSubscriptionVendor=function(){function EventSubscriptionVendor(){_classCallCheck(this,EventSubscriptionVendor);this._subscriptionsForType={};this._currentSubscription=null;}_createClass(EventSubscriptionVendor,[{key:\"addSubscription\",value:function addSubscription(eventType,subscription){invariant(subscription.subscriber===this,'The subscriber of the subscription is incorrectly set.');if(!this._subscriptionsForType[eventType]){this._subscriptionsForType[eventType]=[];}var key=this._subscriptionsForType[eventType].length;this._subscriptionsForType[eventType].push(subscription);subscription.eventType=eventType;subscription.key=key;return subscription;}},{key:\"removeAllSubscriptions\",value:function removeAllSubscriptions(eventType){if(eventType===undefined){this._subscriptionsForType={};}else{delete this._subscriptionsForType[eventType];}}},{key:\"removeSubscription\",value:function removeSubscription(subscription){var eventType=subscription.eventType;var key=subscription.key;var subscriptionsForType=this._subscriptionsForType[eventType];if(subscriptionsForType){delete subscriptionsForType[key];}}},{key:\"getSubscriptionsForType\",value:function getSubscriptionsForType(eventType){return this._subscriptionsForType[eventType];}}]);return EventSubscriptionVendor;}();module.exports=EventSubscriptionVendor;","map":{"version":3,"sources":["/Users/ntareguy/Downloads/gwizamobile1/node_modules/react-native/Libraries/vendor/emitter/EventSubscriptionVendor.js"],"names":["invariant","require","EventSubscriptionVendor","_subscriptionsForType","_currentSubscription","eventType","subscription","subscriber","key","length","push","undefined","subscriptionsForType","module","exports"],"mappings":"AAUA,a,oIAEA,GAAMA,CAAAA,SAAS,CAAGC,OAAO,CAAC,oBAAD,CAAzB,C,GAQMC,CAAAA,uB,YAIJ,kCAAc,+CACZ,KAAKC,qBAAL,CAA6B,EAA7B,CACA,KAAKC,oBAAL,CAA4B,IAA5B,CACD,C,4FASCC,S,CACAC,Y,CACmB,CACnBN,SAAS,CACPM,YAAY,CAACC,UAAb,GAA4B,IADrB,CAEP,wDAFO,CAAT,CAIA,GAAI,CAAC,KAAKJ,qBAAL,CAA2BE,SAA3B,CAAL,CAA4C,CAC1C,KAAKF,qBAAL,CAA2BE,SAA3B,EAAwC,EAAxC,CACD,CACD,GAAMG,CAAAA,GAAG,CAAG,KAAKL,qBAAL,CAA2BE,SAA3B,EAAsCI,MAAlD,CACA,KAAKN,qBAAL,CAA2BE,SAA3B,EAAsCK,IAAtC,CAA2CJ,YAA3C,EACAA,YAAY,CAACD,SAAb,CAAyBA,SAAzB,CACAC,YAAY,CAACE,GAAb,CAAmBA,GAAnB,CACA,MAAOF,CAAAA,YAAP,CACD,C,sEAQsBD,S,CAAoB,CACzC,GAAIA,SAAS,GAAKM,SAAlB,CAA6B,CAC3B,KAAKR,qBAAL,CAA6B,EAA7B,CACD,CAFD,IAEO,CACL,MAAO,MAAKA,qBAAL,CAA2BE,SAA3B,CAAP,CACD,CACF,C,8DAQkBC,Y,CAAsB,CACvC,GAAMD,CAAAA,SAAS,CAAGC,YAAY,CAACD,SAA/B,CACA,GAAMG,CAAAA,GAAG,CAAGF,YAAY,CAACE,GAAzB,CAEA,GAAMI,CAAAA,oBAAoB,CAAG,KAAKT,qBAAL,CAA2BE,SAA3B,CAA7B,CACA,GAAIO,oBAAJ,CAA0B,CACxB,MAAOA,CAAAA,oBAAoB,CAACJ,GAAD,CAA3B,CACD,CACF,C,wEAcuBH,S,CAAyC,CAC/D,MAAO,MAAKF,qBAAL,CAA2BE,SAA3B,CAAP,CACD,C,uCAGHQ,MAAM,CAACC,OAAP,CAAiBZ,uBAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst invariant = require('fbjs/lib/invariant');\n\nimport type EventSubscription from './EventSubscription';\n\n/**\n * EventSubscriptionVendor stores a set of EventSubscriptions that are\n * subscribed to a particular event type.\n */\nclass EventSubscriptionVendor {\n  _subscriptionsForType: Object;\n  _currentSubscription: ?EventSubscription;\n\n  constructor() {\n    this._subscriptionsForType = {};\n    this._currentSubscription = null;\n  }\n\n  /**\n   * Adds a subscription keyed by an event type.\n   *\n   * @param {string} eventType\n   * @param {EventSubscription} subscription\n   */\n  addSubscription(\n    eventType: string,\n    subscription: EventSubscription,\n  ): EventSubscription {\n    invariant(\n      subscription.subscriber === this,\n      'The subscriber of the subscription is incorrectly set.',\n    );\n    if (!this._subscriptionsForType[eventType]) {\n      this._subscriptionsForType[eventType] = [];\n    }\n    const key = this._subscriptionsForType[eventType].length;\n    this._subscriptionsForType[eventType].push(subscription);\n    subscription.eventType = eventType;\n    subscription.key = key;\n    return subscription;\n  }\n\n  /**\n   * Removes a bulk set of the subscriptions.\n   *\n   * @param {?string} eventType - Optional name of the event type whose\n   *   registered supscriptions to remove, if null remove all subscriptions.\n   */\n  removeAllSubscriptions(eventType: ?string) {\n    if (eventType === undefined) {\n      this._subscriptionsForType = {};\n    } else {\n      delete this._subscriptionsForType[eventType];\n    }\n  }\n\n  /**\n   * Removes a specific subscription. Instead of calling this function, call\n   * `subscription.remove()` directly.\n   *\n   * @param {object} subscription\n   */\n  removeSubscription(subscription: Object) {\n    const eventType = subscription.eventType;\n    const key = subscription.key;\n\n    const subscriptionsForType = this._subscriptionsForType[eventType];\n    if (subscriptionsForType) {\n      delete subscriptionsForType[key];\n    }\n  }\n\n  /**\n   * Returns the array of subscriptions that are currently registered for the\n   * given event type.\n   *\n   * Note: This array can be potentially sparse as subscriptions are deleted\n   * from it when they are removed.\n   *\n   * TODO: This returns a nullable array. wat?\n   *\n   * @param {string} eventType\n   * @returns {?array}\n   */\n  getSubscriptionsForType(eventType: string): ?[EventSubscription] {\n    return this._subscriptionsForType[eventType];\n  }\n}\n\nmodule.exports = EventSubscriptionVendor;\n"]},"metadata":{},"sourceType":"script"}