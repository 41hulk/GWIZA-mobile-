{"ast":null,"code":"var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf2=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _react=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native\");var _propTypes=_interopRequireDefault(require(\"prop-types\"));var _barcodes=_interopRequireDefault(require(\"jsbarcode/src/barcodes\"));var Surface=_reactNative.ART.Surface,Shape=_reactNative.ART.Shape;var Barcode=function(_PureComponent){(0,_inherits2.default)(Barcode,_PureComponent);function Barcode(props){var _this;(0,_classCallCheck2.default)(this,Barcode);_this=(0,_possibleConstructorReturn2.default)(this,(0,_getPrototypeOf2.default)(Barcode).call(this,props));_this.state={bars:[],barCodeWidth:0};return _this;}(0,_createClass2.default)(Barcode,[{key:\"componentWillUpdate\",value:function componentWillUpdate(nextProps){if(nextProps.value!==this.props.value){this.update(nextProps);}}},{key:\"componentDidMount\",value:function componentDidMount(){this.update();}},{key:\"componentDidUpdate\",value:function componentDidUpdate(){this.update();}},{key:\"update\",value:function update(){var encoder=_barcodes.default[this.props.format];var encoded=this.encode(this.props.value,encoder,this.props);if(encoded){this.state.bars=this.drawSvgBarCode(encoded,this.props);this.state.barCodeWidth=encoded.data.length*this.props.width;}}},{key:\"drawSvgBarCode\",value:function drawSvgBarCode(encoding){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var rects=[];var binary=encoding.data;var barWidth=0;var x=0;var yFrom=0;for(var b=0;b<binary.length;b++){x=b*options.width;if(binary[b]==='1'){barWidth++;}else if(barWidth>0){rects[rects.length]=this.drawRect(x-options.width*barWidth,yFrom,options.width*barWidth,options.height);barWidth=0;}}if(barWidth>0){rects[rects.length]=this.drawRect(x-options.width*(barWidth-1),yFrom,options.width*barWidth,options.height);}return rects;}},{key:\"drawRect\",value:function drawRect(x,y,width,height){return\"M\"+x+\",\"+y+\"h\"+width+\"v\"+height+\"h-\"+width+\"z\";}},{key:\"getTotalWidthOfEncodings\",value:function getTotalWidthOfEncodings(encodings){var totalWidth=0;for(var i=0;i<encodings.length;i++){totalWidth+=encodings[i].width;}return totalWidth;}},{key:\"encode\",value:function encode(text,Encoder,options){text=''+text;var encoder;try{encoder=new Encoder(text,options);}catch(error){if(this.props.onError){this.props.onError(new Error('Invalid barcode format.'));return;}else{throw new Error('Invalid barcode format.');}}if(!encoder.valid()){if(this.props.onError){this.props.onError(new Error('Invalid barcode for selected format.'));return;}else{throw new Error('Invalid barcode for selected format.');}}var encoded=encoder.encode();return encoded;}},{key:\"render\",value:function render(){this.update();var backgroundStyle={backgroundColor:this.props.background};return _react.default.createElement(_reactNative.View,{style:[styles.svgContainer,backgroundStyle]},_react.default.createElement(Surface,{height:this.props.height,width:this.state.barCodeWidth},_react.default.createElement(Shape,{d:this.state.bars,fill:this.props.lineColor})),typeof this.props.text!='undefined'&&_react.default.createElement(_reactNative.Text,{style:{color:this.props.textColor,width:this.state.barCodeWidth,textAlign:'center'}},this.props.text));}}]);return Barcode;}(_react.PureComponent);exports.default=Barcode;Barcode.propTypes={value:_propTypes.default.string,format:_propTypes.default.oneOf(Object.keys(_barcodes.default)),text:_propTypes.default.string,width:_propTypes.default.number,height:_propTypes.default.number,lineColor:_propTypes.default.string,textColor:_propTypes.default.string,background:_propTypes.default.string,onError:_propTypes.default.func};Barcode.defaultProps={value:undefined,format:'CODE128',text:undefined,width:2,height:100,lineColor:'#000000',textColor:'#000000',background:'#ffffff',onError:undefined};var styles=_reactNative.StyleSheet.create({svgContainer:{alignItems:'center',padding:10}});","map":{"version":3,"sources":["/Users/ntareguy/Downloads/gwizamobile1/node_modules/react-native-barcode-builder/index.js"],"names":["Surface","ART","Shape","Barcode","props","state","bars","barCodeWidth","nextProps","value","update","encoder","barcodes","format","encoded","encode","drawSvgBarCode","data","length","width","encoding","options","rects","binary","barWidth","x","yFrom","b","drawRect","height","y","encodings","totalWidth","i","text","Encoder","error","onError","Error","valid","backgroundStyle","backgroundColor","background","styles","svgContainer","lineColor","color","textColor","textAlign","PureComponent","propTypes","PropTypes","string","oneOf","Object","keys","number","func","defaultProps","undefined","StyleSheet","create","alignItems","padding"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport { View, StyleSheet, ART, Text } from 'react-native';\nimport PropTypes from 'prop-types';\n\nimport barcodes from 'jsbarcode/src/barcodes';\n\nconst { Surface, Shape } = ART;\n\nexport default class Barcode extends PureComponent {\n  static propTypes = {\n    /* what the barCode stands for */\n    value: PropTypes.string,\n    /* Select which barcode type to use */\n    format: PropTypes.oneOf(Object.keys(barcodes)),\n    /* Overide the text that is diplayed */\n    text: PropTypes.string,\n    /* The width option is the width of a single bar. */\n    width: PropTypes.number,\n    /* The height of the barcode. */\n    height: PropTypes.number,\n    /* Set the color of the bars */\n    lineColor: PropTypes.string,\n    /* Set the color of the text. */\n    textColor: PropTypes.string,\n    /* Set the background of the barcode. */\n    background: PropTypes.string,\n    /* Handle error for invalid barcode of selected format */\n    onError: PropTypes.func\n  };\n\n  static defaultProps = {\n    value: undefined,\n    format: 'CODE128',\n    text: undefined,\n    width: 2,\n    height: 100,\n    lineColor: '#000000',\n    textColor: '#000000',\n    background: '#ffffff',\n    onError: undefined\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      bars: [],\n      barCodeWidth: 0\n    };\n  }\n\n  componentWillUpdate(nextProps) {\n    if (nextProps.value !== this.props.value) {\n      this.update(nextProps);\n    }\n  }\n\n  componentDidMount() {\n    this.update();\n  }\n\n  componentDidUpdate() {\n    this.update();\n  }\n\n  update() {\n    const encoder = barcodes[this.props.format];\n    const encoded = this.encode(this.props.value, encoder, this.props);\n\n    if (encoded) {\n      this.state.bars = this.drawSvgBarCode(encoded, this.props);\n      this.state.barCodeWidth = encoded.data.length * this.props.width;\n    }\n  }\n\n  drawSvgBarCode(encoding, options = {}) {\n    const rects = [];\n    // binary data of barcode\n    const binary = encoding.data;\n\n    let barWidth = 0;\n    let x = 0;\n    let yFrom = 0;\n    // alert(JSON.stringify(options));\n\n    for (let b = 0; b < binary.length; b++) {\n      x = b * options.width;\n      if (binary[b] === '1') {\n        barWidth++;\n      } else if (barWidth > 0) {\n        rects[rects.length] = this.drawRect(\n          x - options.width * barWidth,\n          yFrom,\n          options.width * barWidth,\n          options.height\n        );\n        barWidth = 0;\n      }\n    }\n\n    // Last draw is needed since the barcode ends with 1\n    if (barWidth > 0) {\n      rects[rects.length] = this.drawRect(\n        x - options.width * (barWidth - 1),\n        yFrom,\n        options.width * barWidth,\n        options.height\n      );\n    }\n\n    return rects;\n  }\n\n  drawRect(x, y, width, height) {\n    return `M${x},${y}h${width}v${height}h-${width}z`;\n  }\n\n  getTotalWidthOfEncodings(encodings) {\n    let totalWidth = 0;\n    for (let i = 0; i < encodings.length; i++) {\n      totalWidth += encodings[i].width;\n    }\n    return totalWidth;\n  }\n\n  // encode() handles the Encoder call and builds the binary string to be rendered\n  encode(text, Encoder, options) {\n    // Ensure that text is a string\n    text = '' + text;\n\n    var encoder;\n\n    try {\n      encoder = new Encoder(text, options);\n    } catch (error) {\n      // If the encoder could not be instantiated, throw error.\n      if (this.props.onError)  {\n        this.props.onError(new Error('Invalid barcode format.'));\n        return;\n      } else {\n        throw new Error('Invalid barcode format.');\n      }\n    }\n\n    // If the input is not valid for the encoder, throw error.\n    if (!encoder.valid()) {\n      if (this.props.onError) {\n        this.props.onError(new Error('Invalid barcode for selected format.'));\n        return;\n      } else {\n        throw new Error('Invalid barcode for selected format.');\n      }\n    }\n\n    // Make a request for the binary data (and other infromation) that should be rendered\n    // encoded stucture is {\n    //  text: 'xxxxx',\n    //  data: '110100100001....'\n    // }\n    var encoded = encoder.encode();\n\n    return encoded;\n  }\n\n  render() {\n    this.update();\n    const backgroundStyle = {\n      backgroundColor: this.props.background\n    };\n    return (\n      <View style={[styles.svgContainer, backgroundStyle]}>\n        <Surface height={this.props.height} width={this.state.barCodeWidth}>\n          <Shape d={this.state.bars} fill={this.props.lineColor} />\n        </Surface>\n        { typeof(this.props.text) != 'undefined' &&\n          <Text style={{color: this.props.textColor, width: this.state.barCodeWidth, textAlign: 'center'}} >{this.props.text}</Text>\n        }\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  svgContainer: {\n    alignItems: 'center',\n    padding: 10\n  }\n});\n"]},"metadata":{},"sourceType":"script"}