{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _toConsumableArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf3=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _react=_interopRequireDefault(require(\"react\"));var _reactNative=require(\"react-native\");var _core=require(\"@react-navigation/core\");var _reactNativeScreens=require(\"react-native-screens\");var _DrawerActions=_interopRequireDefault(require(\"../routers/DrawerActions\"));var _DrawerLayout=_interopRequireDefault(require(\"./DrawerLayout\"));var _DrawerSidebar=_interopRequireDefault(require(\"./DrawerSidebar\"));var _DrawerGestureContext=_interopRequireDefault(require(\"../utils/DrawerGestureContext\"));var _ResourceSavingScene=_interopRequireDefault(require(\"../views/ResourceSavingScene\"));var DrawerView=function(_React$PureComponent){(0,_inherits2.default)(DrawerView,_React$PureComponent);function DrawerView(){var _getPrototypeOf2;var _this;(0,_classCallCheck2.default)(this,DrawerView);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=(0,_possibleConstructorReturn2.default)(this,(_getPrototypeOf2=(0,_getPrototypeOf3.default)(DrawerView)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state={loaded:[_this.props.navigation.state.index],drawerWidth:typeof _this.props.navigationConfig.drawerWidth==='function'?_this.props.navigationConfig.drawerWidth():_this.props.navigationConfig.drawerWidth};_this.drawerGestureRef=_react.default.createRef();_this._handleDrawerStateChange=function(newState,willShow){if(newState==='Idle'){if(!_this.props.navigation.state.isDrawerIdle){_this.props.navigation.dispatch({type:_DrawerActions.default.MARK_DRAWER_IDLE,key:_this.props.navigation.state.key});}}else if(newState==='Settling'){_this.props.navigation.dispatch({type:_DrawerActions.default.MARK_DRAWER_SETTLING,key:_this.props.navigation.state.key,willShow:willShow});}else{if(_this.props.navigation.state.isDrawerIdle){_this.props.navigation.dispatch({type:_DrawerActions.default.MARK_DRAWER_ACTIVE,key:_this.props.navigation.state.key});}}};_this._handleDrawerOpen=function(){_this.props.navigation.dispatch({type:_DrawerActions.default.DRAWER_OPENED,key:_this.props.navigation.state.key});};_this._handleDrawerClose=function(){_this.props.navigation.dispatch({type:_DrawerActions.default.DRAWER_CLOSED,key:_this.props.navigation.state.key});};_this._updateWidth=function(){var drawerWidth=typeof _this.props.navigationConfig.drawerWidth==='function'?_this.props.navigationConfig.drawerWidth():_this.props.navigationConfig.drawerWidth;if(_this.state.drawerWidth!==drawerWidth){_this.setState({drawerWidth:drawerWidth});}};_this._renderNavigationView=function(){return _react.default.createElement(_DrawerGestureContext.default.Provider,{value:_this.drawerGestureRef},_react.default.createElement(_DrawerSidebar.default,(0,_extends2.default)({screenProps:_this.props.screenProps,navigation:_this.props.navigation,descriptors:_this.props.descriptors,contentComponent:_this.props.navigationConfig.contentComponent,contentOptions:_this.props.navigationConfig.contentOptions,drawerPosition:_this.props.navigationConfig.drawerPosition,style:_this.props.navigationConfig.style},_this.props.navigationConfig)));};_this._renderContent=function(){var _this$props=_this.props,lazy=_this$props.lazy,navigation=_this$props.navigation;var loaded=_this.state.loaded;var routes=navigation.state.routes;if(_this.props.navigationConfig.unmountInactiveRoutes){var activeKey=navigation.state.routes[navigation.state.index].key;var descriptor=_this.props.descriptors[activeKey];return _react.default.createElement(_core.SceneView,{navigation:descriptor.navigation,screenProps:_this.props.screenProps,component:descriptor.getComponent()});}else{return _react.default.createElement(_reactNativeScreens.ScreenContainer,{style:styles.pages},routes.map(function(route,index){if(lazy&&!loaded.includes(index)){return null;}var isFocused=navigation.state.index===index;var descriptor=_this.props.descriptors[route.key];return _react.default.createElement(_ResourceSavingScene.default,{key:route.key,style:[_reactNative.StyleSheet.absoluteFill,{opacity:isFocused?1:0}],isVisible:isFocused},_react.default.createElement(_core.SceneView,{navigation:descriptor.navigation,screenProps:_this.props.screenProps,component:descriptor.getComponent()}));}));}};return _this;}(0,_createClass2.default)(DrawerView,[{key:\"componentDidMount\",value:function componentDidMount(){_reactNative.Dimensions.addEventListener('change',this._updateWidth);}},{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps){var _this2=this;var _this$props$navigatio=this.props.navigation.state,openId=_this$props$navigatio.openId,closeId=_this$props$navigatio.closeId,toggleId=_this$props$navigatio.toggleId,isDrawerOpen=_this$props$navigatio.isDrawerOpen;var _prevProps$navigation=prevProps.navigation.state,prevOpenId=_prevProps$navigation.openId,prevCloseId=_prevProps$navigation.closeId,prevToggleId=_prevProps$navigation.toggleId;var prevIds=[prevOpenId,prevCloseId,prevToggleId];var changedIds=[openId,closeId,toggleId].filter(function(id){return!prevIds.includes(id);}).sort(function(a,b){return a>b;});changedIds.forEach(function(id){if(id===openId){_this2._drawer.openDrawer();}else if(id===closeId){_this2._drawer.closeDrawer();}else if(id===toggleId){if(isDrawerOpen){_this2._drawer.closeDrawer();}else{_this2._drawer.openDrawer();}}});}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){_reactNative.Dimensions.removeEventListener('change',this._updateWidth);}},{key:\"render\",value:function render(){var _this3=this;var navigation=this.props.navigation;var activeKey=navigation.state.routes[navigation.state.index].key;var drawerLockMode=this.props.descriptors[activeKey].options.drawerLockMode;return _react.default.createElement(_DrawerLayout.default,{ref:function ref(c){_this3._drawer=c;},gestureRef:this.drawerGestureRef,drawerLockMode:drawerLockMode||this.props.screenProps&&this.props.screenProps.drawerLockMode||this.props.navigationConfig.drawerLockMode,drawerBackgroundColor:this.props.navigationConfig.drawerBackgroundColor,keyboardDismissMode:this.props.navigationConfig.keyboardDismissMode,drawerWidth:this.state.drawerWidth,onDrawerOpen:this._handleDrawerOpen,onDrawerClose:this._handleDrawerClose,onDrawerStateChanged:this._handleDrawerStateChange,useNativeAnimations:this.props.navigationConfig.useNativeAnimations,renderNavigationView:this._renderNavigationView,drawerPosition:this.props.navigationConfig.drawerPosition==='right'?_DrawerLayout.default.positions.Right:_DrawerLayout.default.positions.Left,drawerType:this.props.navigationConfig.drawerType,edgeWidth:this.props.navigationConfig.edgeWidth,hideStatusBar:this.props.navigationConfig.hideStatusBar,statusBarAnimation:this.props.navigationConfig.statusBarAnimation,minSwipeDistance:this.props.navigationConfig.minSwipeDistance,overlayColor:this.props.navigationConfig.overlayColor,contentContainerStyle:this.props.navigationConfig.contentContainerStyle},_react.default.createElement(_DrawerGestureContext.default.Provider,{value:this.drawerGestureRef},this._renderContent()));}}],[{key:\"getDerivedStateFromProps\",value:function getDerivedStateFromProps(nextProps,prevState){var index=nextProps.navigation.state.index;return{loaded:prevState.loaded.includes(index)?prevState.loaded:[].concat((0,_toConsumableArray2.default)(prevState.loaded),[index])};}}]);return DrawerView;}(_react.default.PureComponent);exports.default=DrawerView;DrawerView.defaultProps={lazy:true};var styles=_reactNative.StyleSheet.create({pages:{flex:1}});","map":{"version":3,"sources":["/Users/ntareguy/Downloads/gwizamobile1/node_modules/react-navigation-drawer/dist/views/DrawerView.js"],"names":["DrawerView","state","loaded","props","navigation","index","drawerWidth","navigationConfig","drawerGestureRef","React","createRef","_handleDrawerStateChange","newState","willShow","isDrawerIdle","dispatch","type","DrawerActions","MARK_DRAWER_IDLE","key","MARK_DRAWER_SETTLING","MARK_DRAWER_ACTIVE","_handleDrawerOpen","DRAWER_OPENED","_handleDrawerClose","DRAWER_CLOSED","_updateWidth","setState","_renderNavigationView","screenProps","descriptors","contentComponent","contentOptions","drawerPosition","style","_renderContent","lazy","routes","unmountInactiveRoutes","activeKey","descriptor","getComponent","styles","pages","map","route","includes","isFocused","StyleSheet","absoluteFill","opacity","Dimensions","addEventListener","prevProps","openId","closeId","toggleId","isDrawerOpen","prevOpenId","prevCloseId","prevToggleId","prevIds","changedIds","filter","id","sort","a","b","forEach","_drawer","openDrawer","closeDrawer","removeEventListener","drawerLockMode","options","c","drawerBackgroundColor","keyboardDismissMode","useNativeAnimations","DrawerLayout","positions","Right","Left","drawerType","edgeWidth","hideStatusBar","statusBarAnimation","minSwipeDistance","overlayColor","contentContainerStyle","nextProps","prevState","PureComponent","defaultProps","create","flex"],"mappings":"izBAAA,oDACA,yCACA,4CACA,wDAEA,+EACA,oEACA,sEACA,2FACA,yF,GAKqBA,CAAAA,U,0cAcnBC,K,CAAQ,CACNC,MAAM,CAAE,CAAC,MAAKC,KAAL,CAAWC,UAAX,CAAsBH,KAAtB,CAA4BI,KAA7B,CADF,CAENC,WAAW,CAAE,MAAO,OAAKH,KAAL,CAAWI,gBAAX,CAA4BD,WAAnC,GAAmD,UAAnD,CAAgE,MAAKH,KAAL,CAAWI,gBAAX,CAA4BD,WAA5B,EAAhE,CAA4G,MAAKH,KAAL,CAAWI,gBAAX,CAA4BD,WAF/I,C,OA4CRE,gB,CAAmBC,eAAMC,SAAN,E,OAEnBC,wB,CAA2B,SAACC,QAAD,CAAWC,QAAX,CAAwB,CACjD,GAAID,QAAQ,GAAK,MAAjB,CAAyB,CACvB,GAAI,CAAC,MAAKT,KAAL,CAAWC,UAAX,CAAsBH,KAAtB,CAA4Ba,YAAjC,CAA+C,CAC7C,MAAKX,KAAL,CAAWC,UAAX,CAAsBW,QAAtB,CAA+B,CAC7BC,IAAI,CAAEC,uBAAcC,gBADS,CAE7BC,GAAG,CAAE,MAAKhB,KAAL,CAAWC,UAAX,CAAsBH,KAAtB,CAA4BkB,GAFJ,CAA/B,EAID,CACF,CAPD,IAOO,IAAIP,QAAQ,GAAK,UAAjB,CAA6B,CAClC,MAAKT,KAAL,CAAWC,UAAX,CAAsBW,QAAtB,CAA+B,CAC7BC,IAAI,CAAEC,uBAAcG,oBADS,CAE7BD,GAAG,CAAE,MAAKhB,KAAL,CAAWC,UAAX,CAAsBH,KAAtB,CAA4BkB,GAFJ,CAG7BN,QAAQ,CAARA,QAH6B,CAA/B,EAKD,CANM,IAMA,CACL,GAAI,MAAKV,KAAL,CAAWC,UAAX,CAAsBH,KAAtB,CAA4Ba,YAAhC,CAA8C,CAC5C,MAAKX,KAAL,CAAWC,UAAX,CAAsBW,QAAtB,CAA+B,CAC7BC,IAAI,CAAEC,uBAAcI,kBADS,CAE7BF,GAAG,CAAE,MAAKhB,KAAL,CAAWC,UAAX,CAAsBH,KAAtB,CAA4BkB,GAFJ,CAA/B,EAID,CACF,CACF,C,OAEDG,iB,CAAoB,UAAM,CACxB,MAAKnB,KAAL,CAAWC,UAAX,CAAsBW,QAAtB,CAA+B,CAC7BC,IAAI,CAAEC,uBAAcM,aADS,CAE7BJ,GAAG,CAAE,MAAKhB,KAAL,CAAWC,UAAX,CAAsBH,KAAtB,CAA4BkB,GAFJ,CAA/B,EAID,C,OAEDK,kB,CAAqB,UAAM,CACzB,MAAKrB,KAAL,CAAWC,UAAX,CAAsBW,QAAtB,CAA+B,CAC7BC,IAAI,CAAEC,uBAAcQ,aADS,CAE7BN,GAAG,CAAE,MAAKhB,KAAL,CAAWC,UAAX,CAAsBH,KAAtB,CAA4BkB,GAFJ,CAA/B,EAID,C,OAEDO,Y,CAAe,UAAM,CACnB,GAAMpB,CAAAA,WAAW,CAAG,MAAO,OAAKH,KAAL,CAAWI,gBAAX,CAA4BD,WAAnC,GAAmD,UAAnD,CAAgE,MAAKH,KAAL,CAAWI,gBAAX,CAA4BD,WAA5B,EAAhE,CAA4G,MAAKH,KAAL,CAAWI,gBAAX,CAA4BD,WAA5J,CAEA,GAAI,MAAKL,KAAL,CAAWK,WAAX,GAA2BA,WAA/B,CAA4C,CAC1C,MAAKqB,QAAL,CAAc,CAAErB,WAAW,CAAXA,WAAF,CAAd,EACD,CACF,C,OAEDsB,qB,CAAwB,UAAM,CAC5B,MAAO,8BAAC,6BAAD,CAAsB,QAAtB,EAA+B,KAAK,CAAE,MAAKpB,gBAA3C,EACH,6BAAC,sBAAD,wBAAe,WAAW,CAAE,MAAKL,KAAL,CAAW0B,WAAvC,CAAoD,UAAU,CAAE,MAAK1B,KAAL,CAAWC,UAA3E,CAAuF,WAAW,CAAE,MAAKD,KAAL,CAAW2B,WAA/G,CAA4H,gBAAgB,CAAE,MAAK3B,KAAL,CAAWI,gBAAX,CAA4BwB,gBAA1K,CAA4L,cAAc,CAAE,MAAK5B,KAAL,CAAWI,gBAAX,CAA4ByB,cAAxO,CAAwP,cAAc,CAAE,MAAK7B,KAAL,CAAWI,gBAAX,CAA4B0B,cAApS,CAAoT,KAAK,CAAE,MAAK9B,KAAL,CAAWI,gBAAX,CAA4B2B,KAAvV,EAAkW,MAAK/B,KAAL,CAAWI,gBAA7W,EADG,CAAP,CAGD,C,OAED4B,c,CAAiB,UAAM,iBACM,MAAKhC,KADX,CACfiC,IADe,aACfA,IADe,CACThC,UADS,aACTA,UADS,IAEfF,CAAAA,MAFe,CAEJ,MAAKD,KAFD,CAEfC,MAFe,IAGfmC,CAAAA,MAHe,CAGJjC,UAAU,CAACH,KAHP,CAGfoC,MAHe,CAKrB,GAAI,MAAKlC,KAAL,CAAWI,gBAAX,CAA4B+B,qBAAhC,CAAuD,CACrD,GAAIC,CAAAA,SAAS,CAAGnC,UAAU,CAACH,KAAX,CAAiBoC,MAAjB,CAAwBjC,UAAU,CAACH,KAAX,CAAiBI,KAAzC,EAAgDc,GAAhE,CACA,GAAIqB,CAAAA,UAAU,CAAG,MAAKrC,KAAL,CAAW2B,WAAX,CAAuBS,SAAvB,CAAjB,CAEA,MAAO,8BAAC,eAAD,EAAW,UAAU,CAAEC,UAAU,CAACpC,UAAlC,CAA8C,WAAW,CAAE,MAAKD,KAAL,CAAW0B,WAAtE,CAAmF,SAAS,CAAEW,UAAU,CAACC,YAAX,EAA9F,EAAP,CACD,CALD,IAKO,CACL,MAAO,8BAAC,mCAAD,EAAiB,KAAK,CAAEC,MAAM,CAACC,KAA/B,EACFN,MAAM,CAACO,GAAP,CAAW,SAACC,KAAD,CAAQxC,KAAR,CAAkB,CAC9B,GAAI+B,IAAI,EAAI,CAAClC,MAAM,CAAC4C,QAAP,CAAgBzC,KAAhB,CAAb,CAAqC,CAEnC,MAAO,KAAP,CACD,CAED,GAAI0C,CAAAA,SAAS,CAAG3C,UAAU,CAACH,KAAX,CAAiBI,KAAjB,GAA2BA,KAA3C,CACA,GAAImC,CAAAA,UAAU,CAAG,MAAKrC,KAAL,CAAW2B,WAAX,CAAuBe,KAAK,CAAC1B,GAA7B,CAAjB,CAEA,MAAO,8BAAC,4BAAD,EAAqB,GAAG,CAAE0B,KAAK,CAAC1B,GAAhC,CAAqC,KAAK,CAAE,CAAC6B,wBAAWC,YAAZ,CAA0B,CAAEC,OAAO,CAAEH,SAAS,CAAG,CAAH,CAAO,CAA3B,CAA1B,CAA5C,CAAuG,SAAS,CAAEA,SAAlH,EACD,6BAAC,eAAD,EAAW,UAAU,CAAEP,UAAU,CAACpC,UAAlC,CAA8C,WAAW,CAAE,MAAKD,KAAL,CAAW0B,WAAtE,CAAmF,SAAS,CAAEW,UAAU,CAACC,YAAX,EAA9F,EADC,CAAP,CAGD,CAZE,CADE,CAAP,CAeD,CACF,C,gHAxHmB,CAClBU,wBAAWC,gBAAX,CAA4B,QAA5B,CAAsC,KAAK1B,YAA3C,EACD,C,8DAEkB2B,S,CAAW,2CAMxB,KAAKlD,KAAL,CAAWC,UAAX,CAAsBH,KANE,CAE1BqD,MAF0B,uBAE1BA,MAF0B,CAG1BC,OAH0B,uBAG1BA,OAH0B,CAI1BC,QAJ0B,uBAI1BA,QAJ0B,CAK1BC,YAL0B,uBAK1BA,YAL0B,2BAWxBJ,SAAS,CAACjD,UAAV,CAAqBH,KAXG,CAQlByD,UARkB,uBAQ1BJ,MAR0B,CASjBK,WATiB,uBAS1BJ,OAT0B,CAUhBK,YAVgB,uBAU1BJ,QAV0B,CAa5B,GAAIK,CAAAA,OAAO,CAAG,CAACH,UAAD,CAAaC,WAAb,CAA0BC,YAA1B,CAAd,CACA,GAAIE,CAAAA,UAAU,CAAG,CAACR,MAAD,CAASC,OAAT,CAAkBC,QAAlB,EAA4BO,MAA5B,CAAmC,SAAAC,EAAE,QAAI,CAACH,OAAO,CAACf,QAAR,CAAiBkB,EAAjB,CAAL,EAArC,EAAgEC,IAAhE,CAAqE,SAACC,CAAD,CAAIC,CAAJ,QAAUD,CAAAA,CAAC,CAAGC,CAAd,EAArE,CAAjB,CAEAL,UAAU,CAACM,OAAX,CAAmB,SAAAJ,EAAE,CAAI,CACvB,GAAIA,EAAE,GAAKV,MAAX,CAAmB,CACjB,MAAI,CAACe,OAAL,CAAaC,UAAb,GACD,CAFD,IAEO,IAAIN,EAAE,GAAKT,OAAX,CAAoB,CACzB,MAAI,CAACc,OAAL,CAAaE,WAAb,GACD,CAFM,IAEA,IAAIP,EAAE,GAAKR,QAAX,CAAqB,CAC1B,GAAIC,YAAJ,CAAkB,CAChB,MAAI,CAACY,OAAL,CAAaE,WAAb,GACD,CAFD,IAEO,CACL,MAAI,CAACF,OAAL,CAAaC,UAAb,GACD,CACF,CACF,CAZD,EAaD,C,mEAEsB,CACrBnB,wBAAWqB,mBAAX,CAA+B,QAA/B,CAAyC,KAAK9C,YAA9C,EACD,C,uCAqFQ,oBACCtB,CAAAA,UADD,CACgB,KAAKD,KADrB,CACCC,UADD,CAEP,GAAMmC,CAAAA,SAAS,CAAGnC,UAAU,CAACH,KAAX,CAAiBoC,MAAjB,CAAwBjC,UAAU,CAACH,KAAX,CAAiBI,KAAzC,EAAgDc,GAAlE,CAFO,GAGCsD,CAAAA,cAHD,CAGoB,KAAKtE,KAAL,CAAW2B,WAAX,CAAuBS,SAAvB,EAAkCmC,OAHtD,CAGCD,cAHD,CAKP,MAAO,8BAAC,qBAAD,EAAc,GAAG,CAAE,aAAAE,CAAC,CAAI,CAC7B,MAAI,CAACN,OAAL,CAAeM,CAAf,CACD,CAFM,CAEJ,UAAU,CAAE,KAAKnE,gBAFb,CAE+B,cAAc,CAAEiE,cAAc,EAAI,KAAKtE,KAAL,CAAW0B,WAAX,EAA0B,KAAK1B,KAAL,CAAW0B,WAAX,CAAuB4C,cAAnE,EAAqF,KAAKtE,KAAL,CAAWI,gBAAX,CAA4BkE,cAFhK,CAEgL,qBAAqB,CAAE,KAAKtE,KAAL,CAAWI,gBAAX,CAA4BqE,qBAFnO,CAE0P,mBAAmB,CAAE,KAAKzE,KAAL,CAAWI,gBAAX,CAA4BsE,mBAF3S,CAEgU,WAAW,CAAE,KAAK5E,KAAL,CAAWK,WAFxV,CAEqW,YAAY,CAAE,KAAKgB,iBAFxX,CAE2Y,aAAa,CAAE,KAAKE,kBAF/Z,CAEmb,oBAAoB,CAAE,KAAKb,wBAF9c,CAEwe,mBAAmB,CAAE,KAAKR,KAAL,CAAWI,gBAAX,CAA4BuE,mBAFzhB,CAE8iB,oBAAoB,CAAE,KAAKlD,qBAFzkB,CAEgmB,cAAc,CAAE,KAAKzB,KAAL,CAAWI,gBAAX,CAA4B0B,cAA5B,GAA+C,OAA/C,CAAyD8C,sBAAaC,SAAb,CAAuBC,KAAhF,CAAwFF,sBAAaC,SAAb,CAAuBE,IAF/tB,CAIP,UAAU,CAAE,KAAK/E,KAAL,CAAWI,gBAAX,CAA4B4E,UAJjC,CAI6C,SAAS,CAAE,KAAKhF,KAAL,CAAWI,gBAAX,CAA4B6E,SAJpF,CAI+F,aAAa,CAAE,KAAKjF,KAAL,CAAWI,gBAAX,CAA4B8E,aAJ1I,CAIyJ,kBAAkB,CAAE,KAAKlF,KAAL,CAAWI,gBAAX,CAA4B+E,kBAJzM,CAI6N,gBAAgB,CAAE,KAAKnF,KAAL,CAAWI,gBAAX,CAA4BgF,gBAJ3Q,CAI6R,YAAY,CAAE,KAAKpF,KAAL,CAAWI,gBAAX,CAA4BiF,YAJvU,CAIqV,qBAAqB,CAAE,KAAKrF,KAAL,CAAWI,gBAAX,CAA4BkF,qBAJxY,EAKH,6BAAC,6BAAD,CAAsB,QAAtB,EAA+B,KAAK,CAAE,KAAKjF,gBAA3C,EACG,KAAK2B,cAAL,EADH,CALG,CAAP,CASD,C,4EAtJ+BuD,S,CAAWC,S,CAAW,IAC5CtF,CAAAA,KAD4C,CAClCqF,SAAS,CAACtF,UAAV,CAAqBH,KADa,CAC5CI,KAD4C,CAGpD,MAAO,CAELH,MAAM,CAAEyF,SAAS,CAACzF,MAAV,CAAiB4C,QAAjB,CAA0BzC,KAA1B,EAAmCsF,SAAS,CAACzF,MAA7C,2CAA0DyF,SAAS,CAACzF,MAApE,GAA4EG,KAA5E,EAFH,CAAP,CAID,C,wBAZqCI,eAAMmF,a,6BAAzB5F,U,CACZ6F,Y,CAAe,CACpBzD,IAAI,CAAE,IADc,C,CA6JxB,GAAMM,CAAAA,MAAM,CAAGM,wBAAW8C,MAAX,CAAkB,CAC/BnD,KAAK,CAAE,CACLoD,IAAI,CAAE,CADD,CADwB,CAAlB,CAAf","sourcesContent":["import React from 'react';\nimport { Dimensions, StyleSheet } from 'react-native';\nimport { SceneView } from '@react-navigation/core';\nimport { ScreenContainer } from 'react-native-screens';\n\nimport DrawerActions from '../routers/DrawerActions';\nimport DrawerLayout from './DrawerLayout';\nimport DrawerSidebar from './DrawerSidebar';\nimport DrawerGestureContext from '../utils/DrawerGestureContext';\nimport ResourceSavingScene from '../views/ResourceSavingScene';\n\n/**\n * Component that renders the drawer.\n */\nexport default class DrawerView extends React.PureComponent {\n  static defaultProps = {\n    lazy: true\n  };\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { index } = nextProps.navigation.state;\n\n    return {\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(index) ? prevState.loaded : [...prevState.loaded, index]\n    };\n  }\n\n  state = {\n    loaded: [this.props.navigation.state.index],\n    drawerWidth: typeof this.props.navigationConfig.drawerWidth === 'function' ? this.props.navigationConfig.drawerWidth() : this.props.navigationConfig.drawerWidth\n  };\n\n  componentDidMount() {\n    Dimensions.addEventListener('change', this._updateWidth);\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      openId,\n      closeId,\n      toggleId,\n      isDrawerOpen\n    } = this.props.navigation.state;\n    const {\n      openId: prevOpenId,\n      closeId: prevCloseId,\n      toggleId: prevToggleId\n    } = prevProps.navigation.state;\n\n    let prevIds = [prevOpenId, prevCloseId, prevToggleId];\n    let changedIds = [openId, closeId, toggleId].filter(id => !prevIds.includes(id)).sort((a, b) => a > b);\n\n    changedIds.forEach(id => {\n      if (id === openId) {\n        this._drawer.openDrawer();\n      } else if (id === closeId) {\n        this._drawer.closeDrawer();\n      } else if (id === toggleId) {\n        if (isDrawerOpen) {\n          this._drawer.closeDrawer();\n        } else {\n          this._drawer.openDrawer();\n        }\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    Dimensions.removeEventListener('change', this._updateWidth);\n  }\n\n  drawerGestureRef = React.createRef();\n\n  _handleDrawerStateChange = (newState, willShow) => {\n    if (newState === 'Idle') {\n      if (!this.props.navigation.state.isDrawerIdle) {\n        this.props.navigation.dispatch({\n          type: DrawerActions.MARK_DRAWER_IDLE,\n          key: this.props.navigation.state.key\n        });\n      }\n    } else if (newState === 'Settling') {\n      this.props.navigation.dispatch({\n        type: DrawerActions.MARK_DRAWER_SETTLING,\n        key: this.props.navigation.state.key,\n        willShow\n      });\n    } else {\n      if (this.props.navigation.state.isDrawerIdle) {\n        this.props.navigation.dispatch({\n          type: DrawerActions.MARK_DRAWER_ACTIVE,\n          key: this.props.navigation.state.key\n        });\n      }\n    }\n  };\n\n  _handleDrawerOpen = () => {\n    this.props.navigation.dispatch({\n      type: DrawerActions.DRAWER_OPENED,\n      key: this.props.navigation.state.key\n    });\n  };\n\n  _handleDrawerClose = () => {\n    this.props.navigation.dispatch({\n      type: DrawerActions.DRAWER_CLOSED,\n      key: this.props.navigation.state.key\n    });\n  };\n\n  _updateWidth = () => {\n    const drawerWidth = typeof this.props.navigationConfig.drawerWidth === 'function' ? this.props.navigationConfig.drawerWidth() : this.props.navigationConfig.drawerWidth;\n\n    if (this.state.drawerWidth !== drawerWidth) {\n      this.setState({ drawerWidth });\n    }\n  };\n\n  _renderNavigationView = () => {\n    return <DrawerGestureContext.Provider value={this.drawerGestureRef}>\n        <DrawerSidebar screenProps={this.props.screenProps} navigation={this.props.navigation} descriptors={this.props.descriptors} contentComponent={this.props.navigationConfig.contentComponent} contentOptions={this.props.navigationConfig.contentOptions} drawerPosition={this.props.navigationConfig.drawerPosition} style={this.props.navigationConfig.style} {...this.props.navigationConfig} />\n      </DrawerGestureContext.Provider>;\n  };\n\n  _renderContent = () => {\n    let { lazy, navigation } = this.props;\n    let { loaded } = this.state;\n    let { routes } = navigation.state;\n\n    if (this.props.navigationConfig.unmountInactiveRoutes) {\n      let activeKey = navigation.state.routes[navigation.state.index].key;\n      let descriptor = this.props.descriptors[activeKey];\n\n      return <SceneView navigation={descriptor.navigation} screenProps={this.props.screenProps} component={descriptor.getComponent()} />;\n    } else {\n      return <ScreenContainer style={styles.pages}>\n          {routes.map((route, index) => {\n          if (lazy && !loaded.includes(index)) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          let isFocused = navigation.state.index === index;\n          let descriptor = this.props.descriptors[route.key];\n\n          return <ResourceSavingScene key={route.key} style={[StyleSheet.absoluteFill, { opacity: isFocused ? 1 : 0 }]} isVisible={isFocused}>\n                <SceneView navigation={descriptor.navigation} screenProps={this.props.screenProps} component={descriptor.getComponent()} />\n              </ResourceSavingScene>;\n        })}\n        </ScreenContainer>;\n    }\n  };\n\n  render() {\n    const { navigation } = this.props;\n    const activeKey = navigation.state.routes[navigation.state.index].key;\n    const { drawerLockMode } = this.props.descriptors[activeKey].options;\n\n    return <DrawerLayout ref={c => {\n      this._drawer = c;\n    }} gestureRef={this.drawerGestureRef} drawerLockMode={drawerLockMode || this.props.screenProps && this.props.screenProps.drawerLockMode || this.props.navigationConfig.drawerLockMode} drawerBackgroundColor={this.props.navigationConfig.drawerBackgroundColor} keyboardDismissMode={this.props.navigationConfig.keyboardDismissMode} drawerWidth={this.state.drawerWidth} onDrawerOpen={this._handleDrawerOpen} onDrawerClose={this._handleDrawerClose} onDrawerStateChanged={this._handleDrawerStateChange} useNativeAnimations={this.props.navigationConfig.useNativeAnimations} renderNavigationView={this._renderNavigationView} drawerPosition={this.props.navigationConfig.drawerPosition === 'right' ? DrawerLayout.positions.Right : DrawerLayout.positions.Left}\n    /* props specific to react-native-gesture-handler/DrawerLayout */\n    drawerType={this.props.navigationConfig.drawerType} edgeWidth={this.props.navigationConfig.edgeWidth} hideStatusBar={this.props.navigationConfig.hideStatusBar} statusBarAnimation={this.props.navigationConfig.statusBarAnimation} minSwipeDistance={this.props.navigationConfig.minSwipeDistance} overlayColor={this.props.navigationConfig.overlayColor} contentContainerStyle={this.props.navigationConfig.contentContainerStyle}>\n        <DrawerGestureContext.Provider value={this.drawerGestureRef}>\n          {this._renderContent()}\n        </DrawerGestureContext.Provider>\n      </DrawerLayout>;\n  }\n}\n\nconst styles = StyleSheet.create({\n  pages: {\n    flex: 1\n  }\n});"]},"metadata":{},"sourceType":"script"}