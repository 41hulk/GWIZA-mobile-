{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.getBrightnessAsync=getBrightnessAsync;exports.setBrightnessAsync=setBrightnessAsync;exports.getSystemBrightnessAsync=getSystemBrightnessAsync;exports.setSystemBrightnessAsync=setSystemBrightnessAsync;var _regenerator=_interopRequireDefault(require(\"@babel/runtime/regenerator\"));var _reactNative=require(\"react-native\");function getBrightnessAsync(){return _regenerator.default.async(function getBrightnessAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return _regenerator.default.awrap(_reactNative.NativeModules.ExponentBrightness.getBrightnessAsync());case 2:return _context.abrupt(\"return\",_context.sent);case 3:case\"end\":return _context.stop();}}},null,this);}function setBrightnessAsync(brightnessValue){return _regenerator.default.async(function setBrightnessAsync$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:brightnessValue=Math.max(0,Math.min(brightnessValue,1));_context2.next=3;return _regenerator.default.awrap(_reactNative.NativeModules.ExponentBrightness.setBrightnessAsync(brightnessValue));case 3:return _context2.abrupt(\"return\",_context2.sent);case 4:case\"end\":return _context2.stop();}}},null,this);}function getSystemBrightnessAsync(){return _regenerator.default.async(function getSystemBrightnessAsync$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(!(_reactNative.Platform.OS!=='android')){_context3.next=4;break;}_context3.next=3;return _regenerator.default.awrap(getBrightnessAsync());case 3:return _context3.abrupt(\"return\",_context3.sent);case 4:_context3.next=6;return _regenerator.default.awrap(_reactNative.NativeModules.ExponentBrightness.getSystemBrightnessAsync());case 6:return _context3.abrupt(\"return\",_context3.sent);case 7:case\"end\":return _context3.stop();}}},null,this);}function setSystemBrightnessAsync(brightnessValue){return _regenerator.default.async(function setSystemBrightnessAsync$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:brightnessValue=Math.max(0,Math.min(brightnessValue,1));if(!(_reactNative.Platform.OS!=='android')){_context4.next=7;break;}_context4.next=4;return _regenerator.default.awrap(setBrightnessAsync(brightnessValue));case 4:return _context4.abrupt(\"return\",_context4.sent);case 7:_context4.next=9;return _regenerator.default.awrap(_reactNative.NativeModules.ExponentBrightness.setSystemBrightnessAsync(brightnessValue));case 9:return _context4.abrupt(\"return\",_context4.sent);case 10:case\"end\":return _context4.stop();}}},null,this);}","map":{"version":3,"sources":["../src/Brightness.ts"],"names":[],"mappings":"2aAAA,yCAEO,QAAe,CAAA,kBAAf,kLACQ,2BAAc,kBAAd,CAAiC,kBAAjC,EADR,gHAIA,QAAe,CAAA,kBAAf,CAAkC,eAAlC,kIACL,eAAe,CAAG,IAAI,CAAC,GAAL,CAAS,CAAT,CAAY,IAAI,CAAC,GAAL,CAAS,eAAT,CAA0B,CAA1B,CAAZ,CAAlB,CADK,mDAEQ,2BAAc,kBAAd,CAAiC,kBAAjC,CAAoD,eAApD,CAFR,mHAKA,QAAe,CAAA,wBAAf,8IACD,sBAAS,EAAT,GAAgB,SADf,8EAEU,kBAAkB,EAF5B,oHAIQ,2BAAc,kBAAd,CAAiC,wBAAjC,EAJR,mHAOA,QAAe,CAAA,wBAAf,CAAwC,eAAxC,wIACL,eAAe,CAAG,IAAI,CAAC,GAAL,CAAS,CAAT,CAAY,IAAI,CAAC,GAAL,CAAS,eAAT,CAA0B,CAA1B,CAAZ,CAAlB,CADK,KAED,sBAAS,EAAT,GAAgB,SAFf,8EAGU,kBAAkB,CAAC,eAAD,CAH5B,oHAKU,2BAAc,kBAAd,CAAiC,wBAAjC,CAA0D,eAA1D,CALV","sourcesContent":["import { NativeModules, Platform } from 'react-native';\n\nexport async function getBrightnessAsync(): Promise<number> {\n  return await NativeModules.ExponentBrightness.getBrightnessAsync();\n}\n\nexport async function setBrightnessAsync(brightnessValue: number): Promise<void> {\n  brightnessValue = Math.max(0, Math.min(brightnessValue, 1));\n  return await NativeModules.ExponentBrightness.setBrightnessAsync(brightnessValue);\n}\n\nexport async function getSystemBrightnessAsync(): Promise<number> {\n  if (Platform.OS !== 'android') {\n    return await getBrightnessAsync();\n  }\n  return await NativeModules.ExponentBrightness.getSystemBrightnessAsync();\n}\n\nexport async function setSystemBrightnessAsync(brightnessValue: number): Promise<void> {\n  brightnessValue = Math.max(0, Math.min(brightnessValue, 1));\n  if (Platform.OS !== 'android') {\n    return await setBrightnessAsync(brightnessValue);\n  } else {\n    return await NativeModules.ExponentBrightness.setSystemBrightnessAsync(brightnessValue);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}