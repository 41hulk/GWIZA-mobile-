{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.requireNativeViewManager=void 0;var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _toConsumableArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));var _defineProperty2=_interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));var _objectSpread3=_interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf2=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _react=_interopRequireDefault(require(\"react\"));var _lodash=_interopRequireDefault(require(\"lodash.omit\"));var _lodash2=_interopRequireDefault(require(\"lodash.pick\"));var _propTypes=_interopRequireDefault(require(\"prop-types\"));var _reactNative=require(\"react-native\");var ViewPropTypesKeys=Object.keys(_reactNative.ViewPropTypes);var getViewManagerAdapterNameForViewName=function getViewManagerAdapterNameForViewName(name){return\"ViewManagerAdapter_\"+name;};var createNativeComponentClass=function createNativeComponentClass(name){var NativeComponent=function(_React$Component){(0,_inherits2.default)(NativeComponent,_React$Component);function NativeComponent(){(0,_classCallCheck2.default)(this,NativeComponent);return(0,_possibleConstructorReturn2.default)(this,(0,_getPrototypeOf2.default)(NativeComponent).apply(this,arguments));}(0,_createClass2.default)(NativeComponent,[{key:\"render\",value:function render(){return _react.default.createElement(UnderlyingNativeComponent,this.props);}}]);return NativeComponent;}(_react.default.Component);NativeComponent.propTypes=(0,_objectSpread3.default)({},_reactNative.ViewPropTypes,{proxiedProperties:_propTypes.default.object});var nativeComponentName=getViewManagerAdapterNameForViewName(name);var UnderlyingNativeComponent=(0,_reactNative.requireNativeComponent)(nativeComponentName,NativeComponent,{nativeOnly:Object.keys(_reactNative.UIManager[nativeComponentName].NativeProps).reduce(function(acc,key){return(0,_objectSpread3.default)({},acc,(0,_defineProperty2.default)({},key,true));},{})});NativeComponent.displayName=name;return NativeComponent;};var requireNativeViewManager=function requireNativeViewManager(name,component){if(!_reactNative.NativeModules.ExpoNativeModuleProxy.viewManagersNames.includes(name)){console.warn(\"It seems the native view manager which you're trying to require by name\"+\"from NativeViewManagerAdapter isn't exported by expo-react-native-adapter.\"+' Things may not work properly. Exported view managers: ['+_reactNative.NativeModules.ExpoNativeModuleProxy.viewManagersNames.join(', ')+(\"], and you required \\\"\"+name+\"\\\".\"));}var NativeComponent=createNativeComponentClass(name);var PropTypesKeys=['children'].concat((0,_toConsumableArray2.default)(ViewPropTypesKeys),(0,_toConsumableArray2.default)(Object.keys(_reactNative.UIManager[getViewManagerAdapterNameForViewName(name)].NativeProps)),(0,_toConsumableArray2.default)(Object.keys(_reactNative.UIManager[getViewManagerAdapterNameForViewName(name)].directEventTypes)));var NativeComponentWrapper=function(_React$Component2){(0,_inherits2.default)(NativeComponentWrapper,_React$Component2);function NativeComponentWrapper(){(0,_classCallCheck2.default)(this,NativeComponentWrapper);return(0,_possibleConstructorReturn2.default)(this,(0,_getPrototypeOf2.default)(NativeComponentWrapper).apply(this,arguments));}(0,_createClass2.default)(NativeComponentWrapper,[{key:\"render\",value:function render(){var nativeProps=(0,_lodash2.default)(this.props,PropTypesKeys);var proxiedProps=(0,_lodash.default)(this.props,PropTypesKeys);return _react.default.createElement(NativeComponent,(0,_extends2.default)({proxiedProperties:proxiedProps},nativeProps));}}]);return NativeComponentWrapper;}(_react.default.Component);NativeComponentWrapper.displayName=\"ViewWrapper<\"+name+\">\";return NativeComponentWrapper;};exports.requireNativeViewManager=requireNativeViewManager;","map":{"version":3,"sources":["/Users/ntareguy/Downloads/gwizamobile1/node_modules/expo-react-native-adapter/src/NativeViewManagerAdapter.js"],"names":["ViewPropTypesKeys","Object","keys","ViewPropTypes","getViewManagerAdapterNameForViewName","name","createNativeComponentClass","NativeComponent","props","React","Component","propTypes","proxiedProperties","PropTypes","object","nativeComponentName","UnderlyingNativeComponent","nativeOnly","UIManager","NativeProps","reduce","acc","key","displayName","requireNativeViewManager","component","NativeModules","ExpoNativeModuleProxy","viewManagersNames","includes","console","warn","join","PropTypesKeys","directEventTypes","NativeComponentWrapper","nativeProps","proxiedProps"],"mappings":"0/BAAA,oDACA,2DACA,4DACA,6DACA,yCAcA,GAAMA,CAAAA,iBAAiB,CAAGC,MAAM,CAACC,IAAP,CAAYC,0BAAZ,CAA1B,CAEA,GAAMC,CAAAA,oCAAoC,CAAG,QAAvCA,CAAAA,oCAAuC,CAAAC,IAAI,8BAA0BA,IAA1B,EAAjD,CAEA,GAAMC,CAAAA,0BAA0B,CAAG,QAA7BA,CAAAA,0BAA6B,CAAAD,IAAI,CAAI,IACnCE,CAAAA,eADmC,4WAG9B,CACP,MAAO,8BAAC,yBAAD,CAA+B,KAAKC,KAApC,CAAP,CACD,CALsC,6BACXC,eAAMC,SADK,EACnCH,eADmC,CAEhCI,SAFgC,+BAEfR,0BAFe,EAEAS,iBAAiB,CAAEC,mBAAUC,MAF7B,GAQzC,GAAMC,CAAAA,mBAAmB,CAAGX,oCAAoC,CAACC,IAAD,CAAhE,CAEA,GAAMW,CAAAA,yBAAyB,CAAG,wCAAuBD,mBAAvB,CAA4CR,eAA5C,CAA6D,CAC7FU,UAAU,CAAEhB,MAAM,CAACC,IAAP,CAAYgB,uBAAUH,mBAAV,EAA+BI,WAA3C,EAAwDC,MAAxD,CACV,SAACC,GAAD,CAAMC,GAAN,sCAAoBD,GAApB,iCAA0BC,GAA1B,CAAgC,IAAhC,IADU,CAEV,EAFU,CADiF,CAA7D,CAAlC,CAOAf,eAAe,CAACgB,WAAhB,CAA8BlB,IAA9B,CACA,MAAOE,CAAAA,eAAP,CACD,CAnBD,CAqBO,GAAMiB,CAAAA,wBAAwB,CAAG,QAA3BA,CAAAA,wBAA2B,CAACnB,IAAD,CAAOoB,SAAP,CAAqB,CAC3D,GAAI,CAACC,2BAAcC,qBAAd,CAAoCC,iBAApC,CAAsDC,QAAtD,CAA+DxB,IAA/D,CAAL,CAA2E,CACzEyB,OAAO,CAACC,IAAR,CACE,0EACE,4EADF,CAEE,0DAFF,CAGEL,2BAAcC,qBAAd,CAAoCC,iBAApC,CAAsDI,IAAtD,CAA2D,IAA3D,CAHF,2BAI0B3B,IAJ1B,OADF,EAOD,CAED,GAAME,CAAAA,eAAe,CAAGD,0BAA0B,CAACD,IAAD,CAAlD,CACA,GAAM4B,CAAAA,aAAa,EACjB,UADiB,yCAEdjC,iBAFc,kCAGdC,MAAM,CAACC,IAAP,CAAYgB,uBAAUd,oCAAoC,CAACC,IAAD,CAA9C,EAAsDc,WAAlE,CAHc,kCAIdlB,MAAM,CAACC,IAAP,CAAYgB,uBAAUd,oCAAoC,CAACC,IAAD,CAA9C,EAAsD6B,gBAAlE,CAJc,EAAnB,CAZ2D,GAkBrDC,CAAAA,sBAlBqD,iZAmBhD,CACP,GAAMC,CAAAA,WAAW,CAAG,qBAAK,KAAK5B,KAAV,CAAiByB,aAAjB,CAApB,CACA,GAAMI,CAAAA,YAAY,CAAG,oBAAK,KAAK7B,KAAV,CAAiByB,aAAjB,CAArB,CACA,MAAO,8BAAC,eAAD,wBAAiB,iBAAiB,CAAEI,YAApC,EAAsDD,WAAtD,EAAP,CACD,CAvBwD,oCAkBtB3B,eAAMC,SAlBgB,EAyB3DyB,sBAAsB,CAACZ,WAAvB,gBAAoDlB,IAApD,KACA,MAAO8B,CAAAA,sBAAP,CACD,CA3BM,C","sourcesContent":["import React from 'react';\nimport omit from 'lodash.omit';\nimport pick from 'lodash.pick';\nimport PropTypes from 'prop-types';\nimport { requireNativeComponent, ViewPropTypes, UIManager, NativeModules } from 'react-native';\n\n// We'd like to make the transition from react-native's\n// requireNativeComponent to expo-core's requireNativeViewManager\n// as easy as possible, so an obvious requirement will be to be able\n// to just replace the requireNativeComponent with requireNativeViewManager\n// call. If that's so, we have to wrap a native component in two middleware\n// components - the bottom one, near the requireNativeComponent call has to\n// define a propType for proxiedProperties (so that doesn't complain),\n// and the \"top\" one has to accept all the properties, split them into\n// props passed to react-native's View (like style, testID, etc.)\n// and custom view properties. For that we use\n// {omit,pick}(props, Object.keys(ViewPropTypes))\n\nconst ViewPropTypesKeys = Object.keys(ViewPropTypes);\n\nconst getViewManagerAdapterNameForViewName = name => `ViewManagerAdapter_${name}`;\n\nconst createNativeComponentClass = name => {\n  class NativeComponent extends React.Component {\n    static propTypes = { ...ViewPropTypes, proxiedProperties: PropTypes.object };\n    render() {\n      return <UnderlyingNativeComponent {...this.props} />;\n    }\n  }\n\n  const nativeComponentName = getViewManagerAdapterNameForViewName(name);\n\n  const UnderlyingNativeComponent = requireNativeComponent(nativeComponentName, NativeComponent, {\n    nativeOnly: Object.keys(UIManager[nativeComponentName].NativeProps).reduce(\n      (acc, key) => ({ ...acc, [key]: true }),\n      {}\n    ),\n  });\n\n  NativeComponent.displayName = name;\n  return NativeComponent;\n};\n\nexport const requireNativeViewManager = (name, component) => {\n  if (!NativeModules.ExpoNativeModuleProxy.viewManagersNames.includes(name)) {\n    console.warn(\n      \"It seems the native view manager which you're trying to require by name\" +\n        \"from NativeViewManagerAdapter isn't exported by expo-react-native-adapter.\" +\n        ' Things may not work properly. Exported view managers: [' +\n        NativeModules.ExpoNativeModuleProxy.viewManagersNames.join(', ') +\n        `], and you required \"${name}\".`\n    );\n  }\n\n  const NativeComponent = createNativeComponentClass(name);\n  const PropTypesKeys = [\n    'children',\n    ...ViewPropTypesKeys,\n    ...Object.keys(UIManager[getViewManagerAdapterNameForViewName(name)].NativeProps),\n    ...Object.keys(UIManager[getViewManagerAdapterNameForViewName(name)].directEventTypes),\n  ];\n  class NativeComponentWrapper extends React.Component {\n    render() {\n      const nativeProps = pick(this.props, PropTypesKeys);\n      const proxiedProps = omit(this.props, PropTypesKeys);\n      return <NativeComponent proxiedProperties={proxiedProps} {...nativeProps} />;\n    }\n  }\n  NativeComponentWrapper.displayName = `ViewWrapper<${name}>`;\n  return NativeComponentWrapper;\n};\n"]},"metadata":{},"sourceType":"script"}