{"ast":null,"code":"var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf2=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _objectSpread2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));var _propTypes=_interopRequireDefault(require(\"prop-types\"));var _react=_interopRequireDefault(require(\"react\"));var _reactNative=require(\"react-native\");var _decorateMapComponent=_interopRequireWildcard(require(\"./decorateMapComponent\"));var viewPropTypes=_reactNative.ViewPropTypes||_reactNative.View.propTypes;var propTypes=(0,_objectSpread2.default)({},viewPropTypes,{center:_propTypes.default.shape({latitude:_propTypes.default.number.isRequired,longitude:_propTypes.default.number.isRequired}).isRequired,radius:_propTypes.default.number.isRequired,onPress:_propTypes.default.func,strokeWidth:_propTypes.default.number,strokeColor:_reactNative.ColorPropType,fillColor:_reactNative.ColorPropType,zIndex:_propTypes.default.number,lineCap:_propTypes.default.oneOf(['butt','round','square']),lineJoin:_propTypes.default.oneOf(['miter','round','bevel']),miterLimit:_propTypes.default.number,lineDashPhase:_propTypes.default.number,lineDashPattern:_propTypes.default.arrayOf(_propTypes.default.number)});var defaultProps={strokeColor:'#000',strokeWidth:1};var MapCircle=function(_React$Component){(0,_inherits2.default)(MapCircle,_React$Component);function MapCircle(){(0,_classCallCheck2.default)(this,MapCircle);return(0,_possibleConstructorReturn2.default)(this,(0,_getPrototypeOf2.default)(MapCircle).apply(this,arguments));}(0,_createClass2.default)(MapCircle,[{key:\"setNativeProps\",value:function setNativeProps(props){this.circle.setNativeProps(props);}},{key:\"render\",value:function render(){var _this=this;var AIRMapCircle=this.getAirComponent();return _react.default.createElement(AIRMapCircle,(0,_extends2.default)({},this.props,{ref:function ref(_ref){_this.circle=_ref;}}));}}]);return MapCircle;}(_react.default.Component);MapCircle.propTypes=propTypes;MapCircle.defaultProps=defaultProps;var _default=(0,_decorateMapComponent.default)(MapCircle,{componentType:'Circle',providers:{google:{ios:_decorateMapComponent.SUPPORTED,android:_decorateMapComponent.USES_DEFAULT_IMPLEMENTATION}}});exports.default=_default;","map":{"version":3,"sources":["/Users/ntareguy/Downloads/gwizamobile1/node_modules/react-native-maps/lib/components/MapCircle.js"],"names":["viewPropTypes","ViewPropTypes","View","propTypes","center","PropTypes","shape","latitude","number","isRequired","longitude","radius","onPress","func","strokeWidth","strokeColor","ColorPropType","fillColor","zIndex","lineCap","oneOf","lineJoin","miterLimit","lineDashPhase","lineDashPattern","arrayOf","defaultProps","MapCircle","props","circle","setNativeProps","AIRMapCircle","getAirComponent","ref","React","Component","componentType","providers","google","ios","SUPPORTED","android","USES_DEFAULT_IMPLEMENTATION"],"mappings":"43BAAA,6DACA,oDACA,yCAKA,qFAMA,GAAMA,CAAAA,aAAa,CAAGC,4BAAiBC,kBAAKC,SAA5C,CAEA,GAAMA,CAAAA,SAAS,+BACVH,aADU,EAMbI,MAAM,CAAEC,mBAAUC,KAAV,CAAgB,CAItBC,QAAQ,CAAEF,mBAAUG,MAAV,CAAiBC,UAJL,CAKtBC,SAAS,CAAEL,mBAAUG,MAAV,CAAiBC,UALN,CAAhB,EAMLA,UAZU,CAiBbE,MAAM,CAAEN,mBAAUG,MAAV,CAAiBC,UAjBZ,CAsBbG,OAAO,CAAEP,mBAAUQ,IAtBN,CA2BbC,WAAW,CAAET,mBAAUG,MA3BV,CAgCbO,WAAW,CAAEC,0BAhCA,CAqCbC,SAAS,CAAED,0BArCE,CA8CbE,MAAM,CAAEb,mBAAUG,MA9CL,CAsDbW,OAAO,CAAEd,mBAAUe,KAAV,CAAgB,CACvB,MADuB,CAEvB,OAFuB,CAGvB,QAHuB,CAAhB,CAtDI,CAkEbC,QAAQ,CAAEhB,mBAAUe,KAAV,CAAgB,CACxB,OADwB,CAExB,OAFwB,CAGxB,OAHwB,CAAhB,CAlEG,CAkFbE,UAAU,CAAEjB,mBAAUG,MAlFT,CA+Fbe,aAAa,CAAElB,mBAAUG,MA/FZ,CA6GbgB,eAAe,CAAEnB,mBAAUoB,OAAV,CAAkBpB,mBAAUG,MAA5B,CA7GJ,EAAf,CAgHA,GAAMkB,CAAAA,YAAY,CAAG,CACnBX,WAAW,CAAE,MADM,CAEnBD,WAAW,CAAE,CAFM,CAArB,C,GAKMa,CAAAA,S,6VACWC,K,CAAO,CACpB,KAAKC,MAAL,CAAYC,cAAZ,CAA2BF,KAA3B,EACD,C,uCAEQ,gBACP,GAAMG,CAAAA,YAAY,CAAG,KAAKC,eAAL,EAArB,CACA,MACE,8BAAC,YAAD,0BAAkB,KAAKJ,KAAvB,EAA8B,GAAG,CAAE,aAAAK,IAAG,CAAI,CAAE,KAAI,CAACJ,MAAL,CAAcI,IAAd,CAAoB,CAAhE,GADF,CAGD,C,uBAVqBC,eAAMC,S,EAa9BR,SAAS,CAACxB,SAAV,CAAsBA,SAAtB,CACAwB,SAAS,CAACD,YAAV,CAAyBA,YAAzB,C,aAEe,kCAAqBC,SAArB,CAAgC,CAC7CS,aAAa,CAAE,QAD8B,CAE7CC,SAAS,CAAE,CACTC,MAAM,CAAE,CACNC,GAAG,CAAEC,+BADC,CAENC,OAAO,CAAEC,iDAFH,CADC,CAFkC,CAAhC,C","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport {\n  ColorPropType,\n  ViewPropTypes,\n  View,\n} from 'react-native';\nimport decorateMapComponent, {\n  USES_DEFAULT_IMPLEMENTATION,\n  SUPPORTED,\n} from './decorateMapComponent';\n\n// if ViewPropTypes is not defined fall back to View.propType (to support RN < 0.44)\nconst viewPropTypes = ViewPropTypes || View.propTypes;\n\nconst propTypes = {\n  ...viewPropTypes,\n\n  /**\n   * The coordinate of the center of the circle\n   */\n  center: PropTypes.shape({\n    /**\n     * Coordinates for the center of the circle.\n     */\n    latitude: PropTypes.number.isRequired,\n    longitude: PropTypes.number.isRequired,\n  }).isRequired,\n\n  /**\n   * The radius of the circle to be drawn (in meters)\n   */\n  radius: PropTypes.number.isRequired,\n\n  /**\n   * Callback that is called when the user presses on the circle\n   */\n  onPress: PropTypes.func,\n\n  /**\n   * The stroke width to use for the path.\n   */\n  strokeWidth: PropTypes.number,\n\n  /**\n   * The stroke color to use for the path.\n   */\n  strokeColor: ColorPropType,\n\n  /**\n   * The fill color to use for the path.\n   */\n  fillColor: ColorPropType,\n\n  /**\n   * The order in which this tile overlay is drawn with respect to other overlays. An overlay\n   * with a larger z-index is drawn over overlays with smaller z-indices. The order of overlays\n   * with the same z-index is arbitrary. The default zIndex is 0.\n   *\n   * @platform android\n   */\n  zIndex: PropTypes.number,\n\n  /**\n   * The line cap style to apply to the open ends of the path.\n   * The default style is `round`.\n   *\n   * @platform ios\n   */\n  lineCap: PropTypes.oneOf([\n    'butt',\n    'round',\n    'square',\n  ]),\n\n  /**\n   * The line join style to apply to corners of the path.\n   * The default style is `round`.\n   *\n   * @platform ios\n   */\n  lineJoin: PropTypes.oneOf([\n    'miter',\n    'round',\n    'bevel',\n  ]),\n\n  /**\n   * The limiting value that helps avoid spikes at junctions between connected line segments.\n   * The miter limit helps you avoid spikes in paths that use the `miter` `lineJoin` style. If\n   * the ratio of the miter length—that is, the diagonal length of the miter join—to the line\n   * thickness exceeds the miter limit, the joint is converted to a bevel join. The default\n   * miter limit is 10, which results in the conversion of miters whose angle at the joint\n   * is less than 11 degrees.\n   *\n   * @platform ios\n   */\n  miterLimit: PropTypes.number,\n\n  /**\n   * The offset (in points) at which to start drawing the dash pattern.\n   *\n   * Use this property to start drawing a dashed line partway through a segment or gap. For\n   * example, a phase value of 6 for the patter 5-2-3-2 would cause drawing to begin in the\n   * middle of the first gap.\n   *\n   * The default value of this property is 0.\n   *\n   * @platform ios\n   */\n  lineDashPhase: PropTypes.number,\n\n  /**\n   * An array of numbers specifying the dash pattern to use for the path.\n   *\n   * The array contains one or more numbers that indicate the lengths (measured in points) of the\n   * line segments and gaps in the pattern. The values in the array alternate, starting with the\n   * first line segment length, followed by the first gap length, followed by the second line\n   * segment length, and so on.\n   *\n   * This property is set to `null` by default, which indicates no line dash pattern.\n   *\n   * @platform ios\n   */\n  lineDashPattern: PropTypes.arrayOf(PropTypes.number),\n};\n\nconst defaultProps = {\n  strokeColor: '#000',\n  strokeWidth: 1,\n};\n\nclass MapCircle extends React.Component {\n  setNativeProps(props) {\n    this.circle.setNativeProps(props);\n  }\n\n  render() {\n    const AIRMapCircle = this.getAirComponent();\n    return (\n      <AIRMapCircle {...this.props} ref={ref => { this.circle = ref; }} />\n    );\n  }\n}\n\nMapCircle.propTypes = propTypes;\nMapCircle.defaultProps = defaultProps;\n\nexport default decorateMapComponent(MapCircle, {\n  componentType: 'Circle',\n  providers: {\n    google: {\n      ios: SUPPORTED,\n      android: USES_DEFAULT_IMPLEMENTATION,\n    },\n  },\n});\n"]},"metadata":{},"sourceType":"script"}