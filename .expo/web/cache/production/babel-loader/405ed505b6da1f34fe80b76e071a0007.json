{"ast":null,"code":"var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=exports.IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS=exports.IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS=exports.IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT=exports.IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT=exports.FULLSCREEN_UPDATE_PLAYER_DID_DISMISS=exports.FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS=exports.FULLSCREEN_UPDATE_PLAYER_DID_PRESENT=exports.FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT=void 0;var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _objectSpread2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));var _regenerator=_interopRequireDefault(require(\"@babel/runtime/regenerator\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf2=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _lodash=_interopRequireDefault(require(\"lodash.omit\"));var _nullthrows=_interopRequireDefault(require(\"nullthrows\"));var _propTypes=_interopRequireDefault(require(\"prop-types\"));var React=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native\");var _AV=require(\"./AV\");var ResizeMode;(function(ResizeMode){ResizeMode[\"CONTAIN\"]=\"contain\";ResizeMode[\"COVER\"]=\"cover\";ResizeMode[\"STRETCH\"]=\"stretch\";})(ResizeMode||(ResizeMode={}));var FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT=0;exports.FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT=FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;var FULLSCREEN_UPDATE_PLAYER_DID_PRESENT=1;exports.FULLSCREEN_UPDATE_PLAYER_DID_PRESENT=FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;var FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS=2;exports.FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS=FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;var FULLSCREEN_UPDATE_PLAYER_DID_DISMISS=3;exports.FULLSCREEN_UPDATE_PLAYER_DID_DISMISS=FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;var IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT=FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;exports.IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT=IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;var IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT=FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;exports.IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT=IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;var IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS=FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;exports.IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS=IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;var IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS=FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;exports.IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS=IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;var _STYLES=_reactNative.StyleSheet.create({base:{overflow:'hidden'},poster:{position:'absolute',left:0,top:0,right:0,bottom:0,resizeMode:'contain'},video:{position:'absolute',left:0,top:0,right:0,bottom:0}});var ExpoVideoManagerConstants=_reactNative.NativeModules.UIManager.ExponentVideo?_reactNative.NativeModules.UIManager.ExponentVideo.Constants:_reactNative.NativeModules.ExponentVideoManager;var Video=function(_React$Component){(0,_inherits2.default)(Video,_React$Component);function Video(props){var _this;(0,_classCallCheck2.default)(this,Video);_this=(0,_possibleConstructorReturn2.default)(this,(0,_getPrototypeOf2.default)(Video).call(this,props));_this._nativeRef=React.createRef();_this._handleNewStatus=function(status){if(_this.state.showPoster&&status.isLoaded&&(status.isPlaying||status.positionMillis!==0)){_this.setState({showPoster:false});}if(_this.props.onPlaybackStatusUpdate){_this.props.onPlaybackStatusUpdate(status);}};_this._performOperationAndHandleStatusAsync=function _callee(operation){var video,handle,status;return _regenerator.default.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:video=_this._nativeRef.current;if(video){_context.next=3;break;}throw new Error(\"Cannot complete operation because the Video component has not yet loaded\");case 3:handle=(0,_reactNative.findNodeHandle)(_this._nativeRef.current);_context.next=6;return _regenerator.default.awrap(operation(handle));case 6:status=_context.sent;_this._handleNewStatus(status);return _context.abrupt(\"return\",status);case 9:case\"end\":return _context.stop();}}},null,this);};_this._setFullscreen=function _callee2(value){return _regenerator.default.async(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:return _context2.abrupt(\"return\",_this._performOperationAndHandleStatusAsync(function(tag){return _reactNative.NativeModules.ExponentVideoManager.setFullscreen(tag,value);}));case 1:case\"end\":return _context2.stop();}}},null,this);};_this.presentFullscreenPlayer=function _callee3(){return _regenerator.default.async(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:return _context3.abrupt(\"return\",_this._setFullscreen(true));case 1:case\"end\":return _context3.stop();}}},null,this);};_this.presentIOSFullscreenPlayer=function(){console.warn(\"You're using `presentIOSFullscreenPlayer`. Please migrate your code to use `presentFullscreenPlayer` instead.\");return _this.presentFullscreenPlayer();};_this.presentFullscreenPlayerAsync=function(){return _this._performOperationAndHandleStatusAsync(function(tag){return _reactNative.NativeModules.ExponentAV.presentFullscreenPlayer(tag);});};_this.dismissFullscreenPlayer=function _callee4(){return _regenerator.default.async(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:return _context4.abrupt(\"return\",_this._setFullscreen(false));case 1:case\"end\":return _context4.stop();}}},null,this);};_this.dismissIOSFullscreenPlayer=function(){console.warn(\"You're using `dismissIOSFullscreenPlayer`. Please migrate your code to use `dismissFullscreenPlayer` instead.\");_this.dismissFullscreenPlayer();};_this.getStatusAsync=function _callee5(){return _regenerator.default.async(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:return _context5.abrupt(\"return\",_this._performOperationAndHandleStatusAsync(function(tag){return _reactNative.NativeModules.ExponentAV.getStatusForVideo(tag);}));case 1:case\"end\":return _context5.stop();}}},null,this);};_this.loadAsync=function _callee6(source){var initialStatus,downloadFirst,_ref,nativeSource,fullInitialStatus,_args6=arguments;return _regenerator.default.async(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:initialStatus=_args6.length>1&&_args6[1]!==undefined?_args6[1]:{};downloadFirst=_args6.length>2&&_args6[2]!==undefined?_args6[2]:true;_context6.next=4;return _regenerator.default.awrap((0,_AV.getNativeSourceAndFullInitialStatusForLoadAsync)(source,initialStatus,downloadFirst));case 4:_ref=_context6.sent;nativeSource=_ref.nativeSource;fullInitialStatus=_ref.fullInitialStatus;return _context6.abrupt(\"return\",_this._performOperationAndHandleStatusAsync(function(tag){return _reactNative.NativeModules.ExponentAV.loadForVideo(tag,nativeSource,fullInitialStatus);}));case 8:case\"end\":return _context6.stop();}}},null,this);};_this.unloadAsync=function _callee7(){return _regenerator.default.async(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:return _context7.abrupt(\"return\",_this._performOperationAndHandleStatusAsync(function(tag){return _reactNative.NativeModules.ExponentAV.unloadForVideo(tag);}));case 1:case\"end\":return _context7.stop();}}},null,this);};_this.setStatusAsync=function _callee8(status){return _regenerator.default.async(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:(0,_AV.assertStatusValuesInBounds)(status);return _context8.abrupt(\"return\",_this._performOperationAndHandleStatusAsync(function(tag){return _reactNative.NativeModules.ExponentAV.setStatusForVideo(tag,status);}));case 2:case\"end\":return _context8.stop();}}},null,this);};_this.replayAsync=function _callee9(){var status,_args9=arguments;return _regenerator.default.async(function _callee9$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:status=_args9.length>0&&_args9[0]!==undefined?_args9[0]:{};if(!(status.positionMillis&&status.positionMillis!==0)){_context9.next=3;break;}throw new Error('Requested position after replay has to be 0.');case 3:return _context9.abrupt(\"return\",_this._performOperationAndHandleStatusAsync(function(tag){return _reactNative.NativeModules.ExponentAV.replayVideo(tag,(0,_objectSpread2.default)({},status,{positionMillis:0,shouldPlay:true}));}));case 4:case\"end\":return _context9.stop();}}},null,this);};_this._nativeOnPlaybackStatusUpdate=function(event){_this._handleNewStatus(event.nativeEvent);};_this._nativeOnLoadStart=function(){if(_this.props.onLoadStart){_this.props.onLoadStart();}};_this._nativeOnLoad=function(event){if(_this.props.onLoad){_this.props.onLoad(event.nativeEvent);}_this._handleNewStatus(event.nativeEvent);};_this._nativeOnError=function(event){var error=event.nativeEvent.error;if(_this.props.onError){_this.props.onError(error);}_this._handleNewStatus((0,_AV.getUnloadedStatus)(error));};_this._nativeOnReadyForDisplay=function(event){if(_this.props.onReadyForDisplay){_this.props.onReadyForDisplay(event.nativeEvent);}};_this._nativeOnFullscreenUpdate=function(event){if(_this.props.onIOSFullscreenUpdate&&_this.props.onFullscreenUpdate){console.warn(\"You've supplied both `onIOSFullscreenUpdate` and `onFullscreenUpdate`. You're going to receive updates on both the callbacks.\");}else if(_this.props.onIOSFullscreenUpdate){console.warn(\"You're using `onIOSFullscreenUpdate`. Please migrate your code to use `onFullscreenUpdate` instead.\");}if(_this.props.onIOSFullscreenUpdate){_this.props.onIOSFullscreenUpdate(event.nativeEvent);}if(_this.props.onFullscreenUpdate){_this.props.onFullscreenUpdate(event.nativeEvent);}};_this._renderPoster=function(){return _this.props.usePoster&&_this.state.showPoster?React.createElement(_reactNative.Image,{style:_STYLES.poster,source:_this.props.posterSource}):null;};_this.state={showPoster:!!props.usePoster};return _this;}(0,_createClass2.default)(Video,[{key:\"setNativeProps\",value:function setNativeProps(nativeProps){var nativeVideo=(0,_nullthrows.default)(this._nativeRef.current);nativeVideo.setNativeProps(nativeProps);}},{key:\"render\",value:function render(){var _this2=this;var source=(0,_AV.getNativeSourceFromSource)(this.props.source);var nativeResizeMode=ExpoVideoManagerConstants.ScaleNone;if(this.props.resizeMode){var resizeMode=this.props.resizeMode;if(resizeMode===ResizeMode.STRETCH){nativeResizeMode=ExpoVideoManagerConstants.ScaleToFill;}else if(resizeMode===ResizeMode.CONTAIN){nativeResizeMode=ExpoVideoManagerConstants.ScaleAspectFit;}else if(resizeMode===ResizeMode.COVER){nativeResizeMode=ExpoVideoManagerConstants.ScaleAspectFill;}}var status=(0,_objectSpread2.default)({},this.props.status);['progressUpdateIntervalMillis','positionMillis','shouldPlay','rate','shouldCorrectPitch','volume','isMuted','isLooping'].forEach(function(prop){if(prop in _this2.props){status[prop]=_this2.props[prop];}});var nativeProps=(0,_objectSpread2.default)({style:_STYLES.base},(0,_lodash.default)(this.props,'source'),{source:source,nativeResizeMode:nativeResizeMode,status:status,onStatusUpdateNative:this._nativeOnPlaybackStatusUpdate,onLoadStartNative:this._nativeOnLoadStart,onLoadNative:this._nativeOnLoad,onErrorNative:this._nativeOnError,onReadyForDisplayNative:this._nativeOnReadyForDisplay,onFullscreenUpdateNative:this._nativeOnFullscreenUpdate});return React.createElement(_reactNative.View,{style:nativeProps.style,pointerEvents:\"box-none\"},React.createElement(ExponentVideo,(0,_extends2.default)({ref:this._nativeRef},nativeProps,{style:_STYLES.video})),this._renderPoster());}}]);return Video;}(React.Component);exports.default=Video;Video.RESIZE_MODE_CONTAIN=ResizeMode.CONTAIN;Video.RESIZE_MODE_COVER=ResizeMode.COVER;Video.RESIZE_MODE_STRETCH=ResizeMode.STRETCH;Video.IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT=IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;Video.IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT=IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;Video.IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS=IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;Video.IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS=IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;Video.FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT=FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;Video.FULLSCREEN_UPDATE_PLAYER_DID_PRESENT=FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;Video.FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS=FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;Video.FULLSCREEN_UPDATE_PLAYER_DID_DISMISS=FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;Video.propTypes=(0,_objectSpread2.default)({source:_propTypes.default.oneOfType([_propTypes.default.shape({uri:_propTypes.default.string,overrideFileExtensionAndroid:_propTypes.default.string}),_propTypes.default.number]),posterSource:_propTypes.default.oneOfType([_propTypes.default.shape({uri:_propTypes.default.string}),_propTypes.default.number]),onPlaybackStatusUpdate:_propTypes.default.func,onLoadStart:_propTypes.default.func,onLoad:_propTypes.default.func,onError:_propTypes.default.func,onIOSFullscreenUpdate:_propTypes.default.func,onFullscreenUpdate:_propTypes.default.func,onReadyForDisplay:_propTypes.default.func,useNativeControls:_propTypes.default.bool,resizeMode:_propTypes.default.string,usePoster:_propTypes.default.bool,status:_propTypes.default.shape({progressUpdateIntervalMillis:_propTypes.default.number,positionMillis:_propTypes.default.number,shouldPlay:_propTypes.default.bool,rate:_propTypes.default.number,shouldCorrectPitch:_propTypes.default.bool,volume:_propTypes.default.number,isMuted:_propTypes.default.bool,isLooping:_propTypes.default.bool}),progressUpdateIntervalMillis:_propTypes.default.number,positionMillis:_propTypes.default.number,shouldPlay:_propTypes.default.bool,rate:_propTypes.default.number,shouldCorrectPitch:_propTypes.default.bool,volume:_propTypes.default.number,isMuted:_propTypes.default.bool,isLooping:_propTypes.default.bool,scaleX:_propTypes.default.number,scaleY:_propTypes.default.number,translateX:_propTypes.default.number,translateY:_propTypes.default.number,rotation:_propTypes.default.number},_reactNative.ViewPropTypes);(0,_extends2.default)(Video.prototype,_AV.PlaybackMixin);var ExponentVideo=(0,_reactNative.requireNativeComponent)('ExponentVideo',Video,{nativeOnly:{source:true,nativeResizeMode:true,onStatusUpdateNative:true,onLoadStartNative:true,onLoadNative:true,onErrorNative:true,onReadyForDisplayNative:true,onFullscreenUpdateNative:true}});","map":{"version":3,"sources":["../../src/av/Video.tsx"],"names":[],"mappings":"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","sourcesContent":["import omit from 'lodash.omit';\nimport nullthrows from 'nullthrows';\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport {\n  Image,\n  NativeModules,\n  StyleSheet,\n  View,\n  ViewPropTypes,\n  findNodeHandle,\n  requireNativeComponent,\n  NativeComponent,\n} from 'react-native';\n\nimport {\n  assertStatusValuesInBounds,\n  getNativeSourceAndFullInitialStatusForLoadAsync,\n  getNativeSourceFromSource,\n  getUnloadedStatus,\n  Playback,\n  PlaybackMixin,\n  PlaybackSource,\n  PlaybackNativeSource,\n  PlaybackStatus,\n  PlaybackStatusToSet,\n} from './AV';\n\nexport type NaturalSize = {\n  width: number;\n  height: number;\n  orientation: 'portrait' | 'landscape';\n};\n\nenum ResizeMode {\n  CONTAIN = 'contain',\n  COVER = 'cover',\n  STRETCH = 'stretch',\n}\n\ntype ReadyForDisplayEvent = {\n  naturalSize: NaturalSize;\n  status: PlaybackStatus;\n};\n\ntype FullscreenUpdateEvent = {\n  fullscreenUpdate: 0 | 1 | 2 | 3;\n  status: PlaybackStatus;\n};\n\ntype Props = {\n  // Source stuff\n  source?: PlaybackSource; // { uri: 'http://foo/bar.mp4' }, Asset, or require('./foo/bar.mp4')\n  posterSource?: { uri: string } | number; // { uri: 'http://foo/bar.mp4' } or require('./foo/bar.mp4')\n\n  // Callbacks\n  onPlaybackStatusUpdate?: (status: PlaybackStatus) => void;\n  onLoadStart?: () => void;\n  onLoad?: (status: PlaybackStatus) => void;\n  onError?: (error: string) => void;\n  onReadyForDisplay?: (event: ReadyForDisplayEvent) => void;\n  onFullscreenUpdate?: (event: FullscreenUpdateEvent) => void;\n  onIOSFullscreenUpdate?: (event: FullscreenUpdateEvent) => void;\n\n  // UI stuff\n  useNativeControls?: boolean;\n  // NOTE(ide): This should just be ResizeMode. We have the explicit strings for now since we don't\n  // currently export the ResizeMode enum.\n  resizeMode?: ResizeMode | 'stretch' | 'cover' | 'contain';\n  usePoster?: boolean;\n\n  // Playback API\n  status?: PlaybackStatusToSet;\n  progressUpdateIntervalMillis?: number;\n  positionMillis?: number;\n  shouldPlay?: boolean;\n  rate?: number;\n  shouldCorrectPitch?: boolean;\n  volume?: number;\n  isMuted?: boolean;\n  isLooping?: boolean;\n\n  // Required by react-native\n  scaleX?: number;\n  scaleY?: number;\n  translateX?: number;\n  translateY?: number;\n  rotation?: number;\n} & React.ElementProps<View>;\n\ntype NativeProps = {\n  source: PlaybackNativeSource | null;\n  nativeResizeMode?: Object;\n  status?: PlaybackStatusToSet;\n  onStatusUpdateNative?: (event: Object) => void;\n  onReadyForDisplayNative?: (event: Object) => void;\n  onFullscreenUpdateNative?: (event: Object) => void;\n  useNativeControls?: boolean;\n} & React.ElementProps<View>;\n\ntype State = {\n  showPoster: boolean;\n};\n\nexport const FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = 0;\nexport const FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = 1;\nexport const FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = 2;\nexport const FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = 3;\n\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\n\nconst _STYLES = StyleSheet.create({\n  base: {\n    overflow: 'hidden',\n  },\n  poster: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    resizeMode: 'contain',\n  },\n  video: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n  },\n});\n\n// On a real device UIManager should be present, however when running offline tests with jest-expo\n// we have to use the provided native module mock to access constants\nconst ExpoVideoManagerConstants = NativeModules.UIManager.ExponentVideo\n  ? NativeModules.UIManager.ExponentVideo.Constants\n  : NativeModules.ExponentVideoManager;\n\nexport default class Video extends React.Component<Props, State> implements Playback {\n  static RESIZE_MODE_CONTAIN = ResizeMode.CONTAIN;\n  static RESIZE_MODE_COVER = ResizeMode.COVER;\n  static RESIZE_MODE_STRETCH = ResizeMode.STRETCH;\n\n  static IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\n  static IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\n  static IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\n  static IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\n\n  static FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\n  static FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\n  static FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\n  static FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\n\n  static propTypes = {\n    // Source stuff\n    source: PropTypes.oneOfType([\n      PropTypes.shape({\n        uri: PropTypes.string,\n        overrideFileExtensionAndroid: PropTypes.string,\n      }), // remote URI like { uri: 'http://foo/bar.mp4' }\n      PropTypes.number, // asset module like require('./foo/bar.mp4')\n    ]),\n    posterSource: PropTypes.oneOfType([\n      PropTypes.shape({\n        uri: PropTypes.string,\n      }), // remote URI like { uri: 'http://foo/bar.mp4' }\n      PropTypes.number, // asset module like require('./foo/bar.mp4')\n    ]),\n\n    // Callbacks\n    onPlaybackStatusUpdate: PropTypes.func,\n    onLoadStart: PropTypes.func,\n    onLoad: PropTypes.func,\n    onError: PropTypes.func,\n    onIOSFullscreenUpdate: PropTypes.func,\n    onFullscreenUpdate: PropTypes.func,\n    onReadyForDisplay: PropTypes.func,\n\n    // UI stuff\n    useNativeControls: PropTypes.bool,\n    resizeMode: PropTypes.string,\n    usePoster: PropTypes.bool,\n\n    // Playback API\n    status: PropTypes.shape({\n      progressUpdateIntervalMillis: PropTypes.number,\n      positionMillis: PropTypes.number,\n      shouldPlay: PropTypes.bool,\n      rate: PropTypes.number,\n      shouldCorrectPitch: PropTypes.bool,\n      volume: PropTypes.number,\n      isMuted: PropTypes.bool,\n      isLooping: PropTypes.bool,\n    }),\n    progressUpdateIntervalMillis: PropTypes.number,\n    positionMillis: PropTypes.number,\n    shouldPlay: PropTypes.bool,\n    rate: PropTypes.number,\n    shouldCorrectPitch: PropTypes.bool,\n    volume: PropTypes.number,\n    isMuted: PropTypes.bool,\n    isLooping: PropTypes.bool,\n\n    // Required by react-native\n    scaleX: PropTypes.number,\n    scaleY: PropTypes.number,\n    translateX: PropTypes.number,\n    translateY: PropTypes.number,\n    rotation: PropTypes.number,\n    ...ViewPropTypes,\n  };\n\n  _nativeRef = React.createRef<InstanceType<ExponentVideo> & NativeComponent>();\n\n  // componentOrHandle: null | number | React.Component<any, any> | React.ComponentClass<any>\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      showPoster: !!props.usePoster,\n    };\n  }\n\n  setNativeProps(nativeProps: NativeProps) {\n    const nativeVideo = nullthrows(this._nativeRef.current);\n    nativeVideo.setNativeProps(nativeProps);\n  }\n\n  // Internal methods\n\n  _handleNewStatus = (status: PlaybackStatus) => {\n    if (\n      this.state.showPoster &&\n      status.isLoaded &&\n      (status.isPlaying || status.positionMillis !== 0)\n    ) {\n      this.setState({ showPoster: false });\n    }\n\n    if (this.props.onPlaybackStatusUpdate) {\n      this.props.onPlaybackStatusUpdate(status);\n    }\n  };\n\n  _performOperationAndHandleStatusAsync = async (\n    operation: (tag: number) => Promise<PlaybackStatus>\n  ): Promise<PlaybackStatus> => {\n    const video = this._nativeRef.current;\n    if (!video) {\n      throw new Error(`Cannot complete operation because the Video component has not yet loaded`);\n    }\n\n    const handle = findNodeHandle(this._nativeRef.current)!;\n    const status: PlaybackStatus = await operation(handle);\n    this._handleNewStatus(status);\n    return status;\n  };\n\n  // ### iOS Fullscreening API ###\n\n  _setFullscreen = async (value: boolean) => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      NativeModules.ExponentVideoManager.setFullscreen(tag, value)\n    );\n  };\n\n  presentFullscreenPlayer = async () => {\n    return this._setFullscreen(true);\n  };\n\n  presentIOSFullscreenPlayer = () => {\n    console.warn(\n      \"You're using `presentIOSFullscreenPlayer`. Please migrate your code to use `presentFullscreenPlayer` instead.\"\n    );\n    return this.presentFullscreenPlayer();\n  };\n\n  presentFullscreenPlayerAsync = () =>\n    this._performOperationAndHandleStatusAsync((tag: number) =>\n      NativeModules.ExponentAV.presentFullscreenPlayer(tag)\n    );\n\n  dismissFullscreenPlayer = async () => {\n    return this._setFullscreen(false);\n  };\n\n  dismissIOSFullscreenPlayer = () => {\n    console.warn(\n      \"You're using `dismissIOSFullscreenPlayer`. Please migrate your code to use `dismissFullscreenPlayer` instead.\"\n    );\n    this.dismissFullscreenPlayer();\n  };\n\n  // ### Unified playback API ### (consistent with Audio.js)\n  // All calls automatically call onPlaybackStatusUpdate as a side effect.\n\n  // Get status API\n\n  getStatusAsync = async (): Promise<PlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      NativeModules.ExponentAV.getStatusForVideo(tag)\n    );\n  };\n\n  // Loading / unloading API\n\n  loadAsync = async (\n    source: PlaybackSource,\n    initialStatus: PlaybackStatusToSet = {},\n    downloadFirst: boolean = true\n  ): Promise<PlaybackStatus> => {\n    const {\n      nativeSource,\n      fullInitialStatus,\n    } = await getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst);\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      NativeModules.ExponentAV.loadForVideo(tag, nativeSource, fullInitialStatus)\n    );\n  };\n\n  // Equivalent to setting URI to null.\n  unloadAsync = async (): Promise<PlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      NativeModules.ExponentAV.unloadForVideo(tag)\n    );\n  };\n\n  // Set status API (only available while isLoaded = true)\n\n  setStatusAsync = async (status: PlaybackStatusToSet): Promise<PlaybackStatus> => {\n    assertStatusValuesInBounds(status);\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      NativeModules.ExponentAV.setStatusForVideo(tag, status)\n    );\n  };\n\n  replayAsync = async (status: PlaybackStatusToSet = {}): Promise<PlaybackStatus> => {\n    if (status.positionMillis && status.positionMillis !== 0) {\n      throw new Error('Requested position after replay has to be 0.');\n    }\n\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      NativeModules.ExponentAV.replayVideo(tag, {\n        ...status,\n        positionMillis: 0,\n        shouldPlay: true,\n      })\n    );\n  };\n\n  // Methods of the Playback interface that are set via PlaybackMixin\n  playAsync!: () => Promise<PlaybackStatus>;\n  playFromPositionAsync!: (\n    positionMillis: number,\n    tolerances?: { toleranceMillisBefore?: number; toleranceMillisAfter?: number }\n  ) => Promise<PlaybackStatus>;\n  pauseAsync!: () => Promise<PlaybackStatus>;\n  stopAsync!: () => Promise<PlaybackStatus>;\n  setPositionAsync!: (\n    positionMillis: number,\n    tolerances?: { toleranceMillisBefore?: number; toleranceMillisAfter?: number }\n  ) => Promise<PlaybackStatus>;\n  setRateAsync!: (rate: number, shouldCorrectPitch: boolean) => Promise<PlaybackStatus>;\n  setVolumeAsync!: (volume: number) => Promise<PlaybackStatus>;\n  setIsMutedAsync!: (isMuted: boolean) => Promise<PlaybackStatus>;\n  setIsLoopingAsync!: (isLooping: boolean) => Promise<PlaybackStatus>;\n  setProgressUpdateIntervalAsync!: (\n    progressUpdateIntervalMillis: number\n  ) => Promise<PlaybackStatus>;\n\n  // ### Callback wrappers ###\n\n  _nativeOnPlaybackStatusUpdate = (event: { nativeEvent: PlaybackStatus }) => {\n    this._handleNewStatus(event.nativeEvent);\n  };\n\n  // TODO make sure we are passing the right stuff\n  _nativeOnLoadStart = () => {\n    if (this.props.onLoadStart) {\n      this.props.onLoadStart();\n    }\n  };\n\n  _nativeOnLoad = (event: { nativeEvent: PlaybackStatus }) => {\n    if (this.props.onLoad) {\n      this.props.onLoad(event.nativeEvent);\n    }\n    this._handleNewStatus(event.nativeEvent);\n  };\n\n  _nativeOnError = (event: { nativeEvent: { error: string } }) => {\n    const error: string = event.nativeEvent.error;\n    if (this.props.onError) {\n      this.props.onError(error);\n    }\n    this._handleNewStatus(getUnloadedStatus(error));\n  };\n\n  _nativeOnReadyForDisplay = (event: { nativeEvent: ReadyForDisplayEvent }) => {\n    if (this.props.onReadyForDisplay) {\n      this.props.onReadyForDisplay(event.nativeEvent);\n    }\n  };\n\n  _nativeOnFullscreenUpdate = (event: { nativeEvent: FullscreenUpdateEvent }) => {\n    if (this.props.onIOSFullscreenUpdate && this.props.onFullscreenUpdate) {\n      console.warn(\n        \"You've supplied both `onIOSFullscreenUpdate` and `onFullscreenUpdate`. You're going to receive updates on both the callbacks.\"\n      );\n    } else if (this.props.onIOSFullscreenUpdate) {\n      console.warn(\n        \"You're using `onIOSFullscreenUpdate`. Please migrate your code to use `onFullscreenUpdate` instead.\"\n      );\n    }\n\n    if (this.props.onIOSFullscreenUpdate) {\n      this.props.onIOSFullscreenUpdate(event.nativeEvent);\n    }\n\n    if (this.props.onFullscreenUpdate) {\n      this.props.onFullscreenUpdate(event.nativeEvent);\n    }\n  };\n\n  _renderPoster = () =>\n    this.props.usePoster && this.state.showPoster ? (\n      // @ts-ignore: the react-native type declarations are overly restrictive\n      <Image style={_STYLES.poster} source={this.props.posterSource!} />\n    ) : null;\n\n  render() {\n    const source = getNativeSourceFromSource(this.props.source);\n\n    let nativeResizeMode = ExpoVideoManagerConstants.ScaleNone;\n    if (this.props.resizeMode) {\n      let resizeMode = this.props.resizeMode;\n      if (resizeMode === ResizeMode.STRETCH) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleToFill;\n      } else if (resizeMode === ResizeMode.CONTAIN) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFit;\n      } else if (resizeMode === ResizeMode.COVER) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFill;\n      }\n    }\n\n    // Set status via individual props\n    const status: PlaybackStatusToSet = { ...this.props.status };\n    [\n      'progressUpdateIntervalMillis',\n      'positionMillis',\n      'shouldPlay',\n      'rate',\n      'shouldCorrectPitch',\n      'volume',\n      'isMuted',\n      'isLooping',\n    ].forEach(prop => {\n      if (prop in this.props) {\n        status[prop] = this.props[prop];\n      }\n    });\n\n    // Replace selected native props\n    const nativeProps: NativeProps = {\n      style: _STYLES.base,\n      ...omit(this.props, 'source'),\n      source,\n      nativeResizeMode,\n      status,\n      onStatusUpdateNative: this._nativeOnPlaybackStatusUpdate,\n      onLoadStartNative: this._nativeOnLoadStart,\n      onLoadNative: this._nativeOnLoad,\n      onErrorNative: this._nativeOnError,\n      onReadyForDisplayNative: this._nativeOnReadyForDisplay,\n      onFullscreenUpdateNative: this._nativeOnFullscreenUpdate,\n    };\n\n    return (\n      <View style={nativeProps.style} pointerEvents=\"box-none\">\n        <ExponentVideo ref={this._nativeRef} {...nativeProps} style={_STYLES.video} />\n        {this._renderPoster()}\n      </View>\n    );\n  }\n}\n\nObject.assign(Video.prototype, PlaybackMixin);\n\ntype ExponentVideo = React.ComponentClass<NativeProps>;\nconst ExponentVideo = requireNativeComponent('ExponentVideo', Video, {\n  nativeOnly: {\n    source: true,\n    nativeResizeMode: true,\n    onStatusUpdateNative: true,\n    onLoadStartNative: true,\n    onLoadNative: true,\n    onErrorNative: true,\n    onReadyForDisplayNative: true,\n    onFullscreenUpdateNative: true,\n  },\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}