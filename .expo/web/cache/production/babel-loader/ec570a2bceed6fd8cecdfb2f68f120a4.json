{"ast":null,"code":"var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _toConsumableArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf3=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var React=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native\");var _reactLifecyclesCompat=require(\"react-lifecycles-compat\");var _reactNativeScreens=require(\"react-native-screens\");var _createTabNavigator=_interopRequireDefault(require(\"../utils/createTabNavigator\"));var _BottomTabBar=_interopRequireDefault(require(\"../views/BottomTabBar\"));var _ResourceSavingScene=_interopRequireDefault(require(\"../views/ResourceSavingScene\"));var TabNavigationView=function(_React$PureComponent){(0,_inherits2.default)(TabNavigationView,_React$PureComponent);function TabNavigationView(){var _getPrototypeOf2;var _this;(0,_classCallCheck2.default)(this,TabNavigationView);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=(0,_possibleConstructorReturn2.default)(this,(_getPrototypeOf2=(0,_getPrototypeOf3.default)(TabNavigationView)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state={loaded:[_this.props.navigation.state.index]};_this._renderTabBar=function(){var _this$props=_this.props,_this$props$tabBarCom=_this$props.tabBarComponent,TabBarComponent=_this$props$tabBarCom===void 0?_BottomTabBar.default:_this$props$tabBarCom,tabBarOptions=_this$props.tabBarOptions,navigation=_this$props.navigation,screenProps=_this$props.screenProps,getLabelText=_this$props.getLabelText,getAccessibilityLabel=_this$props.getAccessibilityLabel,getButtonComponent=_this$props.getButtonComponent,getTestID=_this$props.getTestID,renderIcon=_this$props.renderIcon,onTabPress=_this$props.onTabPress,onTabLongPress=_this$props.onTabLongPress;var descriptors=_this.props.descriptors;var state=_this.props.navigation.state;var route=state.routes[state.index];var descriptor=descriptors[route.key];var options=descriptor.options;if(options.tabBarVisible===false){return null;}return React.createElement(TabBarComponent,(0,_extends2.default)({},tabBarOptions,{jumpTo:_this._jumpTo,navigation:navigation,screenProps:screenProps,onTabPress:onTabPress,onTabLongPress:onTabLongPress,getLabelText:getLabelText,getButtonComponent:getButtonComponent,getAccessibilityLabel:getAccessibilityLabel,getTestID:getTestID,renderIcon:renderIcon}));};_this._jumpTo=function(key){var _this$props2=_this.props,navigation=_this$props2.navigation,onIndexChange=_this$props2.onIndexChange;var index=navigation.state.routes.findIndex(function(route){return route.key===key;});onIndexChange(index);};return _this;}(0,_createClass2.default)(TabNavigationView,[{key:\"render\",value:function render(){var _this$props3=this.props,navigation=_this$props3.navigation,renderScene=_this$props3.renderScene,lazy=_this$props3.lazy;var routes=navigation.state.routes;var loaded=this.state.loaded;return React.createElement(_reactNative.View,{style:styles.container},React.createElement(_reactNativeScreens.ScreenContainer,{style:styles.pages},routes.map(function(route,index){if(lazy&&!loaded.includes(index)){return null;}var isFocused=navigation.state.index===index;return React.createElement(_ResourceSavingScene.default,{key:route.key,style:[_reactNative.StyleSheet.absoluteFill,{opacity:isFocused?1:0}],isVisible:isFocused},renderScene({route:route}));})),this._renderTabBar());}}],[{key:\"getDerivedStateFromProps\",value:function getDerivedStateFromProps(nextProps,prevState){var index=nextProps.navigation.state.index;return{loaded:prevState.loaded.includes(index)?prevState.loaded:[].concat((0,_toConsumableArray2.default)(prevState.loaded),[index])};}}]);return TabNavigationView;}(React.PureComponent);TabNavigationView.defaultProps={lazy:true};(0,_reactLifecyclesCompat.polyfill)(TabNavigationView);var styles=_reactNative.StyleSheet.create({container:{flex:1,overflow:'hidden'},pages:{flex:1}});var _default=(0,_createTabNavigator.default)(TabNavigationView);exports.default=_default;","map":{"version":3,"sources":["/Users/ntareguy/Downloads/gwizamobile1/node_modules/react-navigation-tabs/dist/navigators/createBottomTabNavigator.js"],"names":["TabNavigationView","state","loaded","props","navigation","index","_renderTabBar","tabBarComponent","TabBarComponent","BottomTabBar","tabBarOptions","screenProps","getLabelText","getAccessibilityLabel","getButtonComponent","getTestID","renderIcon","onTabPress","onTabLongPress","descriptors","route","routes","descriptor","key","options","tabBarVisible","_jumpTo","onIndexChange","findIndex","renderScene","lazy","styles","container","pages","map","includes","isFocused","StyleSheet","absoluteFill","opacity","nextProps","prevState","React","PureComponent","defaultProps","create","flex","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { polyfill } from 'react-lifecycles-compat';\n\n// eslint-disable-next-line import/no-unresolved\nimport { ScreenContainer } from 'react-native-screens';\n\nimport createTabNavigator from '../utils/createTabNavigator';\nimport BottomTabBar from '../views/BottomTabBar';\nimport ResourceSavingScene from '../views/ResourceSavingScene';\n\nclass TabNavigationView extends React.PureComponent {\n  static defaultProps = {\n    lazy: true\n  };\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { index } = nextProps.navigation.state;\n\n    return {\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(index) ? prevState.loaded : [...prevState.loaded, index]\n    };\n  }\n\n  state = {\n    loaded: [this.props.navigation.state.index]\n  };\n\n  _renderTabBar = () => {\n    const {\n      tabBarComponent: TabBarComponent = BottomTabBar,\n      tabBarOptions,\n      navigation,\n      screenProps,\n      getLabelText,\n      getAccessibilityLabel,\n      getButtonComponent,\n      getTestID,\n      renderIcon,\n      onTabPress,\n      onTabLongPress\n    } = this.props;\n\n    const { descriptors } = this.props;\n    const { state } = this.props.navigation;\n    const route = state.routes[state.index];\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    if (options.tabBarVisible === false) {\n      return null;\n    }\n\n    return <TabBarComponent {...tabBarOptions} jumpTo={this._jumpTo} navigation={navigation} screenProps={screenProps} onTabPress={onTabPress} onTabLongPress={onTabLongPress} getLabelText={getLabelText} getButtonComponent={getButtonComponent} getAccessibilityLabel={getAccessibilityLabel} getTestID={getTestID} renderIcon={renderIcon} />;\n  };\n\n  _jumpTo = key => {\n    const { navigation, onIndexChange } = this.props;\n\n    const index = navigation.state.routes.findIndex(route => route.key === key);\n\n    onIndexChange(index);\n  };\n\n  render() {\n    const { navigation, renderScene, lazy } = this.props;\n    const { routes } = navigation.state;\n    const { loaded } = this.state;\n\n    return <View style={styles.container}>\n        <ScreenContainer style={styles.pages}>\n          {routes.map((route, index) => {\n          if (lazy && !loaded.includes(index)) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          const isFocused = navigation.state.index === index;\n\n          return <ResourceSavingScene key={route.key} style={[StyleSheet.absoluteFill, { opacity: isFocused ? 1 : 0 }]} isVisible={isFocused}>\n                {renderScene({ route })}\n              </ResourceSavingScene>;\n        })}\n        </ScreenContainer>\n        {this._renderTabBar()}\n      </View>;\n  }\n}\n\npolyfill(TabNavigationView);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  pages: {\n    flex: 1\n  }\n});\n\nexport default createTabNavigator(TabNavigationView);"]},"metadata":{},"sourceType":"script"}