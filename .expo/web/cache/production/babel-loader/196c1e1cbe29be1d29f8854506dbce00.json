{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _lodash=_interopRequireDefault(require(\"lodash\"));var _country=_interopRequireDefault(require(\"./country\"));var _numberType=_interopRequireDefault(require(\"./resources/numberType.json\"));var phoneUtil=require('google-libphonenumber').PhoneNumberUtil.getInstance();var instance=null;var PhoneNumber=function(){function PhoneNumber(){(0,_classCallCheck2.default)(this,PhoneNumber);}(0,_createClass2.default)(PhoneNumber,[{key:\"getAllCountries\",value:function getAllCountries(){return _country.default.getAll();}},{key:\"getDialCode\",value:function getDialCode(number){var dialCode='';if(number.charAt(0)==='+'){var numericChars='';for(var i=0;i<number.length;i++){var c=number.charAt(i);if(this.isNumeric(c)){numericChars+=c;if(_country.default.getCountryCodes()[numericChars]){dialCode=number.substr(0,i+1);}if(numericChars.length===4){break;}}}}return dialCode;}},{key:\"getNumeric\",value:function getNumeric(str){return str.replace(/\\D/g,'');}},{key:\"isNumeric\",value:function isNumeric(n){return!isNaN(parseFloat(n))&&isFinite(n);}},{key:\"getCountryCodeOfNumber\",value:function getCountryCodeOfNumber(number){var dialCode=this.getDialCode(number);var numeric=this.getNumeric(dialCode);var countryCode=_country.default.getCountryCodes()[numeric];if(countryCode){return _lodash.default.first(countryCode.filter(function(iso2){return iso2;}));}return'';}},{key:\"parse\",value:function parse(number,iso2){try{return phoneUtil.parse(number,iso2);}catch(err){console.log(\"Exception was thrown: \"+err.toString());return null;}}},{key:\"isValidNumber\",value:function isValidNumber(number,iso2){var phoneInfo=this.parse(number,iso2);if(phoneInfo){return phoneUtil.isValidNumber(phoneInfo);}return false;}},{key:\"getNumberType\",value:function getNumberType(number,iso2){var phoneInfo=this.parse(number,iso2);var type=phoneInfo?phoneUtil.getNumberType(phoneInfo):-1;return _lodash.default.findKey(_numberType.default,function(noType){return noType===type;});}},{key:\"getCountryDataByCode\",value:function getCountryDataByCode(iso2){return _country.default.getCountryDataByCode(iso2);}}],[{key:\"getInstance\",value:function getInstance(){if(!instance){instance=new PhoneNumber();}return instance;}}]);return PhoneNumber;}();var _default=PhoneNumber.getInstance();exports.default=_default;","map":{"version":3,"sources":["/Users/ntareguy/Downloads/gwizamobile1/node_modules/react-native-phone-input/lib/phoneNumber.js"],"names":["phoneUtil","require","PhoneNumberUtil","getInstance","instance","PhoneNumber","Country","getAll","number","dialCode","charAt","numericChars","i","length","c","isNumeric","getCountryCodes","substr","str","replace","n","isNaN","parseFloat","isFinite","getDialCode","numeric","getNumeric","countryCode","_","first","filter","iso2","parse","err","console","log","toString","phoneInfo","isValidNumber","type","getNumberType","findKey","numberType","noType","getCountryDataByCode"],"mappings":"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","sourcesContent":["import _ from 'lodash';\n\nimport Country from './country';\nimport numberType from './resources/numberType.json';\n\nconst phoneUtil = require('google-libphonenumber').PhoneNumberUtil.getInstance();\n\nlet instance = null;\n\nclass PhoneNumber {\n  static getInstance() {\n    if (!instance) {\n      instance = new PhoneNumber();\n    }\n    return instance;\n  }\n\n  getAllCountries() {\n    return Country.getAll();\n  }\n\n  getDialCode(number) {\n    let dialCode = '';\n    // only interested in international numbers (starting with a plus)\n    if (number.charAt(0) === '+') {\n      let numericChars = '';\n      // iterate over chars\n      for (let i = 0; i < number.length; i++) {\n        const c = number.charAt(i);\n        // if char is number\n        if (this.isNumeric(c)) {\n          numericChars += c;\n          // if current numericChars make a valid dial code\n          // if (this.countryCodes[numericChars]) {\n          if (Country.getCountryCodes()[numericChars]) {\n            // store the actual raw string (useful for matching later)\n            dialCode = number.substr(0, i + 1);\n          }\n          // longest dial code is 4 chars\n          if (numericChars.length === 4) {\n            break;\n          }\n        }\n      }\n    }\n    return dialCode;\n  }\n\n  getNumeric(str) {\n    return str.replace(/\\D/g, '');\n  }\n\n  isNumeric(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  getCountryCodeOfNumber(number) {\n    const dialCode = this.getDialCode(number);\n    const numeric = this.getNumeric(dialCode);\n    const countryCode = Country.getCountryCodes()[numeric];\n\n    // countryCode[0] can be null -> get first element that is not null\n    if (countryCode) {\n      return _.first(countryCode.filter(iso2 => iso2));\n    }\n\n    return '';\n  }\n\n  parse(number, iso2) {\n    try {\n      return phoneUtil.parse(number, iso2);\n    } catch (err) {\n      console.log(`Exception was thrown: ${err.toString()}`);\n      return null;\n    }\n  }\n\n  isValidNumber(number, iso2) {\n    const phoneInfo = this.parse(number, iso2);\n\n    if (phoneInfo) {\n      return phoneUtil.isValidNumber(phoneInfo);\n    }\n\n    return false;\n  }\n\n  getNumberType(number, iso2) {\n    const phoneInfo = this.parse(number, iso2);\n    const type = phoneInfo ? phoneUtil.getNumberType(phoneInfo) : -1;\n    return _.findKey(numberType, noType => noType === type);\n  }\n\n  getCountryDataByCode(iso2) {\n    return Country.getCountryDataByCode(iso2);\n  }\n}\n\nexport default PhoneNumber.getInstance();\n"]},"metadata":{},"sourceType":"script"}