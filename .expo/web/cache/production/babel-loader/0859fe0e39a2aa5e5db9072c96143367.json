{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=_default;var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _regenerator=_interopRequireDefault(require(\"@babel/runtime/regenerator\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf3=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _defineProperty2=_interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));var _react=_interopRequireDefault(require(\"react\"));var _reactNative=require(\"react-native\");var _expoFont=require(\"expo-font\");var _createIconSet=_interopRequireDefault(require(\"./vendor/react-native-vector-icons/lib/create-icon-set\"));var _iconButton=_interopRequireDefault(require(\"./vendor/react-native-vector-icons/lib/icon-button\"));function _default(glyphMap,fontName,expoAssetId){var font=(0,_defineProperty2.default)({},fontName,expoAssetId);var RNVIconComponent=(0,_createIconSet.default)(glyphMap,fontName);var Icon=function(_React$Component){(0,_inherits2.default)(Icon,_React$Component);function Icon(){var _getPrototypeOf2;var _this;(0,_classCallCheck2.default)(this,Icon);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=(0,_possibleConstructorReturn2.default)(this,(_getPrototypeOf2=(0,_getPrototypeOf3.default)(Icon)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state={fontIsLoaded:_expoFont.Font.isLoaded(fontName)};return _this;}(0,_createClass2.default)(Icon,[{key:\"componentWillMount\",value:function componentWillMount(){return _regenerator.default.async(function componentWillMount$(_context){while(1){switch(_context.prev=_context.next){case 0:this._mounted=true;if(this.state.fontIsLoaded){_context.next=5;break;}_context.next=4;return _regenerator.default.awrap(_expoFont.Font.loadAsync(font));case 4:this._mounted&&this.setState({fontIsLoaded:true});case 5:case\"end\":return _context.stop();}}},null,this);}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){this._mounted=false;}},{key:\"setNativeProps\",value:function setNativeProps(props){if(this._icon){this._icon.setNativeProps(props);}}},{key:\"render\",value:function render(){var _this2=this;if(!this.state.fontIsLoaded){return _react.default.createElement(_reactNative.Text,null);}return _react.default.createElement(RNVIconComponent,(0,_extends2.default)({ref:function ref(view){_this2._icon=view;}},this.props));}}]);return Icon;}(_react.default.Component);Icon.propTypes=RNVIconComponent.propTypes;Icon.defaultProps=RNVIconComponent.defaultProps;function getRawGlyphMap(){return glyphMap;}Icon.Button=(0,_iconButton.default)(Icon);Icon.glyphMap=glyphMap;Icon.getRawGlyphMap=getRawGlyphMap;Icon.getFontFamily=function(){return fontName;};Icon.loadFont=function(){return _expoFont.Font.loadAsync(font);};Icon.font=font;return Icon;}","map":{"version":3,"sources":["/Users/ntareguy/Downloads/gwizamobile1/node_modules/expo/node_modules/@expo/vector-icons/createIconSet.js"],"names":["glyphMap","fontName","expoAssetId","font","RNVIconComponent","Icon","state","fontIsLoaded","Font","isLoaded","_mounted","loadAsync","setState","props","_icon","setNativeProps","view","React","Component","propTypes","defaultProps","getRawGlyphMap","Button","getFontFamily","loadFont"],"mappings":"43BAAA,oDACA,yCACA,mCACA,6GACA,sGAEe,kBAASA,QAAT,CAAmBC,QAAnB,CAA6BC,WAA7B,CAA0C,CACvD,GAAMC,CAAAA,IAAI,iCAAMF,QAAN,CAAiBC,WAAjB,CAAV,CACA,GAAME,CAAAA,gBAAgB,CAAG,2BAAcJ,QAAd,CAAwBC,QAAxB,CAAzB,CAFuD,GAIjDI,CAAAA,IAJiD,0aAQrDC,KARqD,CAQ7C,CACNC,YAAY,CAAEC,eAAKC,QAAL,CAAcR,QAAd,CADR,CAR6C,0OAanD,KAAKS,QAAL,CAAgB,IAAhB,CAbmD,GAc9C,KAAKJ,KAAL,CAAWC,YAdmC,2EAe3CC,eAAKG,SAAL,CAAeR,IAAf,CAf2C,SAgBjD,KAAKO,QAAL,EAAiB,KAAKE,QAAL,CAAc,CAAEL,YAAY,CAAE,IAAhB,CAAd,CAAjB,CAhBiD,2HAoB9B,CACrB,KAAKG,QAAL,CAAgB,KAAhB,CACD,CAtBoD,sDAwBtCG,KAxBsC,CAwB/B,CACpB,GAAI,KAAKC,KAAT,CAAgB,CACd,KAAKA,KAAL,CAAWC,cAAX,CAA0BF,KAA1B,EACD,CACF,CA5BoD,uCA8B5C,iBACP,GAAI,CAAC,KAAKP,KAAL,CAAWC,YAAhB,CAA8B,CAC5B,MAAO,8BAAC,iBAAD,MAAP,CACD,CAED,MACE,8BAAC,gBAAD,wBACE,GAAG,CAAE,aAAAS,IAAI,CAAI,CACX,MAAI,CAACF,KAAL,CAAaE,IAAb,CACD,CAHH,EAIM,KAAKH,KAJX,EADF,CAQD,CA3CoD,kBAIpCI,eAAMC,SAJ8B,EAIjDb,IAJiD,CAK9Cc,SAL8C,CAKlCf,gBAAgB,CAACe,SALiB,CAIjDd,IAJiD,CAM9Ce,YAN8C,CAM/BhB,gBAAgB,CAACgB,YANc,CA8CvD,QAASC,CAAAA,cAAT,EAA0B,CACxB,MAAOrB,CAAAA,QAAP,CACD,CAEDK,IAAI,CAACiB,MAAL,CAAc,wBAA0BjB,IAA1B,CAAd,CACAA,IAAI,CAACL,QAAL,CAAgBA,QAAhB,CACAK,IAAI,CAACgB,cAAL,CAAsBA,cAAtB,CACAhB,IAAI,CAACkB,aAAL,CAAqB,iBAAMtB,CAAAA,QAAN,EAArB,CACAI,IAAI,CAACmB,QAAL,CAAgB,iBAAMhB,gBAAKG,SAAL,CAAeR,IAAf,CAAN,EAAhB,CACAE,IAAI,CAACF,IAAL,CAAYA,IAAZ,CAEA,MAAOE,CAAAA,IAAP,CACD","sourcesContent":["import React from 'react';\nimport { Text } from 'react-native';\nimport { Font } from 'expo-font';\nimport createIconSet from './vendor/react-native-vector-icons/lib/create-icon-set';\nimport createIconButtonComponent from './vendor/react-native-vector-icons/lib/icon-button';\n\nexport default function(glyphMap, fontName, expoAssetId) {\n  const font = { [fontName]: expoAssetId };\n  const RNVIconComponent = createIconSet(glyphMap, fontName);\n\n  class Icon extends React.Component {\n    static propTypes = RNVIconComponent.propTypes;\n    static defaultProps = RNVIconComponent.defaultProps;\n\n    state = {\n      fontIsLoaded: Font.isLoaded(fontName),\n    };\n\n    async componentWillMount() {\n      this._mounted = true;\n      if (!this.state.fontIsLoaded) {\n        await Font.loadAsync(font);\n        this._mounted && this.setState({ fontIsLoaded: true });\n      }\n    }\n\n    componentWillUnmount() {\n      this._mounted = false;\n    }\n\n    setNativeProps(props) {\n      if (this._icon) {\n        this._icon.setNativeProps(props);\n      }\n    }\n\n    render() {\n      if (!this.state.fontIsLoaded) {\n        return <Text />;\n      }\n\n      return (\n        <RNVIconComponent\n          ref={view => {\n            this._icon = view;\n          }}\n          {...this.props}\n        />\n      );\n    }\n  }\n\n  function getRawGlyphMap() {\n    return glyphMap;\n  }\n\n  Icon.Button = createIconButtonComponent(Icon);\n  Icon.glyphMap = glyphMap;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.getFontFamily = () => fontName;\n  Icon.loadFont = () => Font.loadAsync(font);\n  Icon.font = font;\n\n  return Icon;\n}\n"]},"metadata":{},"sourceType":"script"}