{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.shareContactAsync=shareContactAsync;exports.getContactsAsync=getContactsAsync;exports.getPagedContactsAsync=getPagedContactsAsync;exports.getContactByIdAsync=getContactByIdAsync;exports.addContactAsync=addContactAsync;exports.updateContactAsync=updateContactAsync;exports.removeContactAsync=removeContactAsync;exports.writeContactToFileAsync=writeContactToFileAsync;exports.presentFormAsync=presentFormAsync;exports.addExistingGroupToContainerAsync=addExistingGroupToContainerAsync;exports.createGroupAsync=createGroupAsync;exports.updateGroupNameAsync=updateGroupNameAsync;exports.removeGroupAsync=removeGroupAsync;exports.addExistingContactToGroupAsync=addExistingContactToGroupAsync;exports.removeContactFromGroupAsync=removeContactFromGroupAsync;exports.getGroupsAsync=getGroupsAsync;exports.getDefaultContainerIdAsync=getDefaultContainerIdAsync;exports.getContainersAsync=getContainersAsync;exports.ContactTypes=exports.SortTypes=exports.ContainerTypes=exports.CalendarFormats=exports.Fields=exports.RELATIONSHIPS=exports.DATES=exports.URLS=exports.IM_ADDRESSES=exports.SOCIAL_PROFILES=exports.PHONETIC_LAST_NAME=exports.PHONETIC_MIDDLE_NAME=exports.PHONETIC_FIRST_NAME=exports.NAME_SUFFIX=exports.NAME_PREFIX=exports.NON_GREGORIAN_BIRTHDAY=exports.BIRTHDAY=exports.NOTE=exports.RAW_IMAGE=exports.IMAGE=exports.ADDRESSES=exports.EMAILS=exports.PHONE_NUMBERS=void 0;var _objectSpread2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));var _objectWithoutProperties2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));var _regenerator=_interopRequireDefault(require(\"@babel/runtime/regenerator\"));var _reactNative=require(\"react-native\");var _expoCore=require(\"expo-core\");var _uuidJs=_interopRequireDefault(require(\"uuid-js\"));var ExpoContacts=_expoCore.NativeModulesProxy.ExpoContacts;var isIos=_expoCore.Platform.OS==='ios';function shareContactAsync(contactId,message){var shareOptions,url,_args=arguments;return _regenerator.default.async(function shareContactAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:shareOptions=_args.length>2&&_args[2]!==undefined?_args[2]:{};if(!isIos){_context.next=8;break;}_context.next=4;return _regenerator.default.awrap(writeContactToFileAsync({id:contactId}));case 4:url=_context.sent;_reactNative.Share.share({url:url,message:message},shareOptions);_context.next=9;break;case 8:return _context.abrupt(\"return\",ExpoContacts.shareContactAsync(contactId,message));case 9:case\"end\":return _context.stop();}}},null,this);}function getContactsAsync(){var contactQuery=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};return ExpoContacts.getContactsAsync(contactQuery);}function getPagedContactsAsync(){var contactQuery=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var pageSize=contactQuery.pageSize,nOptions=(0,_objectWithoutProperties2.default)(contactQuery,[\"pageSize\"]);if(pageSize&&pageSize<=0){throw new Error('Error: Contacts.getPagedContactsAsync: `pageSize` must be greater than 0');}return getContactsAsync((0,_objectSpread2.default)({},nOptions,{pageSize:pageSize}));}function getContactByIdAsync(id,fields){var results;return _regenerator.default.async(function getContactByIdAsync$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!(id==null)){_context2.next=4;break;}throw new Error('Error: Contacts.getContactByIdAsync: Please pass an ID as a parameter');case 4:_context2.next=6;return _regenerator.default.awrap(ExpoContacts.getContactsAsync({pageSize:1,pageOffset:0,fields:fields,id:id}));case 6:results=_context2.sent;if(!(results&&results.data&&results.data.length>0)){_context2.next=9;break;}return _context2.abrupt(\"return\",results.data[0]);case 9:return _context2.abrupt(\"return\",null);case 10:case\"end\":return _context2.stop();}}},null,this);}function addContactAsync(contact,containerId){return ExpoContacts.addContactAsync(contact,containerId);}function updateContactAsync(contact){return ExpoContacts.updateContactAsync(contact);}function removeContactAsync(contactId){return ExpoContacts.removeContactAsync(contactId);}function writeContactToFileAsync(){var contactQuery=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};return ExpoContacts.writeContactToFileAsync(contactQuery);}function presentFormAsync(contactId,contact){var formOptions=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};if(isIos){var adjustedOptions=formOptions;if(contactId){if(contact){contact=null;console.log('Expo.Contacts.presentFormAsync: You should define either a `contact` or a `contactId` but not both.');}if(adjustedOptions.isNew!==undefined){console.log('Expo.Contacts.presentFormAsync: formOptions.isNew is not supported with `contactId`');}}return ExpoContacts.presentFormAsync(contactId,contact,adjustedOptions);}else{return ExpoContacts.presentFormAsync(contactId,contact,formOptions);}}function addExistingGroupToContainerAsync(groupId,containerId){if(isIos){return ExpoContacts.addExistingGroupToContainerAsync(groupId,containerId);}else{throw new Error('Error: Contacts.addExistingGroupToContainerAsync: iOS Only');}}function createGroupAsync(name,containerId){return _regenerator.default.async(function createGroupAsync$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(!isIos){_context3.next=9;break;}name=name||_uuidJs.default.create().toString();if(containerId){_context3.next=6;break;}_context3.next=5;return _regenerator.default.awrap(getDefaultContainerIdAsync());case 5:containerId=_context3.sent;case 6:return _context3.abrupt(\"return\",ExpoContacts.createGroupAsync(name,containerId));case 9:throw new Error('Error: Contacts.createGroupAsync: iOS Only');case 10:case\"end\":return _context3.stop();}}},null,this);}function updateGroupNameAsync(groupName,groupId){if(isIos){return ExpoContacts.updateGroupNameAsync(groupName,groupId);}else{throw new Error('Error: Contacts.updateGroupNameAsync: iOS Only');}}function removeGroupAsync(groupId){if(isIos){return ExpoContacts.removeGroupAsync(groupId);}else{throw new Error('Error: Contacts.removeGroupAsync: iOS Only');}}function addExistingContactToGroupAsync(contactId,groupId){if(isIos){return ExpoContacts.addExistingContactToGroupAsync(contactId,groupId);}else{throw new Error('Error: Contacts.addExistingContactToGroupAsync: iOS Only');}}function removeContactFromGroupAsync(contactId,groupId){if(isIos){return ExpoContacts.removeContactFromGroupAsync(contactId,groupId);}else{throw new Error('Error: Contacts.removeContactFromGroupAsync: iOS Only');}}function getGroupsAsync(groupQuery){if(isIos){return ExpoContacts.getGroupsAsync(groupQuery);}else{throw new Error('Error: Contacts.getGroupsAsync: iOS Only');}}function getDefaultContainerIdAsync(){if(isIos){return ExpoContacts.getDefaultContainerIdentifierAsync();}else{throw new Error('Error: Contacts.getDefaultContainerIdAsync: iOS Only');}}function getContainersAsync(containerQuery){if(isIos){return ExpoContacts.getContainersAsync(containerQuery);}else{throw new Error('Error: Contacts.getContainersAsync: iOS Only');}}var PHONE_NUMBERS='phoneNumbers';exports.PHONE_NUMBERS=PHONE_NUMBERS;var EMAILS='emails';exports.EMAILS=EMAILS;var ADDRESSES='addresses';exports.ADDRESSES=ADDRESSES;var IMAGE='image';exports.IMAGE=IMAGE;var RAW_IMAGE='rawImage';exports.RAW_IMAGE=RAW_IMAGE;var NOTE='note';exports.NOTE=NOTE;var BIRTHDAY='birthday';exports.BIRTHDAY=BIRTHDAY;var NON_GREGORIAN_BIRTHDAY='nonGregorianBirthday';exports.NON_GREGORIAN_BIRTHDAY=NON_GREGORIAN_BIRTHDAY;var NAME_PREFIX='namePrefix';exports.NAME_PREFIX=NAME_PREFIX;var NAME_SUFFIX='nameSuffix';exports.NAME_SUFFIX=NAME_SUFFIX;var PHONETIC_FIRST_NAME='phoneticFirstName';exports.PHONETIC_FIRST_NAME=PHONETIC_FIRST_NAME;var PHONETIC_MIDDLE_NAME='phoneticMiddleName';exports.PHONETIC_MIDDLE_NAME=PHONETIC_MIDDLE_NAME;var PHONETIC_LAST_NAME='phoneticLastName';exports.PHONETIC_LAST_NAME=PHONETIC_LAST_NAME;var SOCIAL_PROFILES='socialProfiles';exports.SOCIAL_PROFILES=SOCIAL_PROFILES;var IM_ADDRESSES='instantMessageAddresses';exports.IM_ADDRESSES=IM_ADDRESSES;var URLS='urlAddresses';exports.URLS=URLS;var DATES='dates';exports.DATES=DATES;var RELATIONSHIPS='relationships';exports.RELATIONSHIPS=RELATIONSHIPS;var Fields={ID:'id',ContactType:'contactType',Name:'name',FirstName:'firstName',MiddleName:'middleName',LastName:'lastName',MaidenName:'maidenName',NamePrefix:'namePrefix',NameSuffix:'nameSuffix',Nickname:'nickname',PhoneticFirstName:'phoneticFirstName',PhoneticMiddleName:'phoneticMiddleName',PhoneticLastName:'phoneticLastName',Birthday:'birthday',NonGregorianBirthday:'nonGregorianBirthday',Emails:'emails',PhoneNumbers:'phoneNumbers',Addresses:'addresses',SocialProfiles:'socialProfiles',InstantMessageAddresses:'instantMessageAddresses',UrlAddresses:'urlAddresses',Company:'company',JobTitle:'jobTitle',Department:'department',ImageAvailable:'imageAvailable',Image:'image',RawImage:'rawImage',ExtraNames:'extraNames',Note:'note',Dates:'dates',Relationships:'relationships'};exports.Fields=Fields;var CalendarFormats={Gregorian:'gregorian',Buddhist:'buddhist',Chinese:'chinese',Coptic:'coptic',EthiopicAmeteMihret:'ethiopicAmeteMihret',EthiopicAmeteAlem:'ethiopicAmeteAlem',Hebrew:'hebrew',ISO8601:'iso8601',Indian:'indian',Islamic:'islamic',IslamicCivil:'islamicCivil',Japanese:'japanese',Persian:'persian',RepublicOfChina:'republicOfChina',IslamicTabular:'islamicTabular',IslamicUmmAlQura:'islamicUmmAlQura'};exports.CalendarFormats=CalendarFormats;var ContainerTypes={Local:'local',Exchange:'exchange',CardDAV:'cardDAV',Unassigned:'unassigned'};exports.ContainerTypes=ContainerTypes;var SortTypes={UserDefault:'userDefault',FirstName:'firstName',LastName:'lastName',None:'none'};exports.SortTypes=SortTypes;var ContactTypes={Person:'person',Company:'company'};exports.ContactTypes=ContactTypes;","map":{"version":3,"sources":["/Users/ntareguy/Downloads/gwizamobile1/node_modules/expo-contacts/src/Contacts.js"],"names":["ExpoContacts","NativeModulesProxy","isIos","Platform","OS","shareContactAsync","contactId","message","shareOptions","writeContactToFileAsync","id","url","Share","share","getContactsAsync","contactQuery","getPagedContactsAsync","pageSize","nOptions","Error","getContactByIdAsync","fields","pageOffset","results","data","length","addContactAsync","contact","containerId","updateContactAsync","removeContactAsync","presentFormAsync","formOptions","adjustedOptions","console","log","isNew","undefined","addExistingGroupToContainerAsync","groupId","createGroupAsync","name","UUID","create","toString","getDefaultContainerIdAsync","updateGroupNameAsync","groupName","removeGroupAsync","addExistingContactToGroupAsync","removeContactFromGroupAsync","getGroupsAsync","groupQuery","getDefaultContainerIdentifierAsync","getContainersAsync","containerQuery","PHONE_NUMBERS","EMAILS","ADDRESSES","IMAGE","RAW_IMAGE","NOTE","BIRTHDAY","NON_GREGORIAN_BIRTHDAY","NAME_PREFIX","NAME_SUFFIX","PHONETIC_FIRST_NAME","PHONETIC_MIDDLE_NAME","PHONETIC_LAST_NAME","SOCIAL_PROFILES","IM_ADDRESSES","URLS","DATES","RELATIONSHIPS","Fields","ID","ContactType","Name","FirstName","MiddleName","LastName","MaidenName","NamePrefix","NameSuffix","Nickname","PhoneticFirstName","PhoneticMiddleName","PhoneticLastName","Birthday","NonGregorianBirthday","Emails","PhoneNumbers","Addresses","SocialProfiles","InstantMessageAddresses","UrlAddresses","Company","JobTitle","Department","ImageAvailable","Image","RawImage","ExtraNames","Note","Dates","Relationships","CalendarFormats","Gregorian","Buddhist","Chinese","Coptic","EthiopicAmeteMihret","EthiopicAmeteAlem","Hebrew","ISO8601","Indian","Islamic","IslamicCivil","Japanese","Persian","RepublicOfChina","IslamicTabular","IslamicUmmAlQura","ContainerTypes","Local","Exchange","CardDAV","Unassigned","SortTypes","UserDefault","None","ContactTypes","Person"],"mappings":"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","sourcesContent":["// @flow\n\n//TODO:Bacon: No React Native\nimport { Share } from 'react-native';\nimport { NativeModulesProxy, Platform } from 'expo-core';\nimport UUID from 'uuid-js';\n\nconst { ExpoContacts } = NativeModulesProxy;\n\ntype CalendarFormatType =\n  | typeof CalendarFormats.Gregorian\n  | typeof CalendarFormats.Buddhist\n  | typeof CalendarFormats.Chinese\n  | typeof CalendarFormats.Coptic\n  | typeof CalendarFormats.EthiopicAmeteMihret\n  | typeof CalendarFormats.EthiopicAmeteAlem\n  | typeof CalendarFormats.Hebrew\n  | typeof CalendarFormats.ISO8601\n  | typeof CalendarFormats.Indian\n  | typeof CalendarFormats.Islamic\n  | typeof CalendarFormats.IslamicCivil\n  | typeof CalendarFormats.Japanese\n  | typeof CalendarFormats.Persian\n  | typeof CalendarFormats.RepublicOfChina\n  | typeof CalendarFormats.IslamicTabular\n  | typeof CalendarFormats.IslamicUmmAlQura;\n\ntype ContainerType =\n  | typeof ContainerTypes.Local\n  | typeof ContainerTypes.Exchange\n  | typeof ContainerTypes.CardDAV\n  | typeof ContainerTypes.Unassigned;\n\ntype ContactType = typeof ContactTypes.Person | typeof ContactTypes.Company;\n\ntype FieldType =\n  | typeof Fields.ID\n  | typeof Fields.ContactType\n  | typeof Fields.Name\n  | typeof Fields.FirstName\n  | typeof Fields.MiddleName\n  | typeof Fields.LastName\n  | typeof Fields.MaidenName\n  | typeof Fields.NamePrefix\n  | typeof Fields.NameSuffix\n  | typeof Fields.Nickname\n  | typeof Fields.PhoneticFirstName\n  | typeof Fields.PhoneticMiddleName\n  | typeof Fields.PhoneticLastName\n  | typeof Fields.Birthday\n  | typeof Fields.NonGregorianBirthday\n  | typeof Fields.Emails\n  | typeof Fields.PhoneNumbers\n  | typeof Fields.Addresses\n  | typeof Fields.SocialProfiles\n  | typeof Fields.InstantMessageAddresses\n  | typeof Fields.UrlAddresses\n  | typeof Fields.Company\n  | typeof Fields.JobTitle\n  | typeof Fields.Department\n  | typeof Fields.ImageAvailable\n  | typeof Fields.Image\n  | typeof Fields.RawImage\n  | typeof Fields.ExtraNames\n  | typeof Fields.Note\n  | typeof Fields.Dates\n  | typeof Fields.Relationships;\n\ntype Date = {\n  day?: number,\n  month?: number,\n  year?: number,\n  id: string,\n  label: string,\n  format?: CalendarFormatType,\n};\n\ntype Relationship = {\n  label: string,\n  name?: string,\n  id: string,\n};\n\ntype Email = {\n  email?: string,\n  isPrimary?: boolean,\n  label: string,\n  id: string,\n};\n\ntype PhoneNumber = {\n  number?: string,\n  isPrimary?: boolean,\n  digits?: string,\n  countryCode?: string,\n  label: string,\n  id: string,\n};\n\ntype Address = {\n  street?: string,\n  city?: string,\n  country?: string,\n  region?: string,\n  neighborhood?: string,\n  postalCode?: string,\n  poBox?: string,\n  isoCountryCode?: string,\n  label: string,\n  id: string,\n};\n\ntype SocialProfile = {\n  service?: string,\n  localizedProfile?: string,\n  url?: string,\n  username?: string,\n  userId?: string,\n  label: string,\n  id: string,\n};\n\ntype InstantMessageAddress = {\n  service?: string,\n  username?: string,\n  localizedService?: string,\n  label: string,\n  id: string,\n};\n\ntype UrlAddress = {\n  label: string,\n  url?: string,\n  id: string,\n};\n\ntype Image = {\n  uri?: string,\n  width?: number,\n  height?: number,\n  base64?: string,\n};\n\ntype Contact = {\n  id: string,\n  contactType: ContactType,\n  name: string,\n  firstName?: string,\n  middleName?: string,\n  lastName?: string,\n  maidenName?: string,\n  namePrefix?: string,\n  nameSuffix?: string,\n  nickname?: string,\n  phoneticFirstName?: string,\n  phoneticMiddleName?: string,\n  phoneticLastName?: string,\n  company?: string,\n  jobTitle?: string,\n  department?: string,\n  note?: string,\n  imageAvailable?: boolean,\n  image?: Image,\n  rawImage?: Image,\n  birthday?: Date,\n  dates?: Date[],\n  relationships?: Relationship[],\n  emails?: Email[],\n  phoneNumbers?: PhoneNumber[],\n  addresses?: Address[],\n  instantMessageAddresses?: InstantMessageAddress[],\n  urlAddresses?: UrlAddress[],\n\n  nonGregorianBirthday?: Date,\n  socialProfiles?: SocialProfile[],\n};\n\ntype ContactResponse = {\n  data: Contact[],\n  hasNextPage: boolean,\n  hasPreviousPage: boolean,\n};\n\ntype ContactSort =\n  | typeof SortTypes.UserDefault\n  | typeof SortTypes.FirstName\n  | typeof SortTypes.LastName\n  | typeof SortTypes.None;\n\ntype ContactQuery = {\n  pageSize?: number,\n  pageOffset?: number,\n  fields?: FieldType[],\n  sort?: ContactSort,\n  name?: string,\n  id?: string | string[],\n  groupId?: string,\n  containerId?: string,\n  rawContacts?: boolean,\n};\n\ntype FormOptions = {\n  displayedPropertyKeys?: FieldType[],\n  message?: string,\n  alternateName?: string,\n  allowsEditing?: boolean,\n  allowsActions?: boolean,\n  shouldShowLinkedContacts?: boolean,\n  isNew?: boolean,\n  cancelButtonTitle?: string,\n  preventAnimation?: boolean,\n  groupId?: string,\n};\n\ntype GroupQuery = {\n  groupId?: string,\n  groupName?: string,\n  containerId?: string,\n};\n\ntype Group = {\n  name?: string,\n  id?: string,\n};\n\ntype ContainerQuery = {\n  contactId?: string,\n  groupId?: string,\n  containerId?: string | string[],\n};\n\ntype Container = {\n  name: string,\n  id: string,\n  type: ContainerType,\n};\n\nconst isIos = Platform.OS === 'ios';\n\nexport async function shareContactAsync(\n  contactId: string,\n  message: string,\n  shareOptions: Object = {}\n): Promise<any> {\n  if (isIos) {\n    const url = await writeContactToFileAsync({\n      id: contactId,\n    });\n    Share.share(\n      {\n        url,\n        message,\n      },\n      shareOptions\n    );\n  } else {\n    return ExpoContacts.shareContactAsync(contactId, message);\n  }\n}\n\nexport function getContactsAsync(contactQuery: ContactQuery = {}): Promise<ContactResponse> {\n  return ExpoContacts.getContactsAsync(contactQuery);\n}\n\nexport function getPagedContactsAsync(contactQuery: ContactQuery = {}): Promise<ContactResponse> {\n  const { pageSize, ...nOptions } = contactQuery;\n\n  if (pageSize && pageSize <= 0) {\n    throw new Error('Error: Contacts.getPagedContactsAsync: `pageSize` must be greater than 0');\n  }\n\n  return getContactsAsync({\n    ...nOptions,\n    pageSize,\n  });\n}\n\nexport async function getContactByIdAsync(id: string, fields?: FieldType): Promise<?Contact> {\n  if (id == null) {\n    throw new Error('Error: Contacts.getContactByIdAsync: Please pass an ID as a parameter');\n  } else {\n    const results = await ExpoContacts.getContactsAsync({\n      pageSize: 1,\n      pageOffset: 0,\n      fields,\n      id,\n    });\n    if (results && results.data && results.data.length > 0) {\n      return results.data[0];\n    }\n    return null;\n  }\n}\n\nexport function addContactAsync(contact: Contact, containerId: string): Promise<string> {\n  return ExpoContacts.addContactAsync(contact, containerId);\n}\n\nexport function updateContactAsync(contact: Contact): Promise<string> {\n  return ExpoContacts.updateContactAsync(contact);\n}\n\nexport function removeContactAsync(contactId: string): Promise<any> {\n  return ExpoContacts.removeContactAsync(contactId);\n}\n\nexport function writeContactToFileAsync(contactQuery: ContactQuery = {}): Promise<?string> {\n  return ExpoContacts.writeContactToFileAsync(contactQuery);\n}\n\n// TODO: Evan: Test\nexport function presentFormAsync(\n  contactId: ?string,\n  contact: ?Contact,\n  formOptions: FormOptions = {}\n): Promise<any> {\n  if (isIos) {\n    let adjustedOptions = formOptions;\n\n    if (contactId) {\n      if (contact) {\n        contact = null;\n        console.log(\n          'Expo.Contacts.presentFormAsync: You should define either a `contact` or a `contactId` but not both.'\n        );\n      }\n      if (adjustedOptions.isNew !== undefined) {\n        console.log(\n          'Expo.Contacts.presentFormAsync: formOptions.isNew is not supported with `contactId`'\n        );\n      }\n    }\n    return ExpoContacts.presentFormAsync(contactId, contact, adjustedOptions);\n  } else {\n    return ExpoContacts.presentFormAsync(contactId, contact, formOptions);\n  }\n}\n\n// iOS Only\n\nexport function addExistingGroupToContainerAsync(\n  groupId: string,\n  containerId: string\n): Promise<any> {\n  if (isIos) {\n    return ExpoContacts.addExistingGroupToContainerAsync(groupId, containerId);\n  } else {\n    throw new Error('Error: Contacts.addExistingGroupToContainerAsync: iOS Only');\n  }\n}\n\nexport async function createGroupAsync(name: ?string, containerId: ?string): Promise<string> {\n  if (isIos) {\n    name = name || UUID.create().toString();\n    if (!containerId) containerId = await getDefaultContainerIdAsync();\n\n    return ExpoContacts.createGroupAsync(name, containerId);\n  } else {\n    throw new Error('Error: Contacts.createGroupAsync: iOS Only');\n  }\n}\n\nexport function updateGroupNameAsync(groupName: string, groupId: string): Promise<any> {\n  if (isIos) {\n    return ExpoContacts.updateGroupNameAsync(groupName, groupId);\n  } else {\n    throw new Error('Error: Contacts.updateGroupNameAsync: iOS Only');\n  }\n}\n\nexport function removeGroupAsync(groupId: string): Promise<any> {\n  if (isIos) {\n    return ExpoContacts.removeGroupAsync(groupId);\n  } else {\n    throw new Error('Error: Contacts.removeGroupAsync: iOS Only');\n  }\n}\n\nexport function addExistingContactToGroupAsync(contactId: string, groupId: string): Promise<any> {\n  if (isIos) {\n    return ExpoContacts.addExistingContactToGroupAsync(contactId, groupId);\n  } else {\n    throw new Error('Error: Contacts.addExistingContactToGroupAsync: iOS Only');\n  }\n}\n\nexport function removeContactFromGroupAsync(contactId: string, groupId: string): Promise<any> {\n  if (isIos) {\n    return ExpoContacts.removeContactFromGroupAsync(contactId, groupId);\n  } else {\n    throw new Error('Error: Contacts.removeContactFromGroupAsync: iOS Only');\n  }\n}\n\nexport function getGroupsAsync(groupQuery: GroupQuery): Promise<Group[]> {\n  if (isIos) {\n    return ExpoContacts.getGroupsAsync(groupQuery);\n  } else {\n    throw new Error('Error: Contacts.getGroupsAsync: iOS Only');\n  }\n}\n\nexport function getDefaultContainerIdAsync(): Promise<string> {\n  if (isIos) {\n    return ExpoContacts.getDefaultContainerIdentifierAsync();\n  } else {\n    throw new Error('Error: Contacts.getDefaultContainerIdAsync: iOS Only');\n  }\n}\n\nexport function getContainersAsync(containerQuery: ContainerQuery): Promise<Container[]> {\n  if (isIos) {\n    return ExpoContacts.getContainersAsync(containerQuery);\n  } else {\n    throw new Error('Error: Contacts.getContainersAsync: iOS Only');\n  }\n}\n\n// Legacy\nexport const PHONE_NUMBERS = 'phoneNumbers';\nexport const EMAILS = 'emails';\nexport const ADDRESSES = 'addresses';\nexport const IMAGE = 'image';\nexport const RAW_IMAGE = 'rawImage';\nexport const NOTE = 'note';\nexport const BIRTHDAY = 'birthday';\nexport const NON_GREGORIAN_BIRTHDAY = 'nonGregorianBirthday';\nexport const NAME_PREFIX = 'namePrefix';\nexport const NAME_SUFFIX = 'nameSuffix';\nexport const PHONETIC_FIRST_NAME = 'phoneticFirstName';\nexport const PHONETIC_MIDDLE_NAME = 'phoneticMiddleName';\nexport const PHONETIC_LAST_NAME = 'phoneticLastName';\nexport const SOCIAL_PROFILES = 'socialProfiles';\nexport const IM_ADDRESSES = 'instantMessageAddresses';\nexport const URLS = 'urlAddresses';\nexport const DATES = 'dates';\nexport const RELATIONSHIPS = 'relationships';\n\nexport const Fields = {\n  ID: 'id',\n  ContactType: 'contactType',\n  Name: 'name',\n  FirstName: 'firstName',\n  MiddleName: 'middleName',\n  LastName: 'lastName',\n  MaidenName: 'maidenName',\n  NamePrefix: 'namePrefix',\n  NameSuffix: 'nameSuffix',\n  Nickname: 'nickname',\n  PhoneticFirstName: 'phoneticFirstName',\n  PhoneticMiddleName: 'phoneticMiddleName',\n  PhoneticLastName: 'phoneticLastName',\n  Birthday: 'birthday',\n  NonGregorianBirthday: 'nonGregorianBirthday',\n  Emails: 'emails',\n  PhoneNumbers: 'phoneNumbers',\n  Addresses: 'addresses',\n  SocialProfiles: 'socialProfiles',\n  InstantMessageAddresses: 'instantMessageAddresses',\n  UrlAddresses: 'urlAddresses',\n  Company: 'company',\n  JobTitle: 'jobTitle',\n  Department: 'department',\n  ImageAvailable: 'imageAvailable',\n  Image: 'image',\n  RawImage: 'rawImage',\n  ExtraNames: 'extraNames',\n  Note: 'note',\n  Dates: 'dates',\n  Relationships: 'relationships',\n};\n\nexport const CalendarFormats = {\n  Gregorian: 'gregorian',\n  Buddhist: 'buddhist',\n  Chinese: 'chinese',\n  Coptic: 'coptic',\n  EthiopicAmeteMihret: 'ethiopicAmeteMihret',\n  EthiopicAmeteAlem: 'ethiopicAmeteAlem',\n  Hebrew: 'hebrew',\n  ISO8601: 'iso8601',\n  Indian: 'indian',\n  Islamic: 'islamic',\n  IslamicCivil: 'islamicCivil',\n  Japanese: 'japanese',\n  Persian: 'persian',\n  RepublicOfChina: 'republicOfChina',\n  IslamicTabular: 'islamicTabular',\n  IslamicUmmAlQura: 'islamicUmmAlQura',\n};\n\nexport const ContainerTypes = {\n  Local: 'local',\n  Exchange: 'exchange',\n  CardDAV: 'cardDAV',\n  Unassigned: 'unassigned',\n};\n\nexport const SortTypes = {\n  UserDefault: 'userDefault',\n  FirstName: 'firstName',\n  LastName: 'lastName',\n  None: 'none',\n};\n\nexport const ContactTypes = {\n  Person: 'person',\n  Company: 'company',\n};\n"]},"metadata":{},"sourceType":"script"}