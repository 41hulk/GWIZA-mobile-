{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _objectSpread2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));var _core=require(\"@react-navigation/core\");var _DrawerActions=_interopRequireDefault(require(\"./DrawerActions\"));function withDefaultValue(obj,key,defaultValue){if(obj.hasOwnProperty(key)&&typeof obj[key]!=='undefined'){return obj;}obj[key]=defaultValue;return obj;}var getActiveRouteKey=function getActiveRouteKey(route){if(route.routes&&route.routes[route.index]){return getActiveRouteKey(route.routes[route.index]);}return route.key;};var _default=function _default(routeConfigs){var config=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};config=(0,_objectSpread2.default)({},config);config=withDefaultValue(config,'resetOnBlur',config.unmountInactiveRoutes?true:!!config.resetOnBlur);config=withDefaultValue(config,'backBehavior','initialRoute');var switchRouter=(0,_core.SwitchRouter)(routeConfigs,config);var __id=-1;var genId=function genId(){__id++;return __id;};return(0,_objectSpread2.default)({},switchRouter,{getActionCreators:function getActionCreators(route,navStateKey){return(0,_objectSpread2.default)({openDrawer:function openDrawer(){return _DrawerActions.default.openDrawer({key:navStateKey});},closeDrawer:function closeDrawer(){return _DrawerActions.default.closeDrawer({key:navStateKey});},toggleDrawer:function toggleDrawer(){return _DrawerActions.default.toggleDrawer({key:navStateKey});}},switchRouter.getActionCreators(route,navStateKey));},getStateForAction:function getStateForAction(action,state){if(!state){return(0,_objectSpread2.default)({},switchRouter.getStateForAction(action,undefined),{isDrawerOpen:false,isDrawerIdle:true,drawerMovementDirection:null,openId:genId(),closeId:genId(),toggleId:genId()});}var isRouterTargeted=action.key==null||action.key===state.key;if(isRouterTargeted){if(action.type===_DrawerActions.default.DRAWER_CLOSED){return(0,_objectSpread2.default)({},state,{isDrawerOpen:false,isDrawerIdle:true,drawerMovementDirection:null});}if(action.type===_DrawerActions.default.DRAWER_OPENED){return(0,_objectSpread2.default)({},state,{isDrawerOpen:true,isDrawerIdle:true,drawerMovementDirection:null});}if(action.type===_DrawerActions.default.CLOSE_DRAWER){return(0,_objectSpread2.default)({},state,{closeId:genId()});}if(action.type===_DrawerActions.default.MARK_DRAWER_SETTLING){return(0,_objectSpread2.default)({},state,{isDrawerIdle:false,drawerMovementDirection:action.willShow?'opening':'closing'});}if(action.type===_DrawerActions.default.MARK_DRAWER_ACTIVE){return(0,_objectSpread2.default)({},state,{isDrawerIdle:false,drawerMovementDirection:null});}if(action.type===_DrawerActions.default.MARK_DRAWER_IDLE){return(0,_objectSpread2.default)({},state,{isDrawerIdle:true,drawerMovementDirection:null});}if(action.type===_core.NavigationActions.BACK&&(state.isDrawerOpen||!state.isDrawerIdle)&&state.drawerMovementDirection!=='closing'){return(0,_objectSpread2.default)({},state,{closeId:genId()});}if(action.type===_DrawerActions.default.OPEN_DRAWER){return(0,_objectSpread2.default)({},state,{openId:genId()});}if(action.type===_DrawerActions.default.TOGGLE_DRAWER){return(0,_objectSpread2.default)({},state,{toggleId:genId()});}}var switchedState=switchRouter.getStateForAction(action,state);if(switchedState===null){return null;}if(switchedState!==state){if(getActiveRouteKey(switchedState)!==getActiveRouteKey(state)&&(state.isDrawerOpen||state.drawerMovementDirection!=='closing')){return(0,_objectSpread2.default)({},switchedState,{closeId:genId()});}return switchedState;}return state;}});};exports.default=_default;","map":{"version":3,"sources":["/Users/ntareguy/Downloads/gwizamobile1/node_modules/react-navigation-drawer/dist/routers/DrawerRouter.js"],"names":["withDefaultValue","obj","key","defaultValue","hasOwnProperty","getActiveRouteKey","route","routes","index","routeConfigs","config","unmountInactiveRoutes","resetOnBlur","switchRouter","__id","genId","getActionCreators","navStateKey","openDrawer","DrawerActions","closeDrawer","toggleDrawer","getStateForAction","action","state","undefined","isDrawerOpen","isDrawerIdle","drawerMovementDirection","openId","closeId","toggleId","isRouterTargeted","type","DRAWER_CLOSED","DRAWER_OPENED","CLOSE_DRAWER","MARK_DRAWER_SETTLING","willShow","MARK_DRAWER_ACTIVE","MARK_DRAWER_IDLE","NavigationActions","BACK","OPEN_DRAWER","TOGGLE_DRAWER","switchedState"],"mappings":"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","sourcesContent":["import { SwitchRouter, NavigationActions } from '@react-navigation/core';\nimport DrawerActions from './DrawerActions';\n\nfunction withDefaultValue(obj, key, defaultValue) {\n  if (obj.hasOwnProperty(key) && typeof obj[key] !== 'undefined') {\n    return obj;\n  }\n\n  obj[key] = defaultValue;\n  return obj;\n}\n\nconst getActiveRouteKey = route => {\n  if (route.routes && route.routes[route.index]) {\n    return getActiveRouteKey(route.routes[route.index]);\n  }\n  return route.key;\n};\n\nexport default ((routeConfigs, config = {}) => {\n  config = { ...config };\n  config = withDefaultValue(config, 'resetOnBlur', config.unmountInactiveRoutes ? true : !!config.resetOnBlur);\n  config = withDefaultValue(config, 'backBehavior', 'initialRoute');\n\n  const switchRouter = SwitchRouter(routeConfigs, config);\n\n  let __id = -1;\n  const genId = () => {\n    __id++;\n    return __id;\n  };\n\n  return {\n    ...switchRouter,\n\n    getActionCreators(route, navStateKey) {\n      return {\n        openDrawer: () => DrawerActions.openDrawer({ key: navStateKey }),\n        closeDrawer: () => DrawerActions.closeDrawer({ key: navStateKey }),\n        toggleDrawer: () => DrawerActions.toggleDrawer({ key: navStateKey }),\n        ...switchRouter.getActionCreators(route, navStateKey)\n      };\n    },\n\n    getStateForAction(action, state) {\n      // Set up the initial state if needed\n      if (!state) {\n        return {\n          ...switchRouter.getStateForAction(action, undefined),\n          isDrawerOpen: false,\n          isDrawerIdle: true,\n          drawerMovementDirection: null,\n          openId: genId(),\n          closeId: genId(),\n          toggleId: genId()\n        };\n      }\n\n      const isRouterTargeted = action.key == null || action.key === state.key;\n\n      if (isRouterTargeted) {\n        // Only handle actions that are meant for this drawer, as specified by action.key.\n\n        if (action.type === DrawerActions.DRAWER_CLOSED) {\n          return {\n            ...state,\n            isDrawerOpen: false,\n            isDrawerIdle: true,\n            drawerMovementDirection: null\n          };\n        }\n\n        if (action.type === DrawerActions.DRAWER_OPENED) {\n          return {\n            ...state,\n            isDrawerOpen: true,\n            isDrawerIdle: true,\n            drawerMovementDirection: null\n          };\n        }\n\n        if (action.type === DrawerActions.CLOSE_DRAWER) {\n          return {\n            ...state,\n            closeId: genId()\n          };\n        }\n\n        if (action.type === DrawerActions.MARK_DRAWER_SETTLING) {\n          return {\n            ...state,\n            isDrawerIdle: false,\n            drawerMovementDirection: action.willShow ? 'opening' : 'closing'\n          };\n        }\n\n        if (action.type === DrawerActions.MARK_DRAWER_ACTIVE) {\n          return {\n            ...state,\n            isDrawerIdle: false,\n            drawerMovementDirection: null\n          };\n        }\n\n        if (action.type === DrawerActions.MARK_DRAWER_IDLE) {\n          return {\n            ...state,\n            isDrawerIdle: true,\n            drawerMovementDirection: null\n          };\n        }\n\n        if (action.type === NavigationActions.BACK && (state.isDrawerOpen || !state.isDrawerIdle) && state.drawerMovementDirection !== 'closing') {\n          return {\n            ...state,\n            closeId: genId()\n          };\n        }\n\n        if (action.type === DrawerActions.OPEN_DRAWER) {\n          return {\n            ...state,\n            openId: genId()\n          };\n        }\n\n        if (action.type === DrawerActions.TOGGLE_DRAWER) {\n          return {\n            ...state,\n            toggleId: genId()\n          };\n        }\n      }\n\n      // Fall back on switch router for screen switching logic, and handling of child routers\n      const switchedState = switchRouter.getStateForAction(action, state);\n\n      if (switchedState === null) {\n        // The switch router or a child router is attempting to swallow this action. We return null to allow this.\n        return null;\n      }\n\n      // Has the switch router changed the state?\n      if (switchedState !== state) {\n        // If any navigation has happened, and the drawer is maybe open, make sure to close it\n        if (getActiveRouteKey(switchedState) !== getActiveRouteKey(state) && (state.isDrawerOpen || state.drawerMovementDirection !== 'closing')) {\n          return {\n            ...switchedState,\n            closeId: genId()\n          };\n        }\n\n        // At this point, return the state as defined by the switch router.\n        // The active route key hasn't changed, so this most likely means that a child router has returned\n        // a new state like a param change, but the same key is still active and the drawer will remain open\n        return switchedState;\n      }\n\n      return state;\n    }\n  };\n});"]},"metadata":{},"sourceType":"script"}