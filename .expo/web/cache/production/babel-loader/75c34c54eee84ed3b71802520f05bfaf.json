{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.openDatabase=openDatabase;exports.default=void 0;var _slicedToArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));require(\"./timer/polyfillNextTick\");var _lodash=_interopRequireDefault(require(\"lodash.zipobject\"));var _reactNative=require(\"react-native\");var _custom=_interopRequireDefault(require(\"@expo/websql/custom\"));var ExponentSQLite=_reactNative.NativeModules.ExponentSQLite;var SQLiteDatabase=function(){function SQLiteDatabase(name){(0,_classCallCheck2.default)(this,SQLiteDatabase);this._closed=false;this._name=name;}(0,_createClass2.default)(SQLiteDatabase,[{key:\"exec\",value:function exec(queries,readOnly,callback){if(this._closed){throw new Error(\"The SQLite database is closed\");}ExponentSQLite.exec(this._name,queries.map(_serializeQuery),readOnly).then(function(nativeResultSets){callback(null,nativeResultSets.map(_deserializeResultSet));},function(error){callback(error instanceof Error?error:new Error(error));});}},{key:\"close\",value:function close(){this._closed=true;ExponentSQLite.close(this._name);}}]);return SQLiteDatabase;}();function _serializeQuery(query){return[query.sql,_reactNative.Platform.OS==='android'?query.args.map(_escapeBlob):query.args];}function _deserializeResultSet(nativeResult){var _nativeResult=(0,_slicedToArray2.default)(nativeResult,5),errorMessage=_nativeResult[0],insertId=_nativeResult[1],rowsAffected=_nativeResult[2],columns=_nativeResult[3],rows=_nativeResult[4];if(errorMessage!==null){return{error:new Error(errorMessage)};}return{insertId:insertId,rowsAffected:rowsAffected,rows:rows.map(function(row){return(0,_lodash.default)(columns,row);})};}function _escapeBlob(data){if(typeof data==='string'){return data.replace(/\\u0002/g,\"\\x02\\x02\").replace(/\\u0001/g,\"\\x01\\x02\").replace(/\\u0000/g,\"\\x01\\x01\");}else{return data;}}var _openExpoSQLiteDatabase=(0,_custom.default)(SQLiteDatabase);function openDatabase(name){var version=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'1.0';var description=arguments.length>2&&arguments[2]!==undefined?arguments[2]:name;var size=arguments.length>3&&arguments[3]!==undefined?arguments[3]:1;var callback=arguments.length>4?arguments[4]:undefined;if(name===undefined){throw new TypeError(\"The database name must not be undefined\");}return _openExpoSQLiteDatabase(name,version,description,size,callback);}var _default={openDatabase:openDatabase};exports.default=_default;","map":{"version":3,"sources":["../src/SQLite.ts"],"names":[],"mappings":"udAAA,oCAEA,gEACA,yCACA,mE,GAEQ,CAAA,c,CAAmB,0B,CAAnB,c,IAcF,CAAA,c,YAIJ,wBAAY,IAAZ,CAAwB,mDAFxB,KAAA,OAAA,CAAmB,KAAnB,CAGE,KAAK,KAAL,CAAa,IAAb,CACD,C,0EAEI,O,CAA0B,Q,CAAmB,Q,CAAwB,CACxE,GAAI,KAAK,OAAT,CAAkB,CAChB,KAAM,IAAI,CAAA,KAAJ,iCAAN,CACD,CAED,cAAc,CAAC,IAAf,CAAoB,KAAK,KAAzB,CAAgC,OAAO,CAAC,GAAR,CAAY,eAAZ,CAAhC,CAA8D,QAA9D,EAAwE,IAAxE,CACE,SAAA,gBAAgB,CAAG,CACjB,QAAQ,CAAC,IAAD,CAAO,gBAAgB,CAAC,GAAjB,CAAqB,qBAArB,CAAP,CAAR,CACD,CAHH,CAIE,SAAA,KAAK,CAAG,CAEN,QAAQ,CAAC,KAAK,WAAY,CAAA,KAAjB,CAAyB,KAAzB,CAAiC,GAAI,CAAA,KAAJ,CAAU,KAAV,CAAlC,CAAR,CACD,CAPH,EASD,C,qCAEI,CACH,KAAK,OAAL,CAAe,IAAf,CACA,cAAc,CAAC,KAAf,CAAqB,KAAK,KAA1B,EACD,C,8BAGH,QAAS,CAAA,eAAT,CAAyB,KAAzB,CAA6C,CAC3C,MAAO,CAAC,KAAK,CAAC,GAAP,CAAY,sBAAS,EAAT,GAAgB,SAAhB,CAA4B,KAAK,CAAC,IAAN,CAAW,GAAX,CAAe,WAAf,CAA5B,CAA0D,KAAK,CAAC,IAA5E,CAAP,CACD,CAED,QAAS,CAAA,qBAAT,CAA+B,YAA/B,CAA2C,+CACmB,YADnB,IACpC,YADoC,kBACtB,QADsB,kBACZ,YADY,kBACE,OADF,kBACW,IADX,kBAIzC,GAAI,YAAY,GAAK,IAArB,CAA2B,CACzB,MAAO,CAAE,KAAK,CAAE,GAAI,CAAA,KAAJ,CAAU,YAAV,CAAT,CAAP,CACD,CAED,MAAO,CACL,QAAQ,CAAR,QADK,CAEL,YAAY,CAAZ,YAFK,CAGL,IAAI,CAAE,IAAI,CAAC,GAAL,CAAS,SAAA,GAAG,QAAI,oBAAU,OAAV,CAAmB,GAAnB,CAAJ,EAAZ,CAHD,CAAP,CAKD,CAED,QAAS,CAAA,WAAT,CAAwB,IAAxB,CAA+B,CAC7B,GAAI,MAAO,CAAA,IAAP,GAAgB,QAApB,CAA8B,CAE5B,MAAO,CAAA,IAAI,CACR,OADI,CACI,SADJ,CACe,UADf,EAEJ,OAFI,CAEI,SAFJ,CAEe,UAFf,EAGJ,OAHI,CAGI,SAHJ,CAGe,UAHf,CAAP,CAKD,CAPD,IAOO,CACL,MAAO,CAAA,IAAP,CACD,CACF,CAED,GAAM,CAAA,uBAAuB,CAAG,oBAAmB,cAAnB,CAAhC,CAEM,QAAU,CAAA,YAAV,CACJ,IADI,CAKmC,IAHvC,CAAA,OAGuC,2DAHrB,KAGqB,IAFvC,CAAA,WAEuC,2DAFjB,IAEiB,IADvC,CAAA,IACuC,2DADxB,CACwB,IAAvC,CAAA,QAAuC,2CAEvC,GAAI,IAAI,GAAK,SAAb,CAAwB,CACtB,KAAM,IAAI,CAAA,SAAJ,2CAAN,CACD,CACD,MAAO,CAAA,uBAAuB,CAAC,IAAD,CAAO,OAAP,CAAgB,WAAhB,CAA6B,IAA7B,CAAmC,QAAnC,CAA9B,CACD,C,aAIc,CACb,YAAY,CAAZ,YADa,C","sourcesContent":["import './timer/polyfillNextTick';\n\nimport zipObject from 'lodash.zipobject';\nimport { NativeModules, Platform } from 'react-native';\nimport customOpenDatabase from '@expo/websql/custom';\n\nconst { ExponentSQLite } = NativeModules;\n\ntype InternalQuery = { sql: string; args: unknown[] };\n\ntype InternalResultSet =\n  | { error: Error }\n  | {\n      insertId?: number;\n      rowsAffected: number;\n      rows: Array<{ [column: string]: any }>;\n    };\n\nexport type SQLiteCallback = (error?: Error | null, resultSet?: InternalResultSet) => void;\n\nclass SQLiteDatabase {\n  _name: string;\n  _closed: boolean = false;\n\n  constructor(name: string) {\n    this._name = name;\n  }\n\n  exec(queries: InternalQuery[], readOnly: boolean, callback: SQLiteCallback): void {\n    if (this._closed) {\n      throw new Error(`The SQLite database is closed`);\n    }\n\n    ExponentSQLite.exec(this._name, queries.map(_serializeQuery), readOnly).then(\n      nativeResultSets => {\n        callback(null, nativeResultSets.map(_deserializeResultSet));\n      },\n      error => {\n        // TODO: make the native API consistently reject with an error, not a string or other type\n        callback(error instanceof Error ? error : new Error(error));\n      }\n    );\n  }\n\n  close() {\n    this._closed = true;\n    ExponentSQLite.close(this._name);\n  }\n}\n\nfunction _serializeQuery(query: InternalQuery): [string, unknown[]] {\n  return [query.sql, Platform.OS === 'android' ? query.args.map(_escapeBlob) : query.args];\n}\n\nfunction _deserializeResultSet(nativeResult): InternalResultSet {\n  let [errorMessage, insertId, rowsAffected, columns, rows] = nativeResult;\n  // TODO: send more structured error information from the native module so we can better construct\n  // a SQLException object\n  if (errorMessage !== null) {\n    return { error: new Error(errorMessage) };\n  }\n\n  return {\n    insertId,\n    rowsAffected,\n    rows: rows.map(row => zipObject(columns, row)),\n  };\n}\n\nfunction _escapeBlob<T>(data: T): T {\n  if (typeof data === 'string') {\n    /* eslint-disable no-control-regex */\n    return data\n      .replace(/\\u0002/g, '\\u0002\\u0002')\n      .replace(/\\u0001/g, '\\u0001\\u0002')\n      .replace(/\\u0000/g, '\\u0001\\u0001') as any;\n    /* eslint-enable no-control-regex */\n  } else {\n    return data;\n  }\n}\n\nconst _openExpoSQLiteDatabase = customOpenDatabase(SQLiteDatabase);\n\nexport function openDatabase(\n  name: string,\n  version: string = '1.0',\n  description: string = name,\n  size: number = 1,\n  callback?: (db: WebSQLDatabase) => void\n): WebSQLDatabase {\n  if (name === undefined) {\n    throw new TypeError(`The database name must not be undefined`);\n  }\n  return _openExpoSQLiteDatabase(name, version, description, size, callback);\n}\n\ntype WebSQLDatabase = unknown;\n\nexport default {\n  openDatabase,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}