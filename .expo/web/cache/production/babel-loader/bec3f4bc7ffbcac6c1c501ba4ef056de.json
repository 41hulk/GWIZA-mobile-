{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _lodash=require(\"lodash\");var instance=null;var Country=function(){(0,_createClass2.default)(Country,null,[{key:\"getInstance\",value:function getInstance(){if(!instance){instance=new Country();}return instance;}}]);function Country(){(0,_classCallCheck2.default)(this,Country);this.countryCodes=[];this.countriesData=null;}(0,_createClass2.default)(Country,[{key:\"setCustomCountriesData\",value:function setCustomCountriesData(json){this.countriesData=json;}},{key:\"addCountryCode\",value:function addCountryCode(iso2,dialCode,priority){if(!(dialCode in this.countryCodes)){this.countryCodes[dialCode]=[];}var index=priority||0;this.countryCodes[dialCode][index]=iso2;}},{key:\"getAll\",value:function getAll(){if(!this.countries){this.countries=(0,_lodash.orderBy)(this.countriesData||require(\"./resources/countries.json\"),['name'],['asc']);}return this.countries;}},{key:\"getCountryCodes\",value:function getCountryCodes(){var _this=this;if(!this.countryCodes.length){this.getAll().map(function(country){_this.addCountryCode(country.iso2,country.dialCode,country.priority);if(country.areaCodes){country.areaCodes.map(function(areaCode){_this.addCountryCode(country.iso2,country.dialCode+areaCode);});}});}return this.countryCodes;}},{key:\"getCountryDataByCode\",value:function getCountryDataByCode(iso2){return(0,_lodash.find)(this.getAll(),function(country){return country.iso2===iso2;});}}]);return Country;}();var _default=Country.getInstance();exports.default=_default;","map":{"version":3,"sources":["/Users/ntareguy/Downloads/gwizamobile1/node_modules/react-native-phone-input/lib/country.js"],"names":["instance","Country","countryCodes","countriesData","json","iso2","dialCode","priority","index","countries","require","length","getAll","map","country","addCountryCode","areaCodes","areaCode","getInstance"],"mappings":"yVAAA,8BAEA,GAAIA,CAAAA,QAAQ,CAAG,IAAf,C,GAEMC,CAAAA,O,mGACiB,CACnB,GAAI,CAACD,QAAL,CAAe,CACbA,QAAQ,CAAG,GAAIC,CAAAA,OAAJ,EAAX,CACD,CACD,MAAOD,CAAAA,QAAP,CACD,C,IAED,kBAAc,4CACZ,KAAKE,YAAL,CAAoB,EAApB,CAEA,KAAKC,aAAL,CAAqB,IAArB,CACD,C,uGAEsBC,I,CAAM,CAC3B,KAAKD,aAAL,CAAqBC,IAArB,CACD,C,sDAEcC,I,CAAMC,Q,CAAUC,Q,CAAU,CACvC,GAAI,EAAED,QAAQ,GAAI,MAAKJ,YAAnB,CAAJ,CAAsC,CACpC,KAAKA,YAAL,CAAkBI,QAAlB,EAA8B,EAA9B,CACD,CAED,GAAME,CAAAA,KAAK,CAAGD,QAAQ,EAAI,CAA1B,CACA,KAAKL,YAAL,CAAkBI,QAAlB,EAA4BE,KAA5B,EAAqCH,IAArC,CACD,C,uCAEQ,CACP,GAAI,CAAC,KAAKI,SAAV,CAAqB,CACnB,KAAKA,SAAL,CAAiB,oBACf,KAAKN,aAAL,EAAsBO,OAAO,8BADd,CAEf,CAAC,MAAD,CAFe,CAGf,CAAC,KAAD,CAHe,CAAjB,CAKD,CAED,MAAO,MAAKD,SAAZ,CACD,C,yDAEiB,gBAChB,GAAI,CAAC,KAAKP,YAAL,CAAkBS,MAAvB,CAA+B,CAC7B,KAAKC,MAAL,GAAcC,GAAd,CAAkB,SAACC,OAAD,CAAa,CAC7B,KAAI,CAACC,cAAL,CAAoBD,OAAO,CAACT,IAA5B,CAAkCS,OAAO,CAACR,QAA1C,CAAoDQ,OAAO,CAACP,QAA5D,EACA,GAAIO,OAAO,CAACE,SAAZ,CAAuB,CACrBF,OAAO,CAACE,SAAR,CAAkBH,GAAlB,CAAsB,SAACI,QAAD,CAAc,CAClC,KAAI,CAACF,cAAL,CAAoBD,OAAO,CAACT,IAA5B,CAAkCS,OAAO,CAACR,QAAR,CAAmBW,QAArD,EACD,CAFD,EAGD,CACF,CAPD,EAQD,CACD,MAAO,MAAKf,YAAZ,CACD,C,kEAEoBG,I,CAAM,CACzB,MAAO,iBAAK,KAAKO,MAAL,EAAL,CAAoB,SAAAE,OAAO,QAAIA,CAAAA,OAAO,CAACT,IAAR,GAAiBA,IAArB,EAA3B,CAAP,CACD,C,oCAGYJ,OAAO,CAACiB,WAAR,E","sourcesContent":["import { find, orderBy } from 'lodash';\n\nlet instance = null;\n\nclass Country {\n  static getInstance() {\n    if (!instance) {\n      instance = new Country();\n    }\n    return instance;\n  }\n\n  constructor() {\n    this.countryCodes = [];\n\n    this.countriesData = null;\n  }\n\n  setCustomCountriesData(json) {\n    this.countriesData = json;\n  }\n\n  addCountryCode(iso2, dialCode, priority) {\n    if (!(dialCode in this.countryCodes)) {\n      this.countryCodes[dialCode] = [];\n    }\n\n    const index = priority || 0;\n    this.countryCodes[dialCode][index] = iso2;\n  }\n\n  getAll() {\n    if (!this.countries) {\n      this.countries = orderBy(\n        this.countriesData || require('./resources/countries.json'),\n        ['name'],\n        ['asc'],\n      );\n    }\n\n    return this.countries;\n  }\n\n  getCountryCodes() {\n    if (!this.countryCodes.length) {\n      this.getAll().map((country) => {\n        this.addCountryCode(country.iso2, country.dialCode, country.priority);\n        if (country.areaCodes) {\n          country.areaCodes.map((areaCode) => {\n            this.addCountryCode(country.iso2, country.dialCode + areaCode);\n          });\n        }\n      });\n    }\n    return this.countryCodes;\n  }\n\n  getCountryDataByCode(iso2) {\n    return find(this.getAll(), country => country.iso2 === iso2);\n  }\n}\n\nexport default Country.getInstance();\n"]},"metadata":{},"sourceType":"script"}