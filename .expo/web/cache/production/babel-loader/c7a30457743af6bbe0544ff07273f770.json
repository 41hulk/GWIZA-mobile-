{"ast":null,"code":"'use strict';var _objectSpread=require(\"@babel/runtime/helpers/objectSpread\");var defineLazyObjectProperty=require(\"./defineLazyObjectProperty\");function polyfillObjectProperty(object,name,getValue){var descriptor=Object.getOwnPropertyDescriptor(object,name);if(__DEV__&&descriptor){var backupName=\"original\"+name[0].toUpperCase()+name.substr(1);Object.defineProperty(object,backupName,_objectSpread({},descriptor,{value:object[name]}));}var _ref=descriptor||{},enumerable=_ref.enumerable,writable=_ref.writable,configurable=_ref.configurable;if(descriptor&&!configurable){console.error('Failed to set polyfill. '+name+' is not configurable.');return;}defineLazyObjectProperty(object,name,{get:getValue,enumerable:enumerable!==false,writable:writable!==false});}function polyfillGlobal(name,getValue){polyfillObjectProperty(global,name,getValue);}module.exports={polyfillObjectProperty:polyfillObjectProperty,polyfillGlobal:polyfillGlobal};","map":{"version":3,"sources":["/Users/ntareguy/Downloads/gwizamobile1/node_modules/react-native/Libraries/Utilities/PolyfillFunctions.js"],"names":["defineLazyObjectProperty","require","polyfillObjectProperty","object","name","getValue","descriptor","Object","getOwnPropertyDescriptor","__DEV__","backupName","toUpperCase","substr","defineProperty","value","enumerable","writable","configurable","console","error","get","polyfillGlobal","global","module","exports"],"mappings":"AAUA,a,iEAEA,GAAMA,CAAAA,wBAAwB,CAAGC,OAAO,8BAAxC,CAeA,QAASC,CAAAA,sBAAT,CACEC,MADF,CAEEC,IAFF,CAGEC,QAHF,CAIQ,CACN,GAAMC,CAAAA,UAAU,CAAGC,MAAM,CAACC,wBAAP,CAAgCL,MAAhC,CAAwCC,IAAxC,CAAnB,CACA,GAAIK,OAAO,EAAIH,UAAf,CAA2B,CACzB,GAAMI,CAAAA,UAAU,YAAcN,IAAI,CAAC,CAAD,CAAJ,CAAQO,WAAR,EAAd,CAAsCP,IAAI,CAACQ,MAAL,CAAY,CAAZ,CAAtD,CACAL,MAAM,CAACM,cAAP,CAAsBV,MAAtB,CAA8BO,UAA9B,kBACKJ,UADL,EAEEQ,KAAK,CAAEX,MAAM,CAACC,IAAD,CAFf,IAID,CARK,SAUuCE,UAAU,EAAI,EAVrD,CAUCS,UAVD,MAUCA,UAVD,CAUaC,QAVb,MAUaA,QAVb,CAUuBC,YAVvB,MAUuBA,YAVvB,CAWN,GAAIX,UAAU,EAAI,CAACW,YAAnB,CAAiC,CAC/BC,OAAO,CAACC,KAAR,CAAc,2BAA6Bf,IAA7B,CAAoC,uBAAlD,EACA,OACD,CAEDJ,wBAAwB,CAACG,MAAD,CAASC,IAAT,CAAe,CACrCgB,GAAG,CAAEf,QADgC,CAErCU,UAAU,CAAEA,UAAU,GAAK,KAFU,CAGrCC,QAAQ,CAAEA,QAAQ,GAAK,KAHc,CAAf,CAAxB,CAKD,CAED,QAASK,CAAAA,cAAT,CAA2BjB,IAA3B,CAAyCC,QAAzC,CAAkE,CAChEH,sBAAsB,CAACoB,MAAD,CAASlB,IAAT,CAAeC,QAAf,CAAtB,CACD,CAEDkB,MAAM,CAACC,OAAP,CAAiB,CAACtB,sBAAsB,CAAtBA,sBAAD,CAAyBmB,cAAc,CAAdA,cAAzB,CAAjB","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nconst defineLazyObjectProperty = require('./defineLazyObjectProperty');\n\n/**\n * Sets an object's property. If a property with the same name exists, this will\n * replace it but maintain its descriptor configuration. The property will be\n * replaced with a lazy getter.\n *\n * In DEV mode the original property value will be preserved as `original[PropertyName]`\n * so that, if necessary, it can be restored. For example, if you want to route\n * network requests through DevTools (to trace them):\n *\n *   global.XMLHttpRequest = global.originalXMLHttpRequest;\n *\n * @see https://github.com/facebook/react-native/issues/934\n */\nfunction polyfillObjectProperty<T>(\n  object: Object,\n  name: string,\n  getValue: () => T,\n): void {\n  const descriptor = Object.getOwnPropertyDescriptor(object, name);\n  if (__DEV__ && descriptor) {\n    const backupName = `original${name[0].toUpperCase()}${name.substr(1)}`;\n    Object.defineProperty(object, backupName, {\n      ...descriptor,\n      value: object[name],\n    });\n  }\n\n  const {enumerable, writable, configurable} = descriptor || {};\n  if (descriptor && !configurable) {\n    console.error('Failed to set polyfill. ' + name + ' is not configurable.');\n    return;\n  }\n\n  defineLazyObjectProperty(object, name, {\n    get: getValue,\n    enumerable: enumerable !== false,\n    writable: writable !== false,\n  });\n}\n\nfunction polyfillGlobal<T>(name: string, getValue: () => T): void {\n  polyfillObjectProperty(global, name, getValue);\n}\n\nmodule.exports = {polyfillObjectProperty, polyfillGlobal};\n"]},"metadata":{},"sourceType":"script"}