{"ast":null,"code":"'use strict';var _classCallCheck=require(\"@babel/runtime/helpers/classCallCheck\");var _createClass=require(\"@babel/runtime/helpers/createClass\");var _possibleConstructorReturn=require(\"@babel/runtime/helpers/possibleConstructorReturn\");var _getPrototypeOf=require(\"@babel/runtime/helpers/getPrototypeOf\");var _get=require(\"@babel/runtime/helpers/get\");var _inherits=require(\"@babel/runtime/helpers/inherits\");var EventEmitter=require(\"../vendor/emitter/EventEmitter\");var EventSubscriptionVendor=require(\"../vendor/emitter/EventSubscriptionVendor\");function checkNativeEventModule(eventType){if(eventType){if(eventType.lastIndexOf('statusBar',0)===0){throw new Error('`'+eventType+'` event should be registered via the StatusBarIOS module');}if(eventType.lastIndexOf('keyboard',0)===0){throw new Error('`'+eventType+'` event should be registered via the Keyboard module');}if(eventType==='appStateDidChange'||eventType==='memoryWarning'){throw new Error('`'+eventType+'` event should be registered via the AppState module');}}}var RCTDeviceEventEmitter=function(_EventEmitter){_inherits(RCTDeviceEventEmitter,_EventEmitter);function RCTDeviceEventEmitter(){var _this;_classCallCheck(this,RCTDeviceEventEmitter);var sharedSubscriber=new EventSubscriptionVendor();_this=_possibleConstructorReturn(this,_getPrototypeOf(RCTDeviceEventEmitter).call(this,sharedSubscriber));_this.sharedSubscriber=sharedSubscriber;return _this;}_createClass(RCTDeviceEventEmitter,[{key:\"addListener\",value:function addListener(eventType,listener,context){if(__DEV__){checkNativeEventModule(eventType);}return _get(_getPrototypeOf(RCTDeviceEventEmitter.prototype),\"addListener\",this).call(this,eventType,listener,context);}},{key:\"removeAllListeners\",value:function removeAllListeners(eventType){if(__DEV__){checkNativeEventModule(eventType);}_get(_getPrototypeOf(RCTDeviceEventEmitter.prototype),\"removeAllListeners\",this).call(this,eventType);}},{key:\"removeSubscription\",value:function removeSubscription(subscription){if(subscription.emitter!==this){subscription.emitter.removeSubscription(subscription);}else{_get(_getPrototypeOf(RCTDeviceEventEmitter.prototype),\"removeSubscription\",this).call(this,subscription);}}}]);return RCTDeviceEventEmitter;}(EventEmitter);module.exports=new RCTDeviceEventEmitter();","map":{"version":3,"sources":["/Users/ntareguy/Downloads/gwizamobile1/node_modules/react-native/Libraries/EventEmitter/RCTDeviceEventEmitter.js"],"names":["EventEmitter","require","EventSubscriptionVendor","checkNativeEventModule","eventType","lastIndexOf","Error","RCTDeviceEventEmitter","sharedSubscriber","listener","context","__DEV__","subscription","emitter","removeSubscription","module","exports"],"mappings":"AAUA,a,4YAEA,GAAMA,CAAAA,YAAY,CAAGC,OAAO,kCAA5B,CACA,GAAMC,CAAAA,uBAAuB,CAAGD,OAAO,6CAAvC,CAIA,QAASE,CAAAA,sBAAT,CAAgCC,SAAhC,CAAoD,CAClD,GAAIA,SAAJ,CAAe,CACb,GAAIA,SAAS,CAACC,WAAV,CAAsB,WAAtB,CAAmC,CAAnC,IAA0C,CAA9C,CAAiD,CAC/C,KAAM,IAAIC,CAAAA,KAAJ,CACJ,IACEF,SADF,CAEE,0DAHE,CAAN,CAKD,CACD,GAAIA,SAAS,CAACC,WAAV,CAAsB,UAAtB,CAAkC,CAAlC,IAAyC,CAA7C,CAAgD,CAC9C,KAAM,IAAIC,CAAAA,KAAJ,CACJ,IACEF,SADF,CAEE,sDAHE,CAAN,CAKD,CACD,GAAIA,SAAS,GAAK,mBAAd,EAAqCA,SAAS,GAAK,eAAvD,CAAwE,CACtE,KAAM,IAAIE,CAAAA,KAAJ,CACJ,IACEF,SADF,CAEE,sDAHE,CAAN,CAKD,CACF,CACF,C,GAMKG,CAAAA,qB,wEAGJ,gCAAc,uDACZ,GAAMC,CAAAA,gBAAgB,CAAG,GAAIN,CAAAA,uBAAJ,EAAzB,CACA,uFAAMM,gBAAN,GACA,MAAKA,gBAAL,CAAwBA,gBAAxB,CAHY,aAIb,C,kFAGCJ,S,CACAK,Q,CACAC,O,CACqB,CACrB,GAAIC,OAAJ,CAAa,CACXR,sBAAsB,CAACC,SAAD,CAAtB,CACD,CACD,2FAAyBA,SAAzB,CAAoCK,QAApC,CAA8CC,OAA9C,EACD,C,8DAEkBN,S,CAAoB,CACrC,GAAIO,OAAJ,CAAa,CACXR,sBAAsB,CAACC,SAAD,CAAtB,CACD,CACD,2FAAyBA,SAAzB,EACD,C,8DAEkBQ,Y,CAAmC,CACpD,GAAIA,YAAY,CAACC,OAAb,GAAyB,IAA7B,CAAmC,CACjCD,YAAY,CAACC,OAAb,CAAqBC,kBAArB,CAAwCF,YAAxC,EACD,CAFD,IAEO,CACL,2FAAyBA,YAAzB,EACD,CACF,C,mCAjCiCZ,Y,EAoCpCe,MAAM,CAACC,OAAP,CAAiB,GAAIT,CAAAA,qBAAJ,EAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst EventEmitter = require('../vendor/emitter/EventEmitter');\nconst EventSubscriptionVendor = require('../vendor/emitter/EventSubscriptionVendor');\n\nimport type EmitterSubscription from '../vendor/emitter/EmitterSubscription';\n\nfunction checkNativeEventModule(eventType: ?string) {\n  if (eventType) {\n    if (eventType.lastIndexOf('statusBar', 0) === 0) {\n      throw new Error(\n        '`' +\n          eventType +\n          '` event should be registered via the StatusBarIOS module',\n      );\n    }\n    if (eventType.lastIndexOf('keyboard', 0) === 0) {\n      throw new Error(\n        '`' +\n          eventType +\n          '` event should be registered via the Keyboard module',\n      );\n    }\n    if (eventType === 'appStateDidChange' || eventType === 'memoryWarning') {\n      throw new Error(\n        '`' +\n          eventType +\n          '` event should be registered via the AppState module',\n      );\n    }\n  }\n}\n\n/**\n * Deprecated - subclass NativeEventEmitter to create granular event modules instead of\n * adding all event listeners directly to RCTDeviceEventEmitter.\n */\nclass RCTDeviceEventEmitter extends EventEmitter {\n  sharedSubscriber: EventSubscriptionVendor;\n\n  constructor() {\n    const sharedSubscriber = new EventSubscriptionVendor();\n    super(sharedSubscriber);\n    this.sharedSubscriber = sharedSubscriber;\n  }\n\n  addListener(\n    eventType: string,\n    listener: Function,\n    context: ?Object,\n  ): EmitterSubscription {\n    if (__DEV__) {\n      checkNativeEventModule(eventType);\n    }\n    return super.addListener(eventType, listener, context);\n  }\n\n  removeAllListeners(eventType: ?string) {\n    if (__DEV__) {\n      checkNativeEventModule(eventType);\n    }\n    super.removeAllListeners(eventType);\n  }\n\n  removeSubscription(subscription: EmitterSubscription) {\n    if (subscription.emitter !== this) {\n      subscription.emitter.removeSubscription(subscription);\n    } else {\n      super.removeSubscription(subscription);\n    }\n  }\n}\n\nmodule.exports = new RCTDeviceEventEmitter();\n"]},"metadata":{},"sourceType":"script"}