{"ast":null,"code":"var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.reload=reload;exports.addNewVersionListenerExperimental=addNewVersionListenerExperimental;var _fbemitter=require(\"fbemitter\");var _reactNative=require(\"react-native\");var Updates=_interopRequireWildcard(require(\"./Updates\"));function reload(){console.warn('Util.reload is deprecated and will be removed in SDK 31, use Updates.reload instead');return Updates.reload();}var _emitter;function _getEmitter(){if(!_emitter){_emitter=new _fbemitter.EventEmitter();_reactNative.DeviceEventEmitter.addListener('Exponent.nativeUpdatesEvent',_emitNewVersionAvailable);}return _emitter;}function _emitNewVersionAvailable(newVersionEvent){if(typeof newVersionEvent==='string'){newVersionEvent=JSON.parse(newVersionEvent);}if(newVersionEvent.type==='downloadFinished'){if(newVersionEvent.manifestString&&typeof newVersionEvent.manifestString==='string'){newVersionEvent.manifest=JSON.parse(newVersionEvent.manifestString);delete newVersionEvent.manifestString;}delete newVersionEvent.type;if(!_emitter){throw new Error(\"EventEmitter must be initialized to use from its listener\");}_emitter.emit('newVersionAvailable',newVersionEvent);}}function addNewVersionListenerExperimental(listener){console.warn('Util.addNewVersionListenerExperimental is deprecated and will be removed in SDK 31, use Updates.addListener instead');var emitter=_getEmitter();return emitter.addListener('newVersionAvailable',listener);}","map":{"version":3,"sources":["../src/Util.ts"],"names":[],"mappings":"gPAAA,oCACA,yCAEA,0DAEM,QAAU,CAAA,MAAV,EAAgB,CACpB,OAAO,CAAC,IAAR,CAAa,qFAAb,EACA,MAAO,CAAA,OAAO,CAAC,MAAR,EAAP,CACD,CAED,GAAI,CAAA,QAAJ,CAEA,QAAS,CAAA,WAAT,EAAoB,CAClB,GAAI,CAAC,QAAL,CAAe,CACb,QAAQ,CAAG,GAAI,wBAAJ,EAAX,CACA,gCAAmB,WAAnB,CAA+B,6BAA/B,CAA8D,wBAA9D,EACD,CACD,MAAO,CAAA,QAAP,CACD,CAED,QAAS,CAAA,wBAAT,CAAkC,eAAlC,CAAiD,CAC/C,GAAI,MAAO,CAAA,eAAP,GAA2B,QAA/B,CAAyC,CACvC,eAAe,CAAG,IAAI,CAAC,KAAL,CAAW,eAAX,CAAlB,CACD,CAGD,GAAI,eAAe,CAAC,IAAhB,GAAyB,kBAA7B,CAAiD,CAC/C,GAAI,eAAe,CAAC,cAAhB,EAAkC,MAAO,CAAA,eAAe,CAAC,cAAvB,GAA0C,QAAhF,CAA0F,CACxF,eAAe,CAAC,QAAhB,CAA2B,IAAI,CAAC,KAAL,CAAW,eAAe,CAAC,cAA3B,CAA3B,CACA,MAAO,CAAA,eAAe,CAAC,cAAvB,CACD,CACD,MAAO,CAAA,eAAe,CAAC,IAAvB,CAEA,GAAI,CAAC,QAAL,CAAe,CACb,KAAM,IAAI,CAAA,KAAJ,6DAAN,CACD,CACD,QAAQ,CAAC,IAAT,CAAc,qBAAd,CAAqC,eAArC,EACD,CACF,CAEK,QAAU,CAAA,iCAAV,CAA4C,QAA5C,CAA8D,CAClE,OAAO,CAAC,IAAR,CACE,qHADF,EAGA,GAAI,CAAA,OAAO,CAAG,WAAW,EAAzB,CACA,MAAO,CAAA,OAAO,CAAC,WAAR,CAAoB,qBAApB,CAA2C,QAA3C,CAAP,CACD","sourcesContent":["import { EventEmitter, EventSubscription } from 'fbemitter';\nimport { DeviceEventEmitter } from 'react-native';\n\nimport * as Updates from './Updates';\n\nexport function reload(): void {\n  console.warn('Util.reload is deprecated and will be removed in SDK 31, use Updates.reload instead');\n  return Updates.reload();\n}\n\nlet _emitter: EventEmitter | null;\n\nfunction _getEmitter(): EventEmitter {\n  if (!_emitter) {\n    _emitter = new EventEmitter();\n    DeviceEventEmitter.addListener('Exponent.nativeUpdatesEvent', _emitNewVersionAvailable);\n  }\n  return _emitter;\n}\n\nfunction _emitNewVersionAvailable(newVersionEvent): void {\n  if (typeof newVersionEvent === 'string') {\n    newVersionEvent = JSON.parse(newVersionEvent);\n  }\n\n  // events with type === 'downloadFinished' match the events that were previously emitted\n  if (newVersionEvent.type === 'downloadFinished') {\n    if (newVersionEvent.manifestString && typeof newVersionEvent.manifestString === 'string') {\n      newVersionEvent.manifest = JSON.parse(newVersionEvent.manifestString);\n      delete newVersionEvent.manifestString;\n    }\n    delete newVersionEvent.type;\n\n    if (!_emitter) {\n      throw new Error(`EventEmitter must be initialized to use from its listener`);\n    }\n    _emitter.emit('newVersionAvailable', newVersionEvent);\n  }\n}\n\nexport function addNewVersionListenerExperimental(listener: Function): EventSubscription {\n  console.warn(\n    'Util.addNewVersionListenerExperimental is deprecated and will be removed in SDK 31, use Updates.addListener instead'\n  );\n  let emitter = _getEmitter();\n  return emitter.addListener('newVersionAvailable', listener);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}