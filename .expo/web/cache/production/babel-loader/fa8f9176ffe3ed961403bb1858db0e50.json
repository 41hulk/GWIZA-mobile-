{"ast":null,"code":"var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=registerRootComponent;var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf2=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _expoFont=require(\"expo-font\");var React=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native\");var _Notifications=_interopRequireDefault(require(\"../Notifications\"));var _RootErrorBoundary=_interopRequireDefault(require(\"./RootErrorBoundary\"));function wrapWithExpoRoot(AppRootComponent){return function(_React$Component){(0,_inherits2.default)(ExpoRootComponent,_React$Component);function ExpoRootComponent(){(0,_classCallCheck2.default)(this,ExpoRootComponent);return(0,_possibleConstructorReturn2.default)(this,(0,_getPrototypeOf2.default)(ExpoRootComponent).apply(this,arguments));}(0,_createClass2.default)(ExpoRootComponent,[{key:\"componentWillMount\",value:function componentWillMount(){_reactNative.StyleSheet.setStyleAttributePreprocessor('fontFamily',_expoFont.Font.processFontFamily);if(this.props.exp.notification){_Notifications.default._setInitialNotification(this.props.exp.notification);}}},{key:\"render\",value:function render(){if(__DEV__){return React.createElement(_RootErrorBoundary.default,null,React.createElement(AppRootComponent,this.props));}else{return React.createElement(AppRootComponent,this.props);}}}]);return ExpoRootComponent;}(React.Component);}function registerRootComponent(component){_reactNative.AppRegistry.registerComponent('main',function(){return wrapWithExpoRoot(component);});}","map":{"version":3,"sources":["../../src/launch/registerRootComponent.tsx"],"names":[],"mappings":"iuBAAA,mCACA,oDACA,yCAEA,uEACA,8EAaA,QAAS,CAAA,gBAAT,CACE,gBADF,CAC2C,CAEzC,oZACoB,CAChB,wBAAW,6BAAX,CAAyC,YAAzC,CAAuD,eAAK,iBAA5D,EAEA,GAAI,KAAK,KAAL,CAAW,GAAX,CAAe,YAAnB,CAAiC,CAC/B,uBAAc,uBAAd,CAAsC,KAAK,KAAL,CAAW,GAAX,CAAe,YAArD,EACD,CACF,CAPH,uCASQ,CACJ,GAAI,OAAJ,CAAa,CACX,MACE,qBAAC,0BAAD,MACE,oBAAC,gBAAD,CAAsB,KAAK,KAA3B,CADF,CADF,CAKD,CAND,IAMO,CACL,MAAO,qBAAC,gBAAD,CAAsB,KAAK,KAA3B,CAAP,CACD,CACF,CAnBH,+BAAuC,KAAK,CAAC,SAA7C,EAqBD,CAEa,QAAU,CAAA,qBAAV,CACZ,SADY,CACsB,CAElC,yBAAY,iBAAZ,CAA8B,MAA9B,CAAsC,iBAAM,CAAA,gBAAgB,CAAC,SAAD,CAAtB,EAAtC,EACD","sourcesContent":["import { Font } from 'expo-font';\nimport * as React from 'react';\nimport { AppRegistry, StyleSheet } from 'react-native';\n\nimport Notifications from '../Notifications';\nimport RootErrorBoundary from './RootErrorBoundary';\n\ntype InitialProps = {\n  exp: {\n    notification?: any;\n    errorRecovery?: any;\n    [key: string]: any;\n  };\n  shell?: boolean;\n  shellManifestUrl?: string;\n  [key: string]: any;\n};\n\nfunction wrapWithExpoRoot<P extends InitialProps>(\n  AppRootComponent: React.ComponentClass<P>\n): React.ComponentClass<P> {\n  return class ExpoRootComponent extends React.Component<P> {\n    componentWillMount() {\n      StyleSheet.setStyleAttributePreprocessor('fontFamily', Font.processFontFamily);\n\n      if (this.props.exp.notification) {\n        Notifications._setInitialNotification(this.props.exp.notification);\n      }\n    }\n\n    render() {\n      if (__DEV__) {\n        return (\n          <RootErrorBoundary>\n            <AppRootComponent {...this.props} />\n          </RootErrorBoundary>\n        );\n      } else {\n        return <AppRootComponent {...this.props} />;\n      }\n    }\n  };\n}\n\nexport default function registerRootComponent<P extends InitialProps>(\n  component: React.ComponentClass<P>\n): void {\n  AppRegistry.registerComponent('main', () => wrapWithExpoRoot(component));\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}