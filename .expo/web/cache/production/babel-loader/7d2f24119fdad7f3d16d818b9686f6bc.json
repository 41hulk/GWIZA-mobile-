{"ast":null,"code":"var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf2=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _objectSpread2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));var _propTypes=_interopRequireDefault(require(\"prop-types\"));var _react=_interopRequireDefault(require(\"react\"));var _reactNative=require(\"react-native\");var _decorateMapComponent=_interopRequireWildcard(require(\"./decorateMapComponent\"));var viewPropTypes=_reactNative.ViewPropTypes||_reactNative.View.propTypes;var propTypes=(0,_objectSpread2.default)({},viewPropTypes,{coordinates:_propTypes.default.arrayOf(_propTypes.default.shape({latitude:_propTypes.default.number.isRequired,longitude:_propTypes.default.number.isRequired})),onPress:_propTypes.default.func,tappable:_propTypes.default.bool,fillColor:_reactNative.ColorPropType,strokeWidth:_propTypes.default.number,strokeColor:_reactNative.ColorPropType,strokeColors:_propTypes.default.arrayOf(_reactNative.ColorPropType),zIndex:_propTypes.default.number,lineCap:_propTypes.default.oneOf(['butt','round','square']),lineJoin:_propTypes.default.oneOf(['miter','round','bevel']),miterLimit:_propTypes.default.number,geodesic:_propTypes.default.bool,lineDashPhase:_propTypes.default.number,lineDashPattern:_propTypes.default.arrayOf(_propTypes.default.number)});var defaultProps={strokeColor:'#000',strokeWidth:1,lineJoin:'round',lineCap:'round'};var MapPolyline=function(_React$Component){(0,_inherits2.default)(MapPolyline,_React$Component);function MapPolyline(){(0,_classCallCheck2.default)(this,MapPolyline);return(0,_possibleConstructorReturn2.default)(this,(0,_getPrototypeOf2.default)(MapPolyline).apply(this,arguments));}(0,_createClass2.default)(MapPolyline,[{key:\"setNativeProps\",value:function setNativeProps(props){this.polyline.setNativeProps(props);}},{key:\"render\",value:function render(){var _this=this;var AIRMapPolyline=this.getAirComponent();return _react.default.createElement(AIRMapPolyline,(0,_extends2.default)({},this.props,{ref:function ref(_ref){_this.polyline=_ref;}}));}}]);return MapPolyline;}(_react.default.Component);MapPolyline.propTypes=propTypes;MapPolyline.defaultProps=defaultProps;var _default=(0,_decorateMapComponent.default)(MapPolyline,{componentType:'Polyline',providers:{google:{ios:_decorateMapComponent.SUPPORTED,android:_decorateMapComponent.USES_DEFAULT_IMPLEMENTATION}}});exports.default=_default;","map":{"version":3,"sources":["/Users/ntareguy/Downloads/gwizamobile1/node_modules/react-native-maps/lib/components/MapPolyline.js"],"names":["viewPropTypes","ViewPropTypes","View","propTypes","coordinates","PropTypes","arrayOf","shape","latitude","number","isRequired","longitude","onPress","func","tappable","bool","fillColor","ColorPropType","strokeWidth","strokeColor","strokeColors","zIndex","lineCap","oneOf","lineJoin","miterLimit","geodesic","lineDashPhase","lineDashPattern","defaultProps","MapPolyline","props","polyline","setNativeProps","AIRMapPolyline","getAirComponent","ref","React","Component","componentType","providers","google","ios","SUPPORTED","android","USES_DEFAULT_IMPLEMENTATION"],"mappings":"43BAAA,6DACA,oDACA,yCAKA,qFAMA,GAAMA,CAAAA,aAAa,CAAGC,4BAAiBC,kBAAKC,SAA5C,CAEA,GAAMA,CAAAA,SAAS,+BACVH,aADU,EAMbI,WAAW,CAAEC,mBAAUC,OAAV,CAAkBD,mBAAUE,KAAV,CAAgB,CAI7CC,QAAQ,CAAEH,mBAAUI,MAAV,CAAiBC,UAJkB,CAK7CC,SAAS,CAAEN,mBAAUI,MAAV,CAAiBC,UALiB,CAAhB,CAAlB,CANA,CAiBbE,OAAO,CAAEP,mBAAUQ,IAjBN,CAsBbC,QAAQ,CAAET,mBAAUU,IAtBP,CA2BbC,SAAS,CAAEC,0BA3BE,CAgCbC,WAAW,CAAEb,mBAAUI,MAhCV,CAqCbU,WAAW,CAAEF,0BArCA,CA0CbG,YAAY,CAAEf,mBAAUC,OAAV,CAAkBW,0BAAlB,CA1CD,CAmDbI,MAAM,CAAEhB,mBAAUI,MAnDL,CA2Dba,OAAO,CAAEjB,mBAAUkB,KAAV,CAAgB,CACvB,MADuB,CAEvB,OAFuB,CAGvB,QAHuB,CAAhB,CA3DI,CAuEbC,QAAQ,CAAEnB,mBAAUkB,KAAV,CAAgB,CACxB,OADwB,CAExB,OAFwB,CAGxB,OAHwB,CAAhB,CAvEG,CAuFbE,UAAU,CAAEpB,mBAAUI,MAvFT,CAiGbiB,QAAQ,CAAErB,mBAAUU,IAjGP,CA8GbY,aAAa,CAAEtB,mBAAUI,MA9GZ,CA4HbmB,eAAe,CAAEvB,mBAAUC,OAAV,CAAkBD,mBAAUI,MAA5B,CA5HJ,EAAf,CA+HA,GAAMoB,CAAAA,YAAY,CAAG,CACnBV,WAAW,CAAE,MADM,CAEnBD,WAAW,CAAE,CAFM,CAGnBM,QAAQ,CAAE,OAHS,CAInBF,OAAO,CAAE,OAJU,CAArB,C,GAOMQ,CAAAA,W,uWACWC,K,CAAO,CACpB,KAAKC,QAAL,CAAcC,cAAd,CAA6BF,KAA7B,EACD,C,uCAEQ,gBACP,GAAMG,CAAAA,cAAc,CAAG,KAAKC,eAAL,EAAvB,CACA,MACE,8BAAC,cAAD,0BAAoB,KAAKJ,KAAzB,EAAgC,GAAG,CAAE,aAAAK,IAAG,CAAI,CAAE,KAAI,CAACJ,QAAL,CAAgBI,IAAhB,CAAsB,CAApE,GADF,CAGD,C,yBAVuBC,eAAMC,S,EAahCR,WAAW,CAAC3B,SAAZ,CAAwBA,SAAxB,CACA2B,WAAW,CAACD,YAAZ,CAA2BA,YAA3B,C,aAEe,kCAAqBC,WAArB,CAAkC,CAC/CS,aAAa,CAAE,UADgC,CAE/CC,SAAS,CAAE,CACTC,MAAM,CAAE,CACNC,GAAG,CAAEC,+BADC,CAENC,OAAO,CAAEC,iDAFH,CADC,CAFoC,CAAlC,C","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport {\n  ColorPropType,\n  ViewPropTypes,\n  View,\n} from 'react-native';\nimport decorateMapComponent, {\n  USES_DEFAULT_IMPLEMENTATION,\n  SUPPORTED,\n} from './decorateMapComponent';\n\n// if ViewPropTypes is not defined fall back to View.propType (to support RN < 0.44)\nconst viewPropTypes = ViewPropTypes || View.propTypes;\n\nconst propTypes = {\n  ...viewPropTypes,\n\n  /**\n   * An array of coordinates to describe the polygon\n   */\n  coordinates: PropTypes.arrayOf(PropTypes.shape({\n    /**\n     * Latitude/Longitude coordinates\n     */\n    latitude: PropTypes.number.isRequired,\n    longitude: PropTypes.number.isRequired,\n  })),\n\n  /**\n   * Callback that is called when the user presses on the polyline\n   */\n  onPress: PropTypes.func,\n\n  /* Boolean to allow a polyline to be tappable and use the\n  * onPress function\n  */\n  tappable: PropTypes.bool,\n\n  /**\n   * The fill color to use for the path.\n   */\n  fillColor: ColorPropType,\n\n  /**\n   * The stroke width to use for the path.\n   */\n  strokeWidth: PropTypes.number,\n\n  /**\n   * The stroke color to use for the path.\n   */\n  strokeColor: ColorPropType,\n\n  /**\n   * The stroke colors to use for the path.\n   */\n  strokeColors: PropTypes.arrayOf(ColorPropType),\n\n  /**\n   * The order in which this tile overlay is drawn with respect to other overlays. An overlay\n   * with a larger z-index is drawn over overlays with smaller z-indices. The order of overlays\n   * with the same z-index is arbitrary. The default zIndex is 0.\n   *\n   * @platform android\n   */\n  zIndex: PropTypes.number,\n\n  /**\n   * The line cap style to apply to the open ends of the path.\n   * The default style is `round`.\n   *\n   * @platform ios\n   */\n  lineCap: PropTypes.oneOf([\n    'butt',\n    'round',\n    'square',\n  ]),\n\n  /**\n   * The line join style to apply to corners of the path.\n   * The default style is `round`.\n   *\n   * @platform ios\n   */\n  lineJoin: PropTypes.oneOf([\n    'miter',\n    'round',\n    'bevel',\n  ]),\n\n  /**\n   * The limiting value that helps avoid spikes at junctions between connected line segments.\n   * The miter limit helps you avoid spikes in paths that use the `miter` `lineJoin` style. If\n   * the ratio of the miter length—that is, the diagonal length of the miter join—to the line\n   * thickness exceeds the miter limit, the joint is converted to a bevel join. The default\n   * miter limit is 10, which results in the conversion of miters whose angle at the joint\n   * is less than 11 degrees.\n   *\n   * @platform ios\n   */\n  miterLimit: PropTypes.number,\n\n  /**\n   * Boolean to indicate whether to draw each segment of the line as a geodesic as opposed to\n   * straight lines on the Mercator projection. A geodesic is the shortest path between two\n   * points on the Earth's surface. The geodesic curve is constructed assuming the Earth is\n   * a sphere.\n   *\n   * @platform android\n   */\n  geodesic: PropTypes.bool,\n\n  /**\n   * The offset (in points) at which to start drawing the dash pattern.\n   *\n   * Use this property to start drawing a dashed line partway through a segment or gap. For\n   * example, a phase value of 6 for the patter 5-2-3-2 would cause drawing to begin in the\n   * middle of the first gap.\n   *\n   * The default value of this property is 0.\n   *\n   * @platform ios\n   */\n  lineDashPhase: PropTypes.number,\n\n  /**\n   * An array of numbers specifying the dash pattern to use for the path.\n   *\n   * The array contains one or more numbers that indicate the lengths (measured in points) of the\n   * line segments and gaps in the pattern. The values in the array alternate, starting with the\n   * first line segment length, followed by the first gap length, followed by the second line\n   * segment length, and so on.\n   *\n   * This property is set to `null` by default, which indicates no line dash pattern.\n   *\n   * @platform ios\n   */\n  lineDashPattern: PropTypes.arrayOf(PropTypes.number),\n};\n\nconst defaultProps = {\n  strokeColor: '#000',\n  strokeWidth: 1,\n  lineJoin: 'round',\n  lineCap: 'round',\n};\n\nclass MapPolyline extends React.Component {\n  setNativeProps(props) {\n    this.polyline.setNativeProps(props);\n  }\n\n  render() {\n    const AIRMapPolyline = this.getAirComponent();\n    return (\n      <AIRMapPolyline {...this.props} ref={ref => { this.polyline = ref; }} />\n    );\n  }\n}\n\nMapPolyline.propTypes = propTypes;\nMapPolyline.defaultProps = defaultProps;\n\nexport default decorateMapComponent(MapPolyline, {\n  componentType: 'Polyline',\n  providers: {\n    google: {\n      ios: SUPPORTED,\n      android: USES_DEFAULT_IMPLEMENTATION,\n    },\n  },\n});\n"]},"metadata":{},"sourceType":"script"}