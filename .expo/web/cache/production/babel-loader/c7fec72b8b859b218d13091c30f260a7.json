{"ast":null,"code":"'use strict';var validateFormat=function validateFormat(){};if(process.env!=='production'){validateFormat=function validateFormat(format){if(format===undefined){throw new Error('invariant requires an error message argument');}};}function invariant(condition,format,a,b,c,d,e,f){validateFormat(format);if(!condition){var error;if(format===undefined){error=new Error('Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.');}else{var args=[a,b,c,d,e,f];var argIndex=0;error=new Error(format.replace(/%s/g,function(){return args[argIndex++];}));error.name='Invariant Violation';}error.framesToPop=1;throw error;}}module.exports=invariant;","map":{"version":3,"sources":["/Users/ntareguy/Downloads/gwizamobile1/node_modules/@react-navigation/core/dist/utils/invariant.js"],"names":["validateFormat","process","env","format","undefined","Error","invariant","condition","a","b","c","d","e","f","error","args","argIndex","replace","name","framesToPop","module","exports"],"mappings":"AAAA,aAeA,GAAIA,CAAAA,cAAc,CAAG,yBAAY,CAAE,CAAnC,CAEA,GAAIC,OAAO,CAACC,GAAR,GAAgB,YAApB,CAAkC,CAChCF,cAAc,CAAG,wBAAUG,MAAV,CAAkB,CACjC,GAAIA,MAAM,GAAKC,SAAf,CAA0B,CACxB,KAAM,IAAIC,CAAAA,KAAJ,CAAU,8CAAV,CAAN,CACD,CACF,CAJD,CAKD,CAED,QAASC,CAAAA,SAAT,CAAmBC,SAAnB,CAA8BJ,MAA9B,CAAsCK,CAAtC,CAAyCC,CAAzC,CAA4CC,CAA5C,CAA+CC,CAA/C,CAAkDC,CAAlD,CAAqDC,CAArD,CAAwD,CACtDb,cAAc,CAACG,MAAD,CAAd,CAEA,GAAI,CAACI,SAAL,CAAgB,CACd,GAAIO,CAAAA,KAAJ,CACA,GAAIX,MAAM,GAAKC,SAAf,CAA0B,CACxBU,KAAK,CAAG,GAAIT,CAAAA,KAAJ,CAAU,+HAAV,CAAR,CACD,CAFD,IAEO,CACL,GAAIU,CAAAA,IAAI,CAAG,CAACP,CAAD,CAAIC,CAAJ,CAAOC,CAAP,CAAUC,CAAV,CAAaC,CAAb,CAAgBC,CAAhB,CAAX,CACA,GAAIG,CAAAA,QAAQ,CAAG,CAAf,CACAF,KAAK,CAAG,GAAIT,CAAAA,KAAJ,CAAUF,MAAM,CAACc,OAAP,CAAe,KAAf,CAAsB,UAAY,CAClD,MAAOF,CAAAA,IAAI,CAACC,QAAQ,EAAT,CAAX,CACD,CAFiB,CAAV,CAAR,CAGAF,KAAK,CAACI,IAAN,CAAa,qBAAb,CACD,CAEDJ,KAAK,CAACK,WAAN,CAAoB,CAApB,CACA,KAAML,CAAAA,KAAN,CACD,CACF,CAEDM,MAAM,CAACC,OAAP,CAAiBf,SAAjB","sourcesContent":["'use strict';\n\n/* eslint-disable import/no-commonjs */\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar validateFormat = function () {};\n\nif (process.env !== 'production') {\n  validateFormat = function (format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction invariant(condition, format, a, b, c, d, e, f) {\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\nmodule.exports = invariant;"]},"metadata":{},"sourceType":"script"}