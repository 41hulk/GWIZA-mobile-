{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf2=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _utils=require(\"../utils\");var _AnimatedNode2=_interopRequireDefault(require(\"./AnimatedNode\"));var NEWTON_ITERATIONS=4;var NEWTON_MIN_SLOPE=0.001;var SUBDIVISION_PRECISION=0.0000001;var SUBDIVISION_MAX_ITERATIONS=10;var kSplineTableSize=11;var kSampleStepSize=1.0/(kSplineTableSize-1.0);var float32ArraySupported=typeof Float32Array==='function';function A(aA1,aA2){return 1.0-3.0*aA2+3.0*aA1;}function B(aA1,aA2){return 3.0*aA2-6.0*aA1;}function C(aA1){return 3.0*aA1;}function calcBezier(aT,aA1,aA2){return((A(aA1,aA2)*aT+B(aA1,aA2))*aT+C(aA1))*aT;}function getSlope(aT,aA1,aA2){return 3.0*A(aA1,aA2)*aT*aT+2.0*B(aA1,aA2)*aT+C(aA1);}function binarySubdivide(aX,aA,aB,mX1,mX2){var currentX=0;var currentT=0;var i=0;do{currentT=aA+(aB-aA)/2.0;currentX=calcBezier(currentT,mX1,mX2)-aX;if(currentX>0.0){aB=currentT;}else{aA=currentT;}}while(Math.abs(currentX)>SUBDIVISION_PRECISION&&++i<SUBDIVISION_MAX_ITERATIONS);return currentT;}function newtonRaphsonIterate(aX,aGuessT,mX1,mX2){for(var i=0;i<NEWTON_ITERATIONS;++i){var currentSlope=getSlope(aGuessT,mX1,mX2);if(currentSlope===0.0){return aGuessT;}var currentX=calcBezier(aGuessT,mX1,mX2)-aX;aGuessT-=currentX/currentSlope;}return aGuessT;}function bezier(mX1,mY1,mX2,mY2){if(!(mX1>=0&&mX1<=1&&mX2>=0&&mX2<=1)){throw new Error('bezier x values must be in [0, 1] range');}var sampleValues=float32ArraySupported?new Float32Array(kSplineTableSize):new Array(kSplineTableSize);if(mX1!==mY1||mX2!==mY2){for(var i=0;i<kSplineTableSize;++i){sampleValues[i]=calcBezier(i*kSampleStepSize,mX1,mX2);}}function getTForX(aX){var intervalStart=0.0;var currentSample=1;var lastSample=kSplineTableSize-1;for(;currentSample!==lastSample&&sampleValues[currentSample]<=aX;++currentSample){intervalStart+=kSampleStepSize;}--currentSample;var dist=(aX-sampleValues[currentSample])/(sampleValues[currentSample+1]-sampleValues[currentSample]);var guessForT=intervalStart+dist*kSampleStepSize;var initialSlope=getSlope(guessForT,mX1,mX2);if(initialSlope>=NEWTON_MIN_SLOPE){return newtonRaphsonIterate(aX,guessForT,mX1,mX2);}else if(initialSlope===0.0){return guessForT;}else{return binarySubdivide(aX,intervalStart,intervalStart+kSampleStepSize,mX1,mX2);}}return function BezierEasing(x){if(mX1===mY1&&mX2===mY2){return x;}if(x===0){return 0;}if(x===1){return 1;}return calcBezier(getTForX(x),mY1,mY2);};}var AnimatedBezier=function(_AnimatedNode){(0,_inherits2.default)(AnimatedBezier,_AnimatedNode);function AnimatedBezier(value,mX1,mY1,mX2,mY2){var _this;(0,_classCallCheck2.default)(this,AnimatedBezier);_this=(0,_possibleConstructorReturn2.default)(this,(0,_getPrototypeOf2.default)(AnimatedBezier).call(this,{type:'bezier',mX1:mX1,mY1:mY1,mX2:mX2,mY2:mY2,input:value.__nodeID},[value]));_this._value=value;_this._bezier=bezier(mX1,mY1,mX2,mY2);return _this;}(0,_createClass2.default)(AnimatedBezier,[{key:\"__onEvaluate\",value:function __onEvaluate(){return this._bezier((0,_utils.val)(this._value));}}]);return AnimatedBezier;}(_AnimatedNode2.default);exports.default=AnimatedBezier;","map":{"version":3,"sources":["/Users/ntareguy/Downloads/gwizamobile1/node_modules/react-native-reanimated/src/core/AnimatedBezier.js"],"names":["NEWTON_ITERATIONS","NEWTON_MIN_SLOPE","SUBDIVISION_PRECISION","SUBDIVISION_MAX_ITERATIONS","kSplineTableSize","kSampleStepSize","float32ArraySupported","Float32Array","A","aA1","aA2","B","C","calcBezier","aT","getSlope","binarySubdivide","aX","aA","aB","mX1","mX2","currentX","currentT","i","Math","abs","newtonRaphsonIterate","aGuessT","currentSlope","bezier","mY1","mY2","Error","sampleValues","Array","getTForX","intervalStart","currentSample","lastSample","dist","guessForT","initialSlope","BezierEasing","x","AnimatedBezier","value","type","input","__nodeID","_value","_bezier","AnimatedNode"],"mappings":"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","sourcesContent":["import { val } from '../utils';\nimport AnimatedNode from './AnimatedNode';\n\n// These values are established by empiricism with tests (tradeoff: performance VS precision)\nvar NEWTON_ITERATIONS = 4;\nvar NEWTON_MIN_SLOPE = 0.001;\nvar SUBDIVISION_PRECISION = 0.0000001;\nvar SUBDIVISION_MAX_ITERATIONS = 10;\n\nvar kSplineTableSize = 11;\nvar kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n\nvar float32ArraySupported = typeof Float32Array === 'function';\n\nfunction A(aA1, aA2) {\n  return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n}\nfunction B(aA1, aA2) {\n  return 3.0 * aA2 - 6.0 * aA1;\n}\nfunction C(aA1) {\n  return 3.0 * aA1;\n}\n\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nfunction calcBezier(aT, aA1, aA2) {\n  return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n}\n\n// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\nfunction getSlope(aT, aA1, aA2) {\n  return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n}\n\nfunction binarySubdivide(aX, aA, aB, mX1, mX2) {\n  var currentX = 0;\n  var currentT = 0;\n  var i = 0;\n  do {\n    currentT = aA + (aB - aA) / 2.0;\n    currentX = calcBezier(currentT, mX1, mX2) - aX;\n    if (currentX > 0.0) {\n      aB = currentT;\n    } else {\n      aA = currentT;\n    }\n  } while (\n    Math.abs(currentX) > SUBDIVISION_PRECISION &&\n    ++i < SUBDIVISION_MAX_ITERATIONS\n  );\n  return currentT;\n}\n\nfunction newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\n  for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n    var currentSlope = getSlope(aGuessT, mX1, mX2);\n    if (currentSlope === 0.0) {\n      return aGuessT;\n    }\n    var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n    aGuessT -= currentX / currentSlope;\n  }\n  return aGuessT;\n}\n\nfunction bezier(mX1, mY1, mX2, mY2) {\n  if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {\n    throw new Error('bezier x values must be in [0, 1] range');\n  }\n\n  // Precompute samples table\n  var sampleValues = float32ArraySupported\n    ? new Float32Array(kSplineTableSize)\n    : new Array(kSplineTableSize);\n  if (mX1 !== mY1 || mX2 !== mY2) {\n    for (var i = 0; i < kSplineTableSize; ++i) {\n      sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n    }\n  }\n\n  function getTForX(aX) {\n    var intervalStart = 0.0;\n    var currentSample = 1;\n    var lastSample = kSplineTableSize - 1;\n\n    for (\n      ;\n      currentSample !== lastSample && sampleValues[currentSample] <= aX;\n      ++currentSample\n    ) {\n      intervalStart += kSampleStepSize;\n    }\n    --currentSample;\n\n    // Interpolate to provide an initial guess for t\n    var dist =\n      (aX - sampleValues[currentSample]) /\n      (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n    var guessForT = intervalStart + dist * kSampleStepSize;\n\n    var initialSlope = getSlope(guessForT, mX1, mX2);\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n    } else if (initialSlope === 0.0) {\n      return guessForT;\n    } else {\n      return binarySubdivide(\n        aX,\n        intervalStart,\n        intervalStart + kSampleStepSize,\n        mX1,\n        mX2\n      );\n    }\n  }\n\n  return function BezierEasing(x) {\n    if (mX1 === mY1 && mX2 === mY2) {\n      return x; // linear\n    }\n    // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n    if (x === 0) {\n      return 0;\n    }\n    if (x === 1) {\n      return 1;\n    }\n    return calcBezier(getTForX(x), mY1, mY2);\n  };\n}\n\nexport default class AnimatedBezier extends AnimatedNode {\n  _value;\n  _bezier;\n\n  constructor(value, mX1, mY1, mX2, mY2) {\n    super({ type: 'bezier', mX1, mY1, mX2, mY2, input: value.__nodeID }, [\n      value,\n    ]);\n    this._value = value;\n    this._bezier = bezier(mX1, mY1, mX2, mY2);\n  }\n\n  __onEvaluate() {\n    return this._bezier(val(this._value));\n  }\n}\n"]},"metadata":{},"sourceType":"script"}