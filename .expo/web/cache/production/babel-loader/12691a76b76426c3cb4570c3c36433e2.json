{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.processFontFamily=processFontFamily;exports.isLoaded=isLoaded;exports.isLoading=isLoading;exports.loadAsync=loadAsync;var _regenerator=_interopRequireDefault(require(\"@babel/runtime/regenerator\"));var _invariant=_interopRequireDefault(require(\"invariant\"));var _expoCore=require(\"expo-core\");var ExpoFontLoader=_expoCore.NativeModulesProxy.ExpoFontLoader;var _requireAsset=requireAsset(),Asset=_requireAsset.Asset;var _requireConstants=requireConstants(),Constants=_requireConstants.Constants;function requireAsset(){try{return require('expo-asset');}catch(error){throw new Error('expo-font needs expo-asset to be installed');}}function requireConstants(){try{return require('expo-constants');}catch(error){throw new Error('expo-font needs expo-constants to be installed');}}var loaded={};var loadPromises={};function processFontFamily(name){if(!name||Constants.systemFonts.includes(name)||name==='System'){return name;}if(name.includes(Constants.sessionId)){return name;}if(!isLoaded(name)){if(__DEV__){if(isLoading(name)){console.error(\"You started loading '\"+name+\"', but used it before it finished loading\\n\\n\"+\"- You need to wait for Font.loadAsync to complete before using the font.\\n\\n\"+\"- We recommend loading all fonts before rendering the app, and rendering only \"+\"Expo.AppLoading while waiting for loading to complete.\");}else{console.error(\"fontFamily '\"+name+\"' is not a system font and has not been loaded through \"+\"Font.loadAsync.\\n\\n\"+\"- If you intended to use a system font, make sure you typed the name \"+\"correctly and that it is supported by your device operating system.\\n\\n\"+\"- If this is a custom font, be sure to load it with Font.loadAsync.\");}}return'System';}return\"ExpoFont-\"+_getNativeFontName(name);}function isLoaded(name){return loaded.hasOwnProperty(name);}function isLoading(name){return loadPromises.hasOwnProperty(name);}function loadAsync(nameOrMap,uriOrModuleOrAsset){var fontMap,names,name,asset;return _regenerator.default.async(function loadAsync$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!Array.isArray(nameOrMap)){_context2.next=7;break;}console.warn(\"Passing in an array to Font.loadAsync like Font.loadAsync([fontMap1, fontMap2, fontMap3]) is deprecated and will be removed in SDK 25. Instead, pass in a single font map. The object spread syntax may help with this: Font.loadAsync({ ...fontMap1, ...fontMap2, ...fontMap3 })\");_context2.next=4;return _regenerator.default.awrap(Promise.all(nameOrMap.map(loadAsync)));case 4:return _context2.abrupt(\"return\");case 7:if(!(typeof nameOrMap==='object')){_context2.next=13;break;}fontMap=nameOrMap;names=Object.keys(fontMap);_context2.next=12;return _regenerator.default.awrap(Promise.all(names.map(function(name){return loadAsync(name,fontMap[name]);})));case 12:return _context2.abrupt(\"return\");case 13:name=nameOrMap;if(!loaded[name]){_context2.next=16;break;}return _context2.abrupt(\"return\");case 16:if(!loadPromises[name]){_context2.next=18;break;}return _context2.abrupt(\"return\",loadPromises[name]);case 18:(0,_invariant.default)(uriOrModuleOrAsset,\"No source from which to load font \\\"\"+name+\"\\\"\");asset=_getAssetForSource(uriOrModuleOrAsset);loadPromises[name]=function _callee(){return _regenerator.default.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return _regenerator.default.awrap(_loadSingleFontAsync(name,asset));case 3:loaded[name]=true;case 4:_context.prev=4;delete loadPromises[name];return _context.finish(4);case 7:case\"end\":return _context.stop();}}},null,this,[[0,,4,7]]);}();_context2.next=23;return _regenerator.default.awrap(loadPromises[name]);case 23:case\"end\":return _context2.stop();}}},null,this);}function _getAssetForSource(uriOrModuleOrAsset){if(typeof uriOrModuleOrAsset==='string'){throw new Error('Loading fonts from remote URIs is temporarily not supported. Please download the font file and load it using require. See: https://docs.expo.io/versions/latest/guides/using-custom-fonts.html#downloading-the-font');}if(typeof uriOrModuleOrAsset==='number'){return Asset.fromModule(uriOrModuleOrAsset);}return uriOrModuleOrAsset;}function _loadSingleFontAsync(name,asset){return _regenerator.default.async(function _loadSingleFontAsync$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return _regenerator.default.awrap(asset.downloadAsync());case 2:if(asset.downloaded){_context3.next=4;break;}throw new Error(\"Failed to download asset for font \\\"\"+name+\"\\\"\");case 4:_context3.next=6;return _regenerator.default.awrap(ExpoFontLoader.loadAsync(_getNativeFontName(name),asset.localUri));case 6:case\"end\":return _context3.stop();}}},null,this);}function _getNativeFontName(name){return Constants.sessionId+\"-\"+name;}","map":{"version":3,"sources":["/Users/ntareguy/Downloads/gwizamobile1/node_modules/expo-font/src/Font.js"],"names":["ExpoFontLoader","NativeModulesProxy","requireAsset","Asset","requireConstants","Constants","require","error","Error","loaded","loadPromises","processFontFamily","name","systemFonts","includes","sessionId","isLoaded","__DEV__","isLoading","console","_getNativeFontName","hasOwnProperty","loadAsync","nameOrMap","uriOrModuleOrAsset","Array","isArray","warn","Promise","all","map","fontMap","names","Object","keys","asset","_getAssetForSource","_loadSingleFontAsync","fromModule","downloadAsync","downloaded","localUri"],"mappings":"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","sourcesContent":["// @flow\n\nimport invariant from 'invariant';\nimport { NativeModulesProxy } from 'expo-core';\nconst { ExpoFontLoader } = NativeModulesProxy;\n\nconst { Asset } = requireAsset();\nconst { Constants } = requireConstants();\n\nfunction requireAsset() {\n  try {\n    return require('expo-asset');\n  } catch (error) {\n    throw new Error('expo-font needs expo-asset to be installed');\n  }\n}\n\nfunction requireConstants() {\n  try {\n    return require('expo-constants');\n  } catch (error) {\n    throw new Error('expo-font needs expo-constants to be installed');\n  }\n}\n\ntype FontSource = string | number | Asset;\n\nconst loaded: { [name: string]: boolean } = {};\nconst loadPromises: { [name: string]: Promise<void> } = {};\n\nexport function processFontFamily(name: ?string): ?string {\n  if (!name || Constants.systemFonts.includes(name) || name === 'System') {\n    return name;\n  }\n\n  if (name.includes(Constants.sessionId)) {\n    return name;\n  }\n\n  if (!isLoaded(name)) {\n    if (__DEV__) {\n      if (isLoading(name)) {\n        console.error(\n          `You started loading '${name}', but used it before it finished loading\\n\\n` +\n            `- You need to wait for Font.loadAsync to complete before using the font.\\n\\n` +\n            `- We recommend loading all fonts before rendering the app, and rendering only ` +\n            `Expo.AppLoading while waiting for loading to complete.`\n        );\n      } else {\n        console.error(\n          `fontFamily '${name}' is not a system font and has not been loaded through ` +\n            `Font.loadAsync.\\n\\n` +\n            `- If you intended to use a system font, make sure you typed the name ` +\n            `correctly and that it is supported by your device operating system.\\n\\n` +\n            `- If this is a custom font, be sure to load it with Font.loadAsync.`\n        );\n      }\n    }\n\n    return 'System';\n  }\n\n  return `ExpoFont-${_getNativeFontName(name)}`;\n}\n\nexport function isLoaded(name: string): boolean {\n  return loaded.hasOwnProperty(name);\n}\n\nexport function isLoading(name: string): boolean {\n  return loadPromises.hasOwnProperty(name);\n}\n\nexport async function loadAsync(\n  nameOrMap: string | { [string]: FontSource } | Array<{ [string]: FontSource }>,\n  uriOrModuleOrAsset?: FontSource\n): Promise<void> {\n  if (Array.isArray(nameOrMap)) {\n    console.warn(\n      `Passing in an array to Font.loadAsync like Font.loadAsync([fontMap1, fontMap2, fontMap3]) is deprecated and will be removed in SDK 25. Instead, pass in a single font map. The object spread syntax may help with this: Font.loadAsync({ ...fontMap1, ...fontMap2, ...fontMap3 })`\n    );\n    await Promise.all(nameOrMap.map(loadAsync));\n    return;\n  } else if (typeof nameOrMap === 'object') {\n    const fontMap = nameOrMap;\n    const names = Object.keys(fontMap);\n    await Promise.all(names.map(name => loadAsync(name, fontMap[name])));\n    return;\n  }\n\n  const name = nameOrMap;\n\n  if (loaded[name]) {\n    return;\n  }\n\n  if (loadPromises[name]) {\n    return loadPromises[name];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  invariant(uriOrModuleOrAsset, `No source from which to load font \"${name}\"`);\n  const asset = _getAssetForSource(uriOrModuleOrAsset);\n  loadPromises[name] = (async () => {\n    try {\n      await _loadSingleFontAsync(name, asset);\n      loaded[name] = true;\n    } finally {\n      delete loadPromises[name];\n    }\n  })();\n\n  await loadPromises[name];\n}\n\nfunction _getAssetForSource(uriOrModuleOrAsset: FontSource): Asset {\n  if (typeof uriOrModuleOrAsset === 'string') {\n    // TODO(nikki): need to implement Asset.fromUri(...)\n    // asset = Asset.fromUri(uriOrModuleOrAsset);\n    throw new Error(\n      'Loading fonts from remote URIs is temporarily not supported. Please download the font file and load it using require. See: https://docs.expo.io/versions/latest/guides/using-custom-fonts.html#downloading-the-font'\n    );\n  }\n\n  if (typeof uriOrModuleOrAsset === 'number') {\n    return Asset.fromModule(uriOrModuleOrAsset);\n  }\n\n  return uriOrModuleOrAsset;\n}\n\nasync function _loadSingleFontAsync(name: string, asset: Asset): Promise<void> {\n  await asset.downloadAsync();\n  if (!asset.downloaded) {\n    throw new Error(`Failed to download asset for font \"${name}\"`);\n  }\n  await ExpoFontLoader.loadAsync(_getNativeFontName(name), asset.localUri);\n}\n\nfunction _getNativeFontName(name: string): string {\n  return `${Constants.sessionId}-${name}`;\n}\n"]},"metadata":{},"sourceType":"script"}