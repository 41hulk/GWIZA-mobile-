{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=_default;var _extractBrush=_interopRequireDefault(require(\"./extractBrush\"));var _extractOpacity=_interopRequireDefault(require(\"./extractOpacity\"));var _extractLengthList=_interopRequireDefault(require(\"./extractLengthList\"));var caps={butt:0,square:2,round:1};var joins={miter:0,bevel:2,round:1};var strokeProps=[\"stroke\",\"strokeWidth\",\"strokeOpacity\",\"strokeDasharray\",\"strokeDashoffset\",\"strokeLinecap\",\"strokeLinejoin\",\"strokeMiterlimit\"];function _default(props,styleProperties){strokeProps.forEach(function(name){if(props.hasOwnProperty(name)){styleProperties.push(name);}});var stroke=props.stroke;var strokeWidth=props.strokeWidth,strokeDasharray=props.strokeDasharray;if(!strokeDasharray||strokeDasharray===\"none\"){strokeDasharray=null;}else{strokeDasharray=(0,_extractLengthList.default)(strokeDasharray);if(strokeDasharray&&strokeDasharray.length%2===1){strokeDasharray=strokeDasharray.concat(strokeDasharray);}}if(!strokeWidth||typeof strokeWidth!==\"string\"){strokeWidth=\"\"+(strokeWidth||1);}return{stroke:(0,_extractBrush.default)(stroke),strokeOpacity:(0,_extractOpacity.default)(props.strokeOpacity),strokeLinecap:caps[props.strokeLinecap]||0,strokeLinejoin:joins[props.strokeLinejoin]||0,strokeDasharray:strokeDasharray,strokeWidth:strokeWidth,strokeDashoffset:strokeDasharray?+props.strokeDashoffset||0:null,strokeMiterlimit:parseFloat(props.strokeMiterlimit)||4};}","map":{"version":3,"sources":["/Users/ntareguy/Downloads/gwizamobile1/node_modules/expo/node_modules/react-native-svg/lib/extract/extractStroke.js"],"names":["caps","butt","square","round","joins","miter","bevel","strokeProps","props","styleProperties","forEach","name","hasOwnProperty","push","stroke","strokeWidth","strokeDasharray","length","concat","strokeOpacity","strokeLinecap","strokeLinejoin","strokeDashoffset","strokeMiterlimit","parseFloat"],"mappings":"qKAAA,oEACA,wEACA,8EAEA,GAAMA,CAAAA,IAAI,CAAG,CACTC,IAAI,CAAE,CADG,CAETC,MAAM,CAAE,CAFC,CAGTC,KAAK,CAAE,CAHE,CAAb,CAMA,GAAMC,CAAAA,KAAK,CAAG,CACVC,KAAK,CAAE,CADG,CAEVC,KAAK,CAAE,CAFG,CAGVH,KAAK,CAAE,CAHG,CAAd,CAMA,GAAMI,CAAAA,WAAW,CAAG,CAChB,QADgB,CAEhB,aAFgB,CAGhB,eAHgB,CAIhB,iBAJgB,CAKhB,kBALgB,CAMhB,eANgB,CAOhB,gBAPgB,CAQhB,kBARgB,CAApB,CAWe,kBAASC,KAAT,CAAgBC,eAAhB,CAAiC,CAC5CF,WAAW,CAACG,OAAZ,CAAoB,SAAAC,IAAI,CAAI,CACxB,GAAIH,KAAK,CAACI,cAAN,CAAqBD,IAArB,CAAJ,CAAgC,CAC5BF,eAAe,CAACI,IAAhB,CAAqBF,IAArB,EACH,CACJ,CAJD,EAD4C,GAOpCG,CAAAA,MAPoC,CAOzBN,KAPyB,CAOpCM,MAPoC,IAQtCC,CAAAA,WARsC,CAQLP,KARK,CAQtCO,WARsC,CAQzBC,eARyB,CAQLR,KARK,CAQzBQ,eARyB,CAU5C,GAAI,CAACA,eAAD,EAAoBA,eAAe,GAAK,MAA5C,CAAoD,CAChDA,eAAe,CAAG,IAAlB,CACH,CAFD,IAEO,CAKHA,eAAe,CAAG,+BAAkBA,eAAlB,CAAlB,CACA,GAAIA,eAAe,EAAIA,eAAe,CAACC,MAAhB,CAAyB,CAAzB,GAA+B,CAAtD,CAAyD,CACrDD,eAAe,CAAGA,eAAe,CAACE,MAAhB,CAAuBF,eAAvB,CAAlB,CACH,CACJ,CAED,GAAI,CAACD,WAAD,EAAgB,MAAOA,CAAAA,WAAP,GAAuB,QAA3C,CAAqD,CACjDA,WAAW,KAAMA,WAAW,EAAI,CAArB,CAAX,CACH,CAED,MAAO,CACHD,MAAM,CAAE,0BAAaA,MAAb,CADL,CAEHK,aAAa,CAAE,4BAAeX,KAAK,CAACW,aAArB,CAFZ,CAGHC,aAAa,CAAEpB,IAAI,CAACQ,KAAK,CAACY,aAAP,CAAJ,EAA6B,CAHzC,CAIHC,cAAc,CAAEjB,KAAK,CAACI,KAAK,CAACa,cAAP,CAAL,EAA+B,CAJ5C,CAKHL,eAAe,CAAEA,eALd,CAMHD,WAAW,CAAEA,WANV,CAOHO,gBAAgB,CAAEN,eAAe,CAAG,CAACR,KAAK,CAACc,gBAAP,EAA2B,CAA9B,CAAkC,IAPhE,CAQHC,gBAAgB,CAAEC,UAAU,CAAChB,KAAK,CAACe,gBAAP,CAAV,EAAsC,CARrD,CAAP,CAUH","sourcesContent":["import extractBrush from \"./extractBrush\";\nimport extractOpacity from \"./extractOpacity\";\nimport extractLengthList from \"./extractLengthList\";\n\nconst caps = {\n    butt: 0,\n    square: 2,\n    round: 1,\n};\n\nconst joins = {\n    miter: 0,\n    bevel: 2,\n    round: 1,\n};\n\nconst strokeProps = [\n    \"stroke\",\n    \"strokeWidth\",\n    \"strokeOpacity\",\n    \"strokeDasharray\",\n    \"strokeDashoffset\",\n    \"strokeLinecap\",\n    \"strokeLinejoin\",\n    \"strokeMiterlimit\",\n];\n\nexport default function(props, styleProperties) {\n    strokeProps.forEach(name => {\n        if (props.hasOwnProperty(name)) {\n            styleProperties.push(name);\n        }\n    });\n\n    const { stroke } = props;\n    let { strokeWidth, strokeDasharray } = props;\n\n    if (!strokeDasharray || strokeDasharray === \"none\") {\n        strokeDasharray = null;\n    } else {\n        // <dasharray> It's a list of comma and/or white space separated <length>s\n        // and <percentage>s that specify the lengths of alternating dashes and gaps.\n        // If an odd number of values is provided, then the list of values is repeated\n        // to yield an even number of values. Thus, 5,3,2 is equivalent to 5,3,2,5,3,2.\n        strokeDasharray = extractLengthList(strokeDasharray);\n        if (strokeDasharray && strokeDasharray.length % 2 === 1) {\n            strokeDasharray = strokeDasharray.concat(strokeDasharray);\n        }\n    }\n\n    if (!strokeWidth || typeof strokeWidth !== \"string\") {\n        strokeWidth = `${strokeWidth || 1}`;\n    }\n\n    return {\n        stroke: extractBrush(stroke),\n        strokeOpacity: extractOpacity(props.strokeOpacity),\n        strokeLinecap: caps[props.strokeLinecap] || 0,\n        strokeLinejoin: joins[props.strokeLinejoin] || 0,\n        strokeDasharray: strokeDasharray,\n        strokeWidth: strokeWidth,\n        strokeDashoffset: strokeDasharray ? +props.strokeDashoffset || 0 : null,\n        strokeMiterlimit: parseFloat(props.strokeMiterlimit) || 4,\n    };\n}\n"]},"metadata":{},"sourceType":"script"}