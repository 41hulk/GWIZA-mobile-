{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=createBranchUniversalObject;var _regenerator=_interopRequireDefault(require(\"@babel/runtime/regenerator\"));var _objectSpread2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));var _reactNative=require(\"react-native\");var _BranchEvent=_interopRequireDefault(require(\"./BranchEvent\"));var RNBranch=_reactNative.NativeModules.RNBranch;function createBranchUniversalObject(identifier){var options,contentMetadata,key,valueType,branchUniversalObject,price,_ref,ident,_args=arguments;return _regenerator.default.async(function createBranchUniversalObject$(_context){while(1){switch(_context.prev=_context.next){case 0:options=_args.length>1&&_args[1]!==undefined?_args[1]:{};if(!(typeof identifier!=='string')){_context.next=3;break;}throw new Error('react-native-branch: identifier must be a string');case 3:contentMetadata=options.contentMetadata||{};if(!contentMetadata.customMetadata){_context.next=14;break;}_context.t0=_regenerator.default.keys(contentMetadata.customMetadata);case 6:if((_context.t1=_context.t0()).done){_context.next=14;break;}key=_context.t1.value;valueType=typeof contentMetadata.customMetadata[key];if(!(valueType=='string')){_context.next=11;break;}return _context.abrupt(\"continue\",6);case 11:console.warn('[Branch] customMetadata values must be strings. Value for property '+key+' has type '+valueType+'.');_context.next=6;break;case 14:branchUniversalObject=(0,_objectSpread2.default)({canonicalIdentifier:identifier,contentMetadata:contentMetadata},options);price=contentMetadata.price===undefined?undefined:''+contentMetadata.price;branchUniversalObject.contentMetadata.price=price;if(options.automaticallyListOnSpotlight!==undefined){console.info('[Branch] automaticallyListOnSpotlight is deprecated. Please use locallyIndex instead.');}if(options.price!==undefined){console.info('[Branch] price is deprecated. Please use contentMetadata.price instead.');}if(options.currency!==undefined){console.info('[Branch] currency is deprecated. Please use contentMetadata.price instead.');}if(options.metadata!==undefined){console.info('[Branch] metadata is deprecated. Please use contentMetadata.customMetadata instead.');}if(options.contentIndexingMode!==undefined){console.info('[Branch] contentIndexingMode is deprecated. Please use locallyIndex or publiclyIndex instead.');}_context.next=24;return _regenerator.default.awrap(RNBranch.createUniversalObject(branchUniversalObject));case 24:_ref=_context.sent;ident=_ref.ident;return _context.abrupt(\"return\",{ident:ident,showShareSheet:function showShareSheet(){var shareOptions=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var linkProperties=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var controlParams=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};shareOptions=(0,_objectSpread2.default)({title:options.title||'',text:options.contentDescription||''},shareOptions);linkProperties=(0,_objectSpread2.default)({feature:'share',channel:'RNApp'},linkProperties);return this._tryFunction(RNBranch.showShareSheet,shareOptions,linkProperties,controlParams);},registerView:function registerView(){console.info('[Branch] registerView is deprecated. Please use logEvent(BranchEvent.ViewItem) instead.');return this._tryFunction(RNBranch.registerView);},generateShortUrl:function generateShortUrl(){var linkProperties=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var controlParams=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};return this._tryFunction(RNBranch.generateShortUrl,linkProperties,controlParams);},listOnSpotlight:function listOnSpotlight(){console.info('[Branch] listOnSpotlight is deprecated. Please use locallyIndex instead.');if(_reactNative.Platform.OS!=='ios')return Promise.resolve();return this._tryFunction(RNBranch.listOnSpotlight);},userCompletedAction:function userCompletedAction(event){var state=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};console.info('[Branch] userCompletedAction is deprecated. Please use logEvent or the BranchEvent class instead.');if(event==RNBranch.REGISTER_VIEW_EVENT){return this.logEvent(_BranchEvent.default.ViewItem,{customData:state});}return this._tryFunction(RNBranch.userCompletedActionOnUniversalObject,event,state);},logEvent:function logEvent(eventName){var params=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};return new _BranchEvent.default(eventName,this,params).logEvent();},release:function release(){return RNBranch.releaseUniversalObject(this.ident);},_newIdent:function _newIdent(){var _this=this;return RNBranch.createUniversalObject(branchUniversalObject).then(function(_ref2){var ident=_ref2.ident;_this.ident=ident;return ident;});},_tryFunction:function _tryFunction(func){var _this2=this;for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}return func.apply(void 0,[this.ident].concat(args)).catch(function(error){if(error.code!='RNBranch::Error::BUONotFound'){throw error;}return _this2._newIdent().then(function(ident){return func.apply(void 0,[ident].concat(args));});});}});case 27:case\"end\":return _context.stop();}}},null,this);}","map":{"version":3,"sources":["/Users/ntareguy/Downloads/gwizamobile1/node_modules/react-native-branch/src/branchUniversalObject.js"],"names":["RNBranch","NativeModules","createBranchUniversalObject","identifier","options","Error","contentMetadata","customMetadata","key","valueType","console","warn","branchUniversalObject","canonicalIdentifier","price","undefined","automaticallyListOnSpotlight","info","currency","metadata","contentIndexingMode","createUniversalObject","ident","showShareSheet","shareOptions","linkProperties","controlParams","title","text","contentDescription","feature","channel","_tryFunction","registerView","generateShortUrl","listOnSpotlight","Platform","OS","Promise","resolve","userCompletedAction","event","state","REGISTER_VIEW_EVENT","logEvent","BranchEvent","ViewItem","customData","userCompletedActionOnUniversalObject","eventName","params","release","releaseUniversalObject","_newIdent","then","func","args","catch","error","code"],"mappings":"iWAAA,yCACA,kE,GAEQA,CAAAA,Q,CAAaC,0B,CAAbD,Q,CAEO,QAAeE,CAAAA,2BAAf,CAA2CC,UAA3C,yOAAuDC,OAAvD,+CAAiE,EAAjE,MACT,MAAOD,CAAAA,UAAP,GAAsB,QADb,+BAC6B,IAAIE,CAAAA,KAAJ,CAAU,kDAAV,CAD7B,QAGPC,eAHO,CAGWF,OAAO,CAACE,eAAR,EAA2B,EAHtC,KAKTA,eAAe,CAACC,cALP,gEAMOD,eAAe,CAACC,cANvB,sEAMAC,GANA,mBAOHC,SAPG,CAOS,MAAOH,CAAAA,eAAe,CAACC,cAAhB,CAA+BC,GAA/B,CAPhB,MAQLC,SAAS,EAAI,QARR,wEASTC,OAAO,CAACC,IAAR,CAAa,sEAAwEH,GAAxE,CAA8E,YAA9E,CAA6FC,SAA7F,CAAyG,GAAtH,EATS,8BAcPG,qBAdO,6BAeXC,mBAAmB,CAAEV,UAfV,CAgBXG,eAAe,CAAEA,eAhBN,EAiBRF,OAjBQ,EAqBPU,KArBO,CAqBCR,eAAe,CAACQ,KAAhB,GAA0BC,SAA1B,CAAsCA,SAAtC,CAAkD,GAAKT,eAAe,CAACQ,KArBxE,CAsBbF,qBAAqB,CAACN,eAAtB,CAAsCQ,KAAtC,CAA8CA,KAA9C,CAEA,GAAIV,OAAO,CAACY,4BAAR,GAAyCD,SAA7C,CAAwD,CACtDL,OAAO,CAACO,IAAR,CAAa,uFAAb,EACD,CAED,GAAIb,OAAO,CAACU,KAAR,GAAkBC,SAAtB,CAAiC,CAC/BL,OAAO,CAACO,IAAR,CAAa,yEAAb,EACD,CAED,GAAIb,OAAO,CAACc,QAAR,GAAqBH,SAAzB,CAAoC,CAClCL,OAAO,CAACO,IAAR,CAAa,4EAAb,EACD,CAED,GAAIb,OAAO,CAACe,QAAR,GAAqBJ,SAAzB,CAAoC,CAClCL,OAAO,CAACO,IAAR,CAAa,qFAAb,EACD,CAED,GAAIb,OAAO,CAACgB,mBAAR,GAAgCL,SAApC,CAA+C,CAC7CL,OAAO,CAACO,IAAR,CAAa,+FAAb,EACD,CA1CY,mDA4CWjB,QAAQ,CAACqB,qBAAT,CAA+BT,qBAA/B,CA5CX,6BA4CLU,KA5CK,MA4CLA,KA5CK,iCA8CN,CACLA,KAAK,CAAEA,KADF,CAELC,cAFK,0BAEsE,IAA5DC,CAAAA,YAA4D,2DAA7C,EAA6C,IAAzCC,CAAAA,cAAyC,2DAAxB,EAAwB,IAApBC,CAAAA,aAAoB,2DAAJ,EAAI,CACzEF,YAAY,6BACVG,KAAK,CAAEvB,OAAO,CAACuB,KAAR,EAAiB,EADd,CAEVC,IAAI,CAAExB,OAAO,CAACyB,kBAAR,EAA8B,EAF1B,EAGPL,YAHO,CAAZ,CAMAC,cAAc,6BACZK,OAAO,CAAE,OADG,CAEZC,OAAO,CAAE,OAFG,EAGTN,cAHS,CAAd,CAMA,MAAO,MAAKO,YAAL,CAAkBhC,QAAQ,CAACuB,cAA3B,CAA2CC,YAA3C,CAAyDC,cAAzD,CAAyEC,aAAzE,CAAP,CACD,CAhBI,CAkBLO,YAlBK,wBAkBU,CACbvB,OAAO,CAACO,IAAR,CAAa,yFAAb,EACA,MAAO,MAAKe,YAAL,CAAkBhC,QAAQ,CAACiC,YAA3B,CAAP,CACD,CArBI,CAsBLC,gBAtBK,4BAsBqD,IAAzCT,CAAAA,cAAyC,2DAAxB,EAAwB,IAApBC,CAAAA,aAAoB,2DAAJ,EAAI,CACxD,MAAO,MAAKM,YAAL,CAAkBhC,QAAQ,CAACkC,gBAA3B,CAA6CT,cAA7C,CAA6DC,aAA7D,CAAP,CACD,CAxBI,CAyBLS,eAzBK,2BAyBa,CAChBzB,OAAO,CAACO,IAAR,CAAa,0EAAb,EACA,GAAImB,sBAASC,EAAT,GAAgB,KAApB,CAA2B,MAAOC,CAAAA,OAAO,CAACC,OAAR,EAAP,CAC3B,MAAO,MAAKP,YAAL,CAAkBhC,QAAQ,CAACmC,eAA3B,CAAP,CACD,CA7BI,CA8BLK,mBA9BK,8BA8BeC,KA9Bf,CA8BkC,IAAZC,CAAAA,KAAY,2DAAJ,EAAI,CACrChC,OAAO,CAACO,IAAR,CAAa,mGAAb,EACA,GAAIwB,KAAK,EAAIzC,QAAQ,CAAC2C,mBAAtB,CAA2C,CACzC,MAAO,MAAKC,QAAL,CAAcC,qBAAYC,QAA1B,CAAoC,CAAEC,UAAU,CAAEL,KAAd,CAApC,CAAP,CACD,CACD,MAAO,MAAKV,YAAL,CAAkBhC,QAAQ,CAACgD,oCAA3B,CAAiEP,KAAjE,CAAwEC,KAAxE,CAAP,CACD,CApCI,CAqCLE,QArCK,mBAqCIK,SArCJ,CAqC4B,IAAbC,CAAAA,MAAa,2DAAJ,EAAI,CAC/B,MAAO,IAAIL,qBAAJ,CAAgBI,SAAhB,CAA2B,IAA3B,CAAiCC,MAAjC,EAAyCN,QAAzC,EAAP,CACD,CAvCI,CAwCLO,OAxCK,mBAwCK,CACR,MAAOnD,CAAAA,QAAQ,CAACoD,sBAAT,CAAgC,KAAK9B,KAArC,CAAP,CACD,CA1CI,CA+CL+B,SA/CK,qBA+CO,gBACV,MAAOrD,CAAAA,QAAQ,CAACqB,qBAAT,CAA+BT,qBAA/B,EAAsD0C,IAAtD,CAA2D,eAAa,IAAXhC,CAAAA,KAAW,OAAXA,KAAW,CAC7E,KAAI,CAACA,KAAL,CAAaA,KAAb,CACA,MAAOA,CAAAA,KAAP,CACD,CAHM,CAAP,CAID,CApDI,CAsDLU,YAtDK,uBAsDQuB,IAtDR,CAsDuB,+CAANC,IAAM,qDAANA,IAAM,0BAC1B,MAAOD,CAAAA,IAAI,MAAJ,SAAK,KAAKjC,KAAV,SAAoBkC,IAApB,GAA0BC,KAA1B,CAAgC,SAACC,KAAD,CAAW,CAChD,GAAIA,KAAK,CAACC,IAAN,EAAc,8BAAlB,CAAkD,CAChD,KAAMD,CAAAA,KAAN,CACD,CACD,MAAO,CAAA,MAAI,CAACL,SAAL,GAAiBC,IAAjB,CAAsB,SAAChC,KAAD,CAAW,CACtC,MAAOiC,CAAAA,IAAI,MAAJ,SAAKjC,KAAL,SAAekC,IAAf,EAAP,CACD,CAFM,CAAP,CAGD,CAPM,CAAP,CAQD,CA/DI,CA9CM","sourcesContent":["import { NativeModules, Platform } from 'react-native'\nimport BranchEvent from './BranchEvent'\n\nconst { RNBranch } = NativeModules\n\nexport default async function createBranchUniversalObject(identifier, options = {}) {\n  if (typeof identifier !== 'string') throw new Error('react-native-branch: identifier must be a string')\n\n  const contentMetadata = options.contentMetadata || {}\n\n  if (contentMetadata.customMetadata) {\n    for (const key in contentMetadata.customMetadata) {\n      const valueType = typeof contentMetadata.customMetadata[key]\n      if (valueType == 'string') continue\n      console.warn('[Branch] customMetadata values must be strings. Value for property ' + key + ' has type ' + valueType + '.')\n      // TODO: throw?\n    }\n  }\n\n  const branchUniversalObject = {\n    canonicalIdentifier: identifier,\n    contentMetadata: contentMetadata,\n    ...options\n  }\n\n  // For the benefit of NSDecimalNumber on iOS.\n  const price = contentMetadata.price === undefined ? undefined : '' + contentMetadata.price\n  branchUniversalObject.contentMetadata.price = price\n\n  if (options.automaticallyListOnSpotlight !== undefined) {\n    console.info('[Branch] automaticallyListOnSpotlight is deprecated. Please use locallyIndex instead.')\n  }\n\n  if (options.price !== undefined) {\n    console.info('[Branch] price is deprecated. Please use contentMetadata.price instead.')\n  }\n\n  if (options.currency !== undefined) {\n    console.info('[Branch] currency is deprecated. Please use contentMetadata.price instead.')\n  }\n\n  if (options.metadata !== undefined) {\n    console.info('[Branch] metadata is deprecated. Please use contentMetadata.customMetadata instead.')\n  }\n\n  if (options.contentIndexingMode !== undefined) {\n    console.info('[Branch] contentIndexingMode is deprecated. Please use locallyIndex or publiclyIndex instead.')\n  }\n\n  const { ident } = await RNBranch.createUniversalObject(branchUniversalObject)\n\n  return {\n    ident: ident,\n    showShareSheet(shareOptions = {}, linkProperties = {}, controlParams = {}) {\n      shareOptions = {\n        title: options.title || '',\n        text: options.contentDescription || '',\n        ...shareOptions,\n      }\n\n      linkProperties = {\n        feature: 'share',\n        channel: 'RNApp',\n        ...linkProperties,\n      }\n\n      return this._tryFunction(RNBranch.showShareSheet, shareOptions, linkProperties, controlParams)\n    },\n    // deprecated in favor of userCompletedAction(RegisterViewEvent)\n    registerView() {\n      console.info('[Branch] registerView is deprecated. Please use logEvent(BranchEvent.ViewItem) instead.')\n      return this._tryFunction(RNBranch.registerView)\n    },\n    generateShortUrl(linkProperties = {}, controlParams = {}) {\n      return this._tryFunction(RNBranch.generateShortUrl, linkProperties, controlParams)\n    },\n    listOnSpotlight() {\n      console.info('[Branch] listOnSpotlight is deprecated. Please use locallyIndex instead.')\n      if (Platform.OS !== 'ios') return Promise.resolve()\n      return this._tryFunction(RNBranch.listOnSpotlight)\n    },\n    userCompletedAction(event, state = {}) {\n      console.info('[Branch] userCompletedAction is deprecated. Please use logEvent or the BranchEvent class instead.')\n      if (event == RNBranch.REGISTER_VIEW_EVENT) {\n        return this.logEvent(BranchEvent.ViewItem, { customData: state })\n      }\n      return this._tryFunction(RNBranch.userCompletedActionOnUniversalObject, event, state)\n    },\n    logEvent(eventName, params = {}) {\n      return new BranchEvent(eventName, this, params).logEvent()\n    },\n    release() {\n      return RNBranch.releaseUniversalObject(this.ident)\n    },\n\n    /**\n     * Used by exception handlers when RNBranch::Error::BUONotFound is caught.\n     */\n    _newIdent() {\n      return RNBranch.createUniversalObject(branchUniversalObject).then(({ident}) => {\n        this.ident = ident\n        return ident\n      })\n    },\n\n    _tryFunction(func, ...args) {\n      return func(this.ident, ...args).catch((error) => {\n        if (error.code != 'RNBranch::Error::BUONotFound') {\n          throw error\n        }\n        return this._newIdent().then((ident) => {\n          return func(ident, ...args)\n        })\n      })\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}