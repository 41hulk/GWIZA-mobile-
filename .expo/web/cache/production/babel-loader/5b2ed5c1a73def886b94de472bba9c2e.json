{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.watchStepCount=watchStepCount;exports.getStepCountAsync=getStepCountAsync;exports.isAvailableAsync=isAvailableAsync;var _regenerator=_interopRequireDefault(require(\"@babel/runtime/regenerator\"));var _invariant=_interopRequireDefault(require(\"invariant\"));var _reactNative=require(\"react-native\");var PedometerEventEmitter=new _reactNative.NativeEventEmitter(_reactNative.NativeModules.ExponentPedometer);var _listenerCount=0;function watchStepCount(callback){if(_listenerCount===0){_reactNative.NativeModules.ExponentPedometer.watchStepCount();}_listenerCount++;var listener=PedometerEventEmitter.addListener('Exponent.pedometerUpdate',callback);return{remove:function remove(){listener.remove();_listenerCount--;if(_listenerCount===0){_reactNative.NativeModules.ExponentPedometer.stopWatchingStepCount();}}};}function getStepCountAsync(start,end){return _regenerator.default.async(function getStepCountAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:(0,_invariant.default)(start<=end,'Pedometer: The start date must precede the end date.');_context.next=3;return _regenerator.default.awrap(_reactNative.NativeModules.ExponentPedometer.getStepCountAsync(start.getTime(),end.getTime()));case 3:return _context.abrupt(\"return\",_context.sent);case 4:case\"end\":return _context.stop();}}},null,this);}function isAvailableAsync(){return _regenerator.default.async(function isAvailableAsync$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return _regenerator.default.awrap(_reactNative.NativeModules.ExponentPedometer.isAvailableAsync());case 2:return _context2.abrupt(\"return\",_context2.sent);case 3:case\"end\":return _context2.stop();}}},null,this);}","map":{"version":3,"sources":["../src/Pedometer.ts"],"names":[],"mappings":"uVAAA,4DACA,yCAEA,GAAM,CAAA,qBAAqB,CAAG,GAAI,gCAAJ,CAAuB,2BAAc,iBAArC,CAA9B,CAMA,GAAI,CAAA,cAAc,CAAG,CAArB,CAEM,QAAU,CAAA,cAAV,CAAyB,QAAzB,CAA0D,CAC9D,GAAI,cAAc,GAAK,CAAvB,CAA0B,CACxB,2BAAc,iBAAd,CAAgC,cAAhC,GACD,CACD,cAAc,GAEd,GAAM,CAAA,QAAQ,CAAG,qBAAqB,CAAC,WAAtB,CAAkC,0BAAlC,CAA8D,QAA9D,CAAjB,CAEA,MAAO,CACL,MADK,kBACC,CACJ,QAAQ,CAAC,MAAT,GACA,cAAc,GACd,GAAI,cAAc,GAAK,CAAvB,CAA0B,CACxB,2BAAc,iBAAd,CAAgC,qBAAhC,GACD,CACF,CAPI,CAAP,CASD,CAEM,QAAe,CAAA,iBAAf,CAAiC,KAAjC,CAA8C,GAA9C,8HACL,uBAAU,KAAK,EAAI,GAAnB,CAAwB,sDAAxB,EADK,kDAEQ,2BAAc,iBAAd,CAAgC,iBAAhC,CAAkD,KAAK,CAAC,OAAN,EAAlD,CAAmE,GAAG,CAAC,OAAJ,EAAnE,CAFR,gHAKA,QAAe,CAAA,gBAAf,oLACQ,2BAAc,iBAAd,CAAgC,gBAAhC,EADR","sourcesContent":["import invariant from 'invariant';\nimport { NativeEventEmitter, NativeModules } from 'react-native';\n\nconst PedometerEventEmitter = new NativeEventEmitter(NativeModules.ExponentPedometer);\n\ntype PedometerResult = { steps: number };\ntype PedometerUpdateCallback = (result: PedometerResult) => void;\ntype PedometerListener = { remove: () => void };\n\nlet _listenerCount = 0;\n\nexport function watchStepCount(callback: PedometerUpdateCallback): PedometerListener {\n  if (_listenerCount === 0) {\n    NativeModules.ExponentPedometer.watchStepCount();\n  }\n  _listenerCount++;\n\n  const listener = PedometerEventEmitter.addListener('Exponent.pedometerUpdate', callback);\n\n  return {\n    remove() {\n      listener.remove();\n      _listenerCount--;\n      if (_listenerCount === 0) {\n        NativeModules.ExponentPedometer.stopWatchingStepCount();\n      }\n    },\n  };\n}\n\nexport async function getStepCountAsync(start: Date, end: Date): Promise<PedometerResult> {\n  invariant(start <= end, 'Pedometer: The start date must precede the end date.');\n  return await NativeModules.ExponentPedometer.getStepCountAsync(start.getTime(), end.getTime());\n}\n\nexport async function isAvailableAsync(): Promise<boolean> {\n  return await NativeModules.ExponentPedometer.isAvailableAsync();\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}