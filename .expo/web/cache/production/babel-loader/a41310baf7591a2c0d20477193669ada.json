{"ast":null,"code":"var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.extractFont=extractFont;exports.default=_default;var _objectSpread2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));var _lodash=_interopRequireDefault(require(\"lodash\"));var _react=_interopRequireWildcard(require(\"react\"));var _extractLengthList=_interopRequireDefault(require(\"./extractLengthList\"));var fontRegExp=/^\\s*((?:(?:normal|bold|italic)\\s+)*)(?:(\\d+(?:\\.\\d+)?[ptexm%])*(?:\\s*\\/.*?)?\\s+)?\\s*\"?([^\"]*)/i;var fontFamilyPrefix=/^[\\s\"']*/;var fontFamilySuffix=/[\\s\"']*$/;var commaReg=/\\s*,\\s*/g;var cachedFontObjectsFromString={};function extractSingleFontFamily(fontFamilyString){return fontFamilyString?fontFamilyString.split(commaReg)[0].replace(fontFamilyPrefix,\"\").replace(fontFamilySuffix,\"\"):null;}function parseFontString(font){if(cachedFontObjectsFromString.hasOwnProperty(font)){return cachedFontObjectsFromString[font];}var match=fontRegExp.exec(font);if(!match){return null;}var fontFamily=extractSingleFontFamily(match[3]);var fontSize=match[2]||\"12\";var isBold=/bold/.exec(match[1]);var isItalic=/italic/.exec(match[1]);var fontWeight=isBold?\"bold\":\"normal\";var fontStyle=isItalic?\"italic\":\"normal\";cachedFontObjectsFromString[font]={fontSize:fontSize,fontFamily:fontFamily,fontWeight:fontWeight,fontStyle:fontStyle};return cachedFontObjectsFromString[font];}function extractFont(prop){var props=(0,_objectSpread2.default)({},prop.style,prop);var fontData=props.fontData,fontStyle=props.fontStyle,fontVariant=props.fontVariant,fontWeight=props.fontWeight,fontStretch=props.fontStretch,textAnchor=props.textAnchor,textDecoration=props.textDecoration,letterSpacing=props.letterSpacing,wordSpacing=props.wordSpacing,kerning=props.kerning,fontVariantLigatures=props.fontVariantLigatures,fontFeatureSettings=props.fontFeatureSettings;var fontSize=props.fontSize,fontFamily=props.fontFamily,font=props.font;fontFamily=extractSingleFontFamily(fontFamily);fontSize=fontSize?\"\"+fontSize:null;var ownedFont=_lodash.default.pickBy({fontData:fontData,fontStyle:fontStyle,fontVariant:fontVariant,fontWeight:fontWeight,fontStretch:fontStretch,fontSize:fontSize,fontFamily:fontFamily,textAnchor:textAnchor,textDecoration:textDecoration,letterSpacing:letterSpacing,wordSpacing:wordSpacing,kerning:kerning,fontVariantLigatures:fontVariantLigatures,fontFeatureSettings:fontFeatureSettings},function(p){return!_lodash.default.isNil(p);});if(typeof font===\"string\"){font=parseFontString(font);}return _lodash.default.defaults(ownedFont,font);}function _default(props){var container=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var TSpan=arguments.length>2?arguments[2]:undefined;var x=props.x,y=props.y,dx=props.dx,dy=props.dy,rotate=props.rotate,baselineShift=props.baselineShift,verticalAlign=props.verticalAlign,alignmentBaseline=props.alignmentBaseline;var children=props.children;var content=null;if(typeof children===\"string\"||typeof children===\"number\"){var childrenString=children.toString();if(container){children=_react.default.createElement(TSpan,null,childrenString);}else{content=childrenString;children=null;}}else if(_react.Children.count(children)>1||Array.isArray(children)){children=_react.Children.map(children,function(child){if(typeof child===\"string\"||typeof child===\"number\"){return _react.default.createElement(TSpan,null,child.toString());}else{return child;}});}return{content:content,children:children,baselineShift:baselineShift,verticalAlign:verticalAlign,alignmentBaseline:alignmentBaseline,font:extractFont(props),x:(0,_extractLengthList.default)(x),y:(0,_extractLengthList.default)(y),dx:(0,_extractLengthList.default)(dx),dy:(0,_extractLengthList.default)(dy),rotate:(0,_extractLengthList.default)(rotate)};}","map":{"version":3,"sources":["/Users/ntareguy/Downloads/gwizamobile1/node_modules/expo/node_modules/react-native-svg/lib/extract/extractText.js"],"names":["fontRegExp","fontFamilyPrefix","fontFamilySuffix","commaReg","cachedFontObjectsFromString","extractSingleFontFamily","fontFamilyString","split","replace","parseFontString","font","hasOwnProperty","match","exec","fontFamily","fontSize","isBold","isItalic","fontWeight","fontStyle","extractFont","prop","props","style","fontData","fontVariant","fontStretch","textAnchor","textDecoration","letterSpacing","wordSpacing","kerning","fontVariantLigatures","fontFeatureSettings","ownedFont","_","pickBy","p","isNil","defaults","container","TSpan","x","y","dx","dy","rotate","baselineShift","verticalAlign","alignmentBaseline","children","content","childrenString","toString","Children","count","Array","isArray","map","child"],"mappings":"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","sourcesContent":["import _ from \"lodash\";\n//noinspection JSUnresolvedVariable\nimport React, { Children } from \"react\";\nimport extractLengthList from \"./extractLengthList\";\n\nconst fontRegExp = /^\\s*((?:(?:normal|bold|italic)\\s+)*)(?:(\\d+(?:\\.\\d+)?[ptexm%])*(?:\\s*\\/.*?)?\\s+)?\\s*\"?([^\"]*)/i;\nconst fontFamilyPrefix = /^[\\s\"']*/;\nconst fontFamilySuffix = /[\\s\"']*$/;\nconst commaReg = /\\s*,\\s*/g;\n\nconst cachedFontObjectsFromString = {};\n\nfunction extractSingleFontFamily(fontFamilyString) {\n    // SVG on the web allows for multiple font-families to be specified.\n    // For compatibility, we extract the first font-family, hoping\n    // we'll get a match.\n    return fontFamilyString\n        ? fontFamilyString\n              .split(commaReg)[0]\n              .replace(fontFamilyPrefix, \"\")\n              .replace(fontFamilySuffix, \"\")\n        : null;\n}\n\nfunction parseFontString(font) {\n    if (cachedFontObjectsFromString.hasOwnProperty(font)) {\n        return cachedFontObjectsFromString[font];\n    }\n    const match = fontRegExp.exec(font);\n    if (!match) {\n        return null;\n    }\n    const fontFamily = extractSingleFontFamily(match[3]);\n    const fontSize = match[2] || \"12\";\n    const isBold = /bold/.exec(match[1]);\n    const isItalic = /italic/.exec(match[1]);\n    const fontWeight = isBold ? \"bold\" : \"normal\";\n    const fontStyle = isItalic ? \"italic\" : \"normal\";\n    cachedFontObjectsFromString[font] = {\n        fontSize,\n        fontFamily,\n        fontWeight,\n        fontStyle,\n    };\n    return cachedFontObjectsFromString[font];\n}\n\nexport function extractFont(prop) {\n    const props = { ...prop.style, ...prop };\n    const {\n        fontData,\n        fontStyle,\n        fontVariant,\n        fontWeight,\n        fontStretch,\n        textAnchor,\n        textDecoration,\n        letterSpacing,\n        wordSpacing,\n        kerning,\n        fontVariantLigatures,\n        fontFeatureSettings,\n    } = props;\n    let { fontSize, fontFamily, font } = props;\n\n    fontFamily = extractSingleFontFamily(fontFamily);\n    fontSize = fontSize ? \"\" + fontSize : null;\n\n    const ownedFont = _.pickBy(\n        {\n            fontData,\n            fontStyle,\n            fontVariant,\n            fontWeight,\n            fontStretch,\n            fontSize,\n            fontFamily,\n            textAnchor,\n            textDecoration,\n            letterSpacing,\n            wordSpacing,\n            kerning,\n            fontVariantLigatures,\n            fontFeatureSettings,\n        },\n        p => !_.isNil(p),\n    );\n\n    if (typeof font === \"string\") {\n        font = parseFontString(font);\n    }\n\n    return _.defaults(ownedFont, font);\n}\n\nexport default function(props, container = false, TSpan) {\n    const {\n        x,\n        y,\n        dx,\n        dy,\n        rotate,\n        baselineShift,\n        verticalAlign,\n        alignmentBaseline,\n    } = props;\n    let { children } = props;\n\n    let content = null;\n    if (typeof children === \"string\" || typeof children === \"number\") {\n        const childrenString = children.toString();\n        if (container) {\n            children = <TSpan>{childrenString}</TSpan>;\n        } else {\n            content = childrenString;\n            children = null;\n        }\n    } else if (Children.count(children) > 1 || Array.isArray(children)) {\n        children = Children.map(children, child => {\n            if (typeof child === \"string\" || typeof child === \"number\") {\n                return <TSpan>{child.toString()}</TSpan>;\n            } else {\n                return child;\n            }\n        });\n    }\n\n    return {\n        content,\n        children,\n        baselineShift,\n        verticalAlign,\n        alignmentBaseline,\n        font: extractFont(props),\n        x: extractLengthList(x),\n        y: extractLengthList(y),\n        dx: extractLengthList(dx),\n        dy: extractLengthList(dy),\n        rotate: extractLengthList(rotate),\n    };\n}\n"]},"metadata":{},"sourceType":"script"}