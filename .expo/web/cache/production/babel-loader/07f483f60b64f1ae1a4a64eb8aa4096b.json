{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _objectWithoutProperties2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf2=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _react=_interopRequireDefault(require(\"react\"));var _reactNative=require(\"react-native\");var ANDROID_VERSION_LOLLIPOP=21;var TouchableItem=function(_React$Component){(0,_inherits2.default)(TouchableItem,_React$Component);function TouchableItem(){(0,_classCallCheck2.default)(this,TouchableItem);return(0,_possibleConstructorReturn2.default)(this,(0,_getPrototypeOf2.default)(TouchableItem).apply(this,arguments));}(0,_createClass2.default)(TouchableItem,[{key:\"render\",value:function render(){if(_reactNative.Platform.OS==='android'&&_reactNative.Platform.Version>=ANDROID_VERSION_LOLLIPOP){var _this$props=this.props,style=_this$props.style,rest=(0,_objectWithoutProperties2.default)(_this$props,[\"style\"]);return _react.default.createElement(_reactNative.TouchableNativeFeedback,(0,_extends2.default)({},rest,{style:null,background:_reactNative.TouchableNativeFeedback.Ripple(this.props.pressColor,this.props.borderless)}),_react.default.createElement(_reactNative.View,{style:style},_react.default.Children.only(this.props.children)));}return _react.default.createElement(_reactNative.TouchableOpacity,this.props,this.props.children);}}]);return TouchableItem;}(_react.default.Component);exports.default=TouchableItem;TouchableItem.defaultProps={borderless:false,pressColor:'rgba(0, 0, 0, .32)'};","map":{"version":3,"sources":["/Users/ntareguy/Downloads/gwizamobile1/node_modules/react-navigation-drawer/dist/views/TouchableItem.js"],"names":["ANDROID_VERSION_LOLLIPOP","TouchableItem","Platform","OS","Version","props","style","rest","TouchableNativeFeedback","Ripple","pressColor","borderless","React","Children","only","children","Component","defaultProps"],"mappings":"6zBASA,oDACA,yCAEA,GAAMA,CAAAA,wBAAwB,CAAG,EAAjC,C,GAEqBC,CAAAA,a,kWAMV,CASP,GAAIC,sBAASC,EAAT,GAAgB,SAAhB,EAA6BD,sBAASE,OAAT,EAAoBJ,wBAArD,CAA+E,iBAClD,KAAKK,KAD6C,CACrEC,KADqE,aACrEA,KADqE,CAC3DC,IAD2D,8DAE7E,MAAO,8BAAC,oCAAD,0BAA6BA,IAA7B,EAAmC,KAAK,CAAE,IAA1C,CAAgD,UAAU,CAAEC,qCAAwBC,MAAxB,CAA+B,KAAKJ,KAAL,CAAWK,UAA1C,CAAsD,KAAKL,KAAL,CAAWM,UAAjE,CAA5D,GACH,6BAAC,iBAAD,EAAM,KAAK,CAAEL,KAAb,EAAqBM,eAAMC,QAAN,CAAeC,IAAf,CAAoB,KAAKT,KAAL,CAAWU,QAA/B,CAArB,CADG,CAAP,CAGD,CAED,MAAO,8BAAC,6BAAD,CAAsB,KAAKV,KAA3B,CAAmC,KAAKA,KAAL,CAAWU,QAA9C,CAAP,CACD,C,2BAvBwCH,eAAMI,S,gCAA5Bf,a,CACZgB,Y,CAAe,CACpBN,UAAU,CAAE,KADQ,CAEpBD,UAAU,CAAE,oBAFQ,C","sourcesContent":["/**\n * TouchableItem renders a touchable that looks native on both iOS and Android.\n *\n * It provides an abstraction on top of TouchableNativeFeedback and\n * TouchableOpacity.\n *\n * On iOS you can pass the props of TouchableOpacity, on Android pass the props\n * of TouchableNativeFeedback.\n */\nimport React from 'react';\nimport { Platform, TouchableNativeFeedback, TouchableOpacity, View } from 'react-native';\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\n\nexport default class TouchableItem extends React.Component {\n  static defaultProps = {\n    borderless: false,\n    pressColor: 'rgba(0, 0, 0, .32)'\n  };\n\n  render() {\n    /*\n     * TouchableNativeFeedback.Ripple causes a crash on old Android versions,\n     * therefore only enable it on Android Lollipop and above.\n     *\n     * All touchables on Android should have the ripple effect according to\n     * platform design guidelines.\n     * We need to pass the background prop to specify a borderless ripple effect.\n     */\n    if (Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP) {\n      const { style, ...rest } = this.props;\n      return <TouchableNativeFeedback {...rest} style={null} background={TouchableNativeFeedback.Ripple(this.props.pressColor, this.props.borderless)}>\n          <View style={style}>{React.Children.only(this.props.children)}</View>\n        </TouchableNativeFeedback>;\n    }\n\n    return <TouchableOpacity {...this.props}>{this.props.children}</TouchableOpacity>;\n  }\n}"]},"metadata":{},"sourceType":"script"}