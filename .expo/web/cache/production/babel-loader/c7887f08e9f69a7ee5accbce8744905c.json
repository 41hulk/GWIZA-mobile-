{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _react=_interopRequireDefault(require(\"react\"));var _reactNative=require(\"react-native\");var InputView=function InputView(_ref){var pinViewAnim=_ref.pinViewAnim,inputViewStyle=_ref.inputViewStyle,inputTextStyle=_ref.inputTextStyle,showInputs=_ref.showInputs,inputtedValues=_ref.inputtedValues,animatedInputIndex=_ref.animatedInputIndex,pinLength=_ref.pinLength,bgColor=_ref.bgColor,activeBgColor=_ref.activeBgColor,styles=_ref.styles,bgOpacity=_ref.bgOpacity;var tilt=pinViewAnim.interpolate({inputRange:[0,0.3,0.6,0.9],outputRange:[0,-50,50,0]});var inactiveInput=function inactiveInput(index){return _react.default.createElement(_reactNative.Animated.View,{key:\"passwordItem-\"+index,style:[styles[1],{backgroundColor:bgColor,opacity:bgOpacity},inputViewStyle]});};var activeInput=function activeInput(index){if(showInputs){return _react.default.createElement(_reactNative.Animated.View,{key:\"passwordItem-\"+index,style:[styles[2],{backgroundColor:activeBgColor,opacity:1},inputViewStyle]},_react.default.createElement(_reactNative.Text,{style:inputTextStyle},inputtedValues[index]));}else{return _react.default.createElement(_reactNative.Animated.View,{key:\"passwordItem-\"+index,style:[styles[2],{backgroundColor:activeBgColor,opacity:1},inputViewStyle]});}};var ShowInput=function ShowInput(pinLength){var table=[];{for(var i=0;i<pinLength;i++){if(animatedInputIndex[i]===undefined){table.push(inactiveInput(i));}else{table.push(activeInput(i));}}}return table;};return _react.default.createElement(_reactNative.Animated.View,{style:[styles[0],{transform:[{translateX:tilt}],flexDirection:_reactNative.I18nManager.isRTL?'row-reverse':'row'}]},ShowInput(pinLength));};var _default=InputView;exports.default=_default;","map":{"version":3,"sources":["/Users/ntareguy/Downloads/gwizamobile1/node_modules/react-native-pin-view/libs/parts/InputView.js"],"names":["InputView","pinViewAnim","inputViewStyle","inputTextStyle","showInputs","inputtedValues","animatedInputIndex","pinLength","bgColor","activeBgColor","styles","bgOpacity","tilt","interpolate","inputRange","outputRange","inactiveInput","index","backgroundColor","opacity","activeInput","ShowInput","table","i","undefined","push","transform","translateX","flexDirection","I18nManager","isRTL"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Animated, I18nManager, Text} from \"react-native\";\n\nconst InputView = ({pinViewAnim, inputViewStyle, inputTextStyle, showInputs, inputtedValues, animatedInputIndex, pinLength, bgColor, activeBgColor, styles, bgOpacity}) => {\n  const tilt = pinViewAnim.interpolate({\n    inputRange : [0, 0.3, 0.6, 0.9],\n    outputRange: [0, -50, 50, 0]\n  });\n  const inactiveInput = (index) => {\n    return <Animated.View\n        key={\"passwordItem-\" + index}\n        style={[styles[1], {\n          backgroundColor: bgColor,\n          opacity        : bgOpacity,\n        }, inputViewStyle]}/>;\n  };\n\n  const activeInput = (index) => {\n    if(showInputs) {\n      return (\n          <Animated.View\n              key={\"passwordItem-\" + index}\n              style={[styles[2], {\n                backgroundColor: activeBgColor,\n                opacity        : 1,\n              }, inputViewStyle]}>\n            <Text style={inputTextStyle}>{inputtedValues[index]}</Text>\n          </Animated.View>\n      )\n    } else {\n      return <Animated.View\n          key={\"passwordItem-\" + index}\n          style={[styles[2], {\n            backgroundColor: activeBgColor,\n            opacity        : 1,\n          }, inputViewStyle]}/>\n    }\n  };\n  const ShowInput = (pinLength) => {\n    let table = [];\n    {\n      for(let i = 0; i < pinLength; i++) {\n        if(animatedInputIndex[i] === undefined) {\n          table.push(inactiveInput(i))\n        } else {\n          table.push(activeInput(i))\n        }\n      }\n    }\n    return table\n  };\n\n  return (\n      <Animated.View style={[styles[0], {\n        transform    : [{translateX: tilt}],\n        flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row',\n      }]}>\n        {ShowInput(pinLength)}\n      </Animated.View>\n  )\n\n};\n\nexport default InputView"]},"metadata":{},"sourceType":"script"}