{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _regenerator=_interopRequireDefault(require(\"@babel/runtime/regenerator\"));var _reactNative=require(\"react-native\");var ExponentWebBrowser=_reactNative.NativeModules.ExponentWebBrowser;function openBrowserAsync(url){return _regenerator.default.async(function openBrowserAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:return _context.abrupt(\"return\",ExponentWebBrowser.openBrowserAsync(url));case 1:case\"end\":return _context.stop();}}},null,this);}function dismissBrowser(){ExponentWebBrowser.dismissBrowser();}function openAuthSessionAsync(url,redirectUrl){return _regenerator.default.async(function openAuthSessionAsync$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!_authSessionIsNativelySupported()){_context2.next=4;break;}return _context2.abrupt(\"return\",ExponentWebBrowser.openAuthSessionAsync(url,redirectUrl));case 4:return _context2.abrupt(\"return\",_openAuthSessionPolyfillAsync(url,redirectUrl));case 5:case\"end\":return _context2.stop();}}},null,this);}function dismissAuthSession(){if(_authSessionIsNativelySupported()){ExponentWebBrowser.dismissAuthSession();}else{ExponentWebBrowser.dismissBrowser();}}function _authSessionIsNativelySupported(){if(_reactNative.Platform.OS==='android'){return false;}var versionNumber=parseInt(String(_reactNative.Platform.Version),10);return versionNumber>=11;}var _redirectHandler=null;function _openAuthSessionPolyfillAsync(startUrl,returnUrl){return _regenerator.default.async(function _openAuthSessionPolyfillAsync$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(!_redirectHandler){_context3.next=2;break;}throw new Error(\"The WebBrowser's auth session is in an invalid state with a redirect handler set when it should not be\");case 2:_context3.prev=2;_context3.next=5;return _regenerator.default.awrap(Promise.race([openBrowserAsync(startUrl),_waitForRedirectAsync(returnUrl)]));case 5:return _context3.abrupt(\"return\",_context3.sent);case 6:_context3.prev=6;dismissBrowser();if(_redirectHandler){_context3.next=10;break;}throw new Error(\"The WebBrowser auth session is in an invalid state with no redirect handler when one should be set\");case 10:_reactNative.Linking.removeEventListener('url',_redirectHandler);_redirectHandler=null;return _context3.finish(6);case 13:case\"end\":return _context3.stop();}}},null,this,[[2,,6,13]]);}function _waitForRedirectAsync(returnUrl){return new Promise(function(resolve){_redirectHandler=function _redirectHandler(event){if(event.url.startsWith(returnUrl)){resolve({url:event.url,type:'success'});}};_reactNative.Linking.addEventListener('url',_redirectHandler);});}var _default={openBrowserAsync:openBrowserAsync,openAuthSessionAsync:openAuthSessionAsync,dismissBrowser:dismissBrowser,dismissAuthSession:dismissAuthSession};exports.default=_default;","map":{"version":3,"sources":["../src/WebBrowser.ts"],"names":[],"mappings":"kPAAA,yC,GAEQ,CAAA,kB,CAAuB,0B,CAAvB,kB,CAiBR,QAAe,CAAA,gBAAf,CAAgC,GAAhC,6JACS,kBAAkB,CAAC,gBAAnB,CAAoC,GAApC,CADT,0DAIA,QAAS,CAAA,cAAT,EAAuB,CACrB,kBAAkB,CAAC,cAAnB,GACD,CAED,QAAe,CAAA,oBAAf,CAAoC,GAApC,CAAiD,WAAjD,wIACM,+BAA+B,EADrC,2DAEW,kBAAkB,CAAC,oBAAnB,CAAwC,GAAxC,CAA6C,WAA7C,CAFX,0CAIW,6BAA6B,CAAC,GAAD,CAAM,WAAN,CAJxC,2DAQA,QAAS,CAAA,kBAAT,EAA2B,CACzB,GAAI,+BAA+B,EAAnC,CAAuC,CACrC,kBAAkB,CAAC,kBAAnB,GACD,CAFD,IAEO,CACL,kBAAkB,CAAC,cAAnB,GACD,CACF,CAID,QAAS,CAAA,+BAAT,EAAwC,CACtC,GAAI,sBAAS,EAAT,GAAgB,SAApB,CAA+B,CAC7B,MAAO,MAAP,CACD,CAED,GAAM,CAAA,aAAa,CAAG,QAAQ,CAAC,MAAM,CAAC,sBAAS,OAAV,CAAP,CAA2B,EAA3B,CAA9B,CACA,MAAO,CAAA,aAAa,EAAI,EAAxB,CACD,CAED,GAAI,CAAA,gBAAgB,CAA4C,IAAhE,CAEA,QAAe,CAAA,6BAAf,CACE,QADF,CAEE,SAFF,iJAIM,gBAJN,+BAKU,IAAI,CAAA,KAAJ,0GALV,4EAWiB,OAAO,CAAC,IAAR,CAAa,CAAC,gBAAgB,CAAC,QAAD,CAAjB,CAA6B,qBAAqB,CAAC,SAAD,CAAlD,CAAb,CAXjB,kFAaI,cAAc,GAblB,GAcS,gBAdT,gCAeY,IAAI,CAAA,KAAJ,sGAfZ,SAmBI,qBAAQ,mBAAR,CAA4B,KAA5B,CAAmC,gBAAnC,EACA,gBAAgB,CAAG,IAAnB,CApBJ,iGAwBA,QAAS,CAAA,qBAAT,CAA+B,SAA/B,CAAgD,CAC9C,MAAO,IAAI,CAAA,OAAJ,CAAY,SAAA,OAAO,CAAG,CAC3B,gBAAgB,CAAG,0BAAC,KAAD,CAAyB,CAC1C,GAAI,KAAK,CAAC,GAAN,CAAU,UAAV,CAAqB,SAArB,CAAJ,CAAqC,CACnC,OAAO,CAAC,CAAE,GAAG,CAAE,KAAK,CAAC,GAAb,CAAkB,IAAI,CAAE,SAAxB,CAAD,CAAP,CACD,CACF,CAJD,CAMA,qBAAQ,gBAAR,CAAyB,KAAzB,CAAgC,gBAAhC,EACD,CARM,CAAP,CASD,C,aAEc,CACb,gBAAgB,CAAhB,gBADa,CAEb,oBAAoB,CAApB,oBAFa,CAGb,cAAc,CAAd,cAHa,CAIb,kBAAkB,CAAlB,kBAJa,C","sourcesContent":["import { Linking, NativeModules, Platform } from 'react-native';\n\nconst { ExponentWebBrowser } = NativeModules;\n\ntype RedirectEvent = {\n  url: string;\n};\n\ntype AuthSessionResult = RedirectResult | BrowserResult;\n\ntype BrowserResult = {\n  type: 'cancel' | 'dismiss';\n};\n\ntype RedirectResult = {\n  type: 'success';\n  url: string;\n};\n\nasync function openBrowserAsync(url: string): Promise<BrowserResult> {\n  return ExponentWebBrowser.openBrowserAsync(url);\n}\n\nfunction dismissBrowser(): void {\n  ExponentWebBrowser.dismissBrowser();\n}\n\nasync function openAuthSessionAsync(url: string, redirectUrl: string): Promise<AuthSessionResult> {\n  if (_authSessionIsNativelySupported()) {\n    return ExponentWebBrowser.openAuthSessionAsync(url, redirectUrl);\n  } else {\n    return _openAuthSessionPolyfillAsync(url, redirectUrl);\n  }\n}\n\nfunction dismissAuthSession(): void {\n  if (_authSessionIsNativelySupported()) {\n    ExponentWebBrowser.dismissAuthSession();\n  } else {\n    ExponentWebBrowser.dismissBrowser();\n  }\n}\n\n/* iOS <= 10 and Android polyfill for SFAuthenticationSession flow */\n\nfunction _authSessionIsNativelySupported(): boolean {\n  if (Platform.OS === 'android') {\n    return false;\n  }\n\n  const versionNumber = parseInt(String(Platform.Version), 10);\n  return versionNumber >= 11;\n}\n\nlet _redirectHandler: ((event: RedirectEvent) => void) | null = null;\n\nasync function _openAuthSessionPolyfillAsync(\n  startUrl: string,\n  returnUrl: string\n): Promise<AuthSessionResult> {\n  if (_redirectHandler) {\n    throw new Error(\n      `The WebBrowser's auth session is in an invalid state with a redirect handler set when it should not be`\n    );\n  }\n\n  try {\n    return await Promise.race([openBrowserAsync(startUrl), _waitForRedirectAsync(returnUrl)]);\n  } finally {\n    dismissBrowser();\n    if (!_redirectHandler) {\n      throw new Error(\n        `The WebBrowser auth session is in an invalid state with no redirect handler when one should be set`\n      );\n    }\n    Linking.removeEventListener('url', _redirectHandler);\n    _redirectHandler = null;\n  }\n}\n\nfunction _waitForRedirectAsync(returnUrl: string): Promise<RedirectResult> {\n  return new Promise(resolve => {\n    _redirectHandler = (event: RedirectEvent) => {\n      if (event.url.startsWith(returnUrl)) {\n        resolve({ url: event.url, type: 'success' });\n      }\n    };\n\n    Linking.addEventListener('url', _redirectHandler);\n  });\n}\n\nexport default {\n  openBrowserAsync,\n  openAuthSessionAsync,\n  dismissBrowser,\n  dismissAuthSession,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}