{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var DEG_TO_RAD=Math.PI/180;var Matrix2D=function Matrix2D(_a,_b,_c,_d,_tx,_ty){(0,_classCallCheck2.default)(this,Matrix2D);this.setTransform=function(a,b,c,d,tx,ty){this.a=a===null||a===undefined?1:a;this.b=b||0;this.c=c||0;this.d=d===null||d===undefined?1:d;this.tx=tx||0;this.ty=ty||0;return this;};this.reset=function(){this.a=this.d=1;this.b=this.c=this.tx=this.ty=0;return this;};this.toArray=function(){return[this.a,this.b,this.c,this.d,this.tx,this.ty];};this.copy=function(matrix){return this.setTransform(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty);};this.clone=function(){return new Matrix2D(this.a,this.b,this.c,this.d,this.tx,this.ty);};this.prepend=function(a,b,c,d,tx,ty){var a1=this.a;var c1=this.c;var tx1=this.tx;this.a=a*a1+c*this.b;this.b=b*a1+d*this.b;this.c=a*c1+c*this.d;this.d=b*c1+d*this.d;this.tx=a*tx1+c*this.ty+tx;this.ty=b*tx1+d*this.ty+ty;return this;};this.append=function(a,b,c,d,tx,ty){var a1=this.a;var b1=this.b;var c1=this.c;var d1=this.d;if(a!==1||b!==0||c!==0||d!==1){this.a=a1*a+c1*b;this.b=b1*a+d1*b;this.c=a1*c+c1*d;this.d=b1*c+d1*d;}this.tx=a1*tx+c1*ty+this.tx;this.ty=b1*tx+d1*ty+this.ty;return this;};this.appendTransform=function(x,y,scaleX,scaleY,rotation,skewX,skewY,regX,regY){var cos,sin;if(rotation%360){var r=rotation*DEG_TO_RAD;cos=Math.cos(r);sin=Math.sin(r);}else{cos=1;sin=0;}if(skewX||skewY){skewX*=DEG_TO_RAD;skewY*=DEG_TO_RAD;this.append(Math.cos(skewY),Math.sin(skewY),Math.sin(skewX),Math.cos(skewX),x,y);this.append(cos*scaleX,sin*scaleX,-sin*scaleY,cos*scaleY,0,0);}else{this.append(cos*scaleX,sin*scaleX,-sin*scaleY,cos*scaleY,x,y);}if(regX||regY){this.tx-=regX*this.a+regY*this.c;this.ty-=regX*this.b+regY*this.d;}return this;};this.prependTransform=function(x,y,scaleX,scaleY,rotation,skewX,skewY,regX,regY){var cos,sin;if(rotation%360){var r=rotation*DEG_TO_RAD;cos=Math.cos(r);sin=Math.sin(r);}else{cos=1;sin=0;}if(regX||regY){this.tx-=regX;this.ty-=regY;}if(skewX||skewY){skewX*=DEG_TO_RAD;skewY*=DEG_TO_RAD;this.prepend(cos*scaleX,sin*scaleX,-sin*scaleY,cos*scaleY,0,0);this.prepend(Math.cos(skewY),Math.sin(skewY),-Math.sin(skewX),Math.cos(skewX),x,y);}else{this.prepend(cos*scaleX,sin*scaleX,-sin*scaleY,cos*scaleY,x,y);}return this;};this.setTransform(_a,_b,_c,_d,_tx,_ty);};exports.default=Matrix2D;","map":{"version":3,"sources":["/Users/ntareguy/Downloads/gwizamobile1/node_modules/expo/node_modules/react-native-svg/lib/Matrix2D.js"],"names":["DEG_TO_RAD","Math","PI","Matrix2D","a","b","c","d","tx","ty","setTransform","undefined","reset","toArray","copy","matrix","clone","prepend","a1","c1","tx1","append","b1","d1","appendTransform","x","y","scaleX","scaleY","rotation","skewX","skewY","regX","regY","cos","sin","r","prependTransform"],"mappings":"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","sourcesContent":["/**\n * based on\n * https://github.com/CreateJS/EaselJS/blob/631cdffb85eff9413dab43b4676f059b4232d291/src/easeljs/geom/Matrix2D.js\n */\nconst DEG_TO_RAD = Math.PI / 180;\n\n/**\n * Represents an affine transformation matrix, and provides tools for constructing and concatenating matrices.\n *\n * This matrix can be visualized as:\n *\n * \t[ a  c  tx\n * \t  b  d  ty\n * \t  0  0  1  ]\n *\n * Note the locations of b and c.\n *\n * @class Matrix2D\n * @param {Number} [a=1] Specifies the a property for the new matrix.\n * @param {Number} [b=0] Specifies the b property for the new matrix.\n * @param {Number} [c=0] Specifies the c property for the new matrix.\n * @param {Number} [d=1] Specifies the d property for the new matrix.\n * @param {Number} [tx=0] Specifies the tx property for the new matrix.\n * @param {Number} [ty=0] Specifies the ty property for the new matrix.\n * @constructor\n **/\nexport default class Matrix2D {\n    constructor(a, b, c, d, tx, ty) {\n        this.setTransform(a, b, c, d, tx, ty);\n\n        // public properties:\n        // assigned in the setValues method.\n        /**\n         * Position (0, 0) in a 3x3 affine transformation matrix.\n         * @property a\n         * @type Number\n         **/\n\n        /**\n         * Position (0, 1) in a 3x3 affine transformation matrix.\n         * @property b\n         * @type Number\n         **/\n\n        /**\n         * Position (1, 0) in a 3x3 affine transformation matrix.\n         * @property c\n         * @type Number\n         **/\n\n        /**\n         * Position (1, 1) in a 3x3 affine transformation matrix.\n         * @property d\n         * @type Number\n         **/\n\n        /**\n         * Position (2, 0) in a 3x3 affine transformation matrix.\n         * @property tx\n         * @type Number\n         **/\n\n        /**\n         * Position (2, 1) in a 3x3 affine transformation matrix.\n         * @property ty\n         * @type Number\n         **/\n    }\n\n    /**\n     * Set current matrix to new absolute matrix.\n     * @method setTransform\n     * @param {Number} [a=1] Specifies the a property for the new matrix.\n     * @param {Number} [b=0] Specifies the b property for the new matrix.\n     * @param {Number} [c=0] Specifies the c property for the new matrix.\n     * @param {Number} [d=1] Specifies the d property for the new matrix.\n     * @param {Number} [tx=0] Specifies the tx property for the new matrix.\n     * @param {Number} [ty=0] Specifies the ty property for the new matrix.\n     * @return {Matrix2D} This instance. Useful for chaining method calls.\n     */\n    setTransform = function(a, b, c, d, tx, ty) {\n        this.a = a === null || a === undefined ? 1 : a;\n        this.b = b || 0;\n        this.c = c || 0;\n        this.d = d === null || d === undefined ? 1 : d;\n        this.tx = tx || 0;\n        this.ty = ty || 0;\n        //noinspection JSValidateTypes\n        return this;\n    };\n\n    /**\n     * Reset current matrix to an identity matrix.\n     * @method reset\n     * @return {Matrix2D} This matrix. Useful for chaining method calls.\n     **/\n    reset = function() {\n        this.a = this.d = 1;\n        this.b = this.c = this.tx = this.ty = 0;\n        //noinspection JSValidateTypes\n        return this;\n    };\n\n    /**\n     * Returns an array with current matrix values.\n     * @method toArray\n     * @return {Array} an array with current matrix values.\n     **/\n    toArray = function() {\n        return [this.a, this.b, this.c, this.d, this.tx, this.ty];\n    };\n\n    //noinspection JSUnusedGlobalSymbols\n    /**\n     * Copies all properties from the specified matrix to this matrix.\n     * @method copy\n     * @param {Matrix2D} matrix The matrix to copy properties from.\n     * @return {Matrix2D} This matrix. Useful for chaining method calls.\n     */\n    copy = function(matrix) {\n        //noinspection JSUnresolvedVariable\n        return this.setTransform(\n            matrix.a,\n            matrix.b,\n            matrix.c,\n            matrix.d,\n            matrix.tx,\n            matrix.ty\n        );\n    };\n\n    //noinspection JSUnusedGlobalSymbols\n    /**\n     * Clones current instance and returning a new matrix.\n     * @method clone\n     * @return {Matrix2D} a clone of the Matrix2D instance.\n     **/\n    clone = function() {\n        return new Matrix2D(this.a, this.b, this.c, this.d, this.tx, this.ty);\n    };\n\n    /**\n     * Prepends the specified matrix properties to this matrix.\n     * This is the equivalent of multiplying `(specified matrix) * (this matrix)`.\n     * All parameters are required.\n     * @method prepend\n     * @param {Number} a\n     * @param {Number} b\n     * @param {Number} c\n     * @param {Number} d\n     * @param {Number} tx\n     * @param {Number} ty\n     * @return {Matrix2D} This matrix. Useful for chaining method calls.\n     **/\n    prepend = function(a, b, c, d, tx, ty) {\n        const a1 = this.a;\n        const c1 = this.c;\n        const tx1 = this.tx;\n\n        this.a = a * a1 + c * this.b;\n        this.b = b * a1 + d * this.b;\n        this.c = a * c1 + c * this.d;\n        this.d = b * c1 + d * this.d;\n        this.tx = a * tx1 + c * this.ty + tx;\n        this.ty = b * tx1 + d * this.ty + ty;\n        //noinspection JSValidateTypes\n        return this;\n    };\n\n    /**\n     * Appends the specified matrix properties to this matrix. All parameters are required.\n     * This is the equivalent of multiplying `(this matrix) * (specified matrix)`.\n     * @method append\n     * @param {Number} a\n     * @param {Number} b\n     * @param {Number} c\n     * @param {Number} d\n     * @param {Number} tx\n     * @param {Number} ty\n     * @return {Matrix2D} This matrix. Useful for chaining method calls.\n     **/\n    append = function(a, b, c, d, tx, ty) {\n        const a1 = this.a;\n        const b1 = this.b;\n        const c1 = this.c;\n        const d1 = this.d;\n        if (a !== 1 || b !== 0 || c !== 0 || d !== 1) {\n            this.a = a1 * a + c1 * b;\n            this.b = b1 * a + d1 * b;\n            this.c = a1 * c + c1 * d;\n            this.d = b1 * c + d1 * d;\n        }\n        this.tx = a1 * tx + c1 * ty + this.tx;\n        this.ty = b1 * tx + d1 * ty + this.ty;\n        //noinspection JSValidateTypes\n        return this;\n    };\n\n    /**\n     * Generates matrix properties from the specified display object transform properties, and appends them to this matrix.\n     * For example, you can use this to generate a matrix representing the transformations of a display object:\n     *\n     * \tvar mtx = new createjs.Matrix2D();\n     * \tmtx.appendTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);\n     * @method appendTransform\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Number} scaleX\n     * @param {Number} scaleY\n     * @param {Number} rotation\n     * @param {Number} skewX\n     * @param {Number} skewY\n     * @param {Number} regX Optional.\n     * @param {Number} regY Optional.\n     * @return {Matrix2D} This matrix. Useful for chaining method calls.\n     **/\n    appendTransform = function(\n        x,\n        y,\n        scaleX,\n        scaleY,\n        rotation,\n        skewX,\n        skewY,\n        regX,\n        regY\n    ) {\n        let cos, sin;\n        if (rotation % 360) {\n            const r = rotation * DEG_TO_RAD;\n            cos = Math.cos(r);\n            sin = Math.sin(r);\n        } else {\n            cos = 1;\n            sin = 0;\n        }\n\n        if (skewX || skewY) {\n            // TODO: can this be combined into a single append operation?\n            skewX *= DEG_TO_RAD;\n            skewY *= DEG_TO_RAD;\n            this.append(\n                Math.cos(skewY),\n                Math.sin(skewY),\n                Math.sin(skewX),\n                Math.cos(skewX),\n                x,\n                y\n            );\n            this.append(\n                cos * scaleX,\n                sin * scaleX,\n                -sin * scaleY,\n                cos * scaleY,\n                0,\n                0\n            );\n        } else {\n            this.append(\n                cos * scaleX,\n                sin * scaleX,\n                -sin * scaleY,\n                cos * scaleY,\n                x,\n                y\n            );\n        }\n\n        if (regX || regY) {\n            // append the registration offset:\n            this.tx -= regX * this.a + regY * this.c;\n            this.ty -= regX * this.b + regY * this.d;\n        }\n        //noinspection JSValidateTypes\n        return this;\n    };\n\n    //noinspection JSUnusedGlobalSymbols\n    /**\n     * Generates matrix properties from the specified display object transform properties, and prepends them to this matrix.\n     * For example, you could calculate the combined transformation for a child object using:\n     *\n     * \tvar o = myDisplayObject;\n     * \tvar mtx = new createjs.Matrix2D();\n     * \tdo  {\n     * \t\t// prepend each parent's transformation in turn:\n     * \t\tmtx.prependTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation, o.skewX, o.skewY, o.regX, o.regY);\n     * \t} while (o = o.parent);\n     *\n     * \tNote that the above example would not account for {{#crossLink \"DisplayObject/transformMatrix:property\"}}{{/crossLink}}\n     * \tvalues. See {{#crossLink \"Matrix2D/prependMatrix\"}}{{/crossLink}} for an example that does.\n     * @method prependTransform\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Number} scaleX\n     * @param {Number} scaleY\n     * @param {Number} rotation\n     * @param {Number} skewX\n     * @param {Number} skewY\n     * @param {Number} regX Optional.\n     * @param {Number} regY Optional.\n     * @return {Matrix2D} This matrix. Useful for chaining method calls.\n     **/\n    prependTransform = function(\n        x,\n        y,\n        scaleX,\n        scaleY,\n        rotation,\n        skewX,\n        skewY,\n        regX,\n        regY\n    ) {\n        let cos, sin;\n        if (rotation % 360) {\n            const r = rotation * DEG_TO_RAD;\n            cos = Math.cos(r);\n            sin = Math.sin(r);\n        } else {\n            cos = 1;\n            sin = 0;\n        }\n\n        if (regX || regY) {\n            // prepend the registration offset:\n            this.tx -= regX;\n            this.ty -= regY;\n        }\n        if (skewX || skewY) {\n            // TODO: can this be combined into a single prepend operation?\n            skewX *= DEG_TO_RAD;\n            skewY *= DEG_TO_RAD;\n            this.prepend(\n                cos * scaleX,\n                sin * scaleX,\n                -sin * scaleY,\n                cos * scaleY,\n                0,\n                0\n            );\n            this.prepend(\n                Math.cos(skewY),\n                Math.sin(skewY),\n                -Math.sin(skewX),\n                Math.cos(skewX),\n                x,\n                y\n            );\n        } else {\n            this.prepend(\n                cos * scaleX,\n                sin * scaleX,\n                -sin * scaleY,\n                cos * scaleY,\n                x,\n                y\n            );\n        }\n        //noinspection JSValidateTypes\n        return this;\n    };\n}\n"]},"metadata":{},"sourceType":"script"}