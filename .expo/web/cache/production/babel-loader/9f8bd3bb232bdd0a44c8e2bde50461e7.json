{"ast":null,"code":"'use strict';var _regeneratorRuntime=require(\"@babel/runtime/regenerator\");var _objectSpread=require(\"@babel/runtime/helpers/objectSpread\");var getDevServer=require(\"./getDevServer\");var _require=require(\"../../BatchedBridge/NativeModules\"),SourceCode=_require.SourceCode;var fetch;function isSourcedFromDisk(sourcePath){return!/^http/.test(sourcePath)&&/[\\\\/]/.test(sourcePath);}function symbolicateStackTrace(stack){var devServer,stackCopy,foundInternalSource,response,json;return _regeneratorRuntime.async(function symbolicateStackTrace$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!fetch){fetch=global.fetch||require(\"../../Network/fetch\").fetch;}devServer=getDevServer();if(devServer.bundleLoadedFromServer){_context.next=4;break;}throw new Error('Bundle was not loaded from the packager');case 4:stackCopy=stack;if(SourceCode.scriptURL){foundInternalSource=false;stackCopy=stack.map(function(frame){if(!foundInternalSource&&isSourcedFromDisk(frame.file)){return _objectSpread({},frame,{file:SourceCode.scriptURL});}foundInternalSource=true;return frame;});}_context.next=8;return _regeneratorRuntime.awrap(fetch(devServer.url+'symbolicate',{method:'POST',body:JSON.stringify({stack:stackCopy})}));case 8:response=_context.sent;_context.next=11;return _regeneratorRuntime.awrap(response.json());case 11:json=_context.sent;return _context.abrupt(\"return\",json.stack);case 13:case\"end\":return _context.stop();}}},null,this);}module.exports=symbolicateStackTrace;","map":{"version":3,"sources":["/Users/ntareguy/Downloads/gwizamobile1/node_modules/react-native/Libraries/Core/Devtools/symbolicateStackTrace.js"],"names":["getDevServer","require","SourceCode","fetch","isSourcedFromDisk","sourcePath","test","symbolicateStackTrace","stack","global","devServer","bundleLoadedFromServer","Error","stackCopy","scriptURL","foundInternalSource","map","frame","file","url","method","body","JSON","stringify","response","json","module","exports"],"mappings":"AAUA,a,+HAEA,GAAMA,CAAAA,YAAY,CAAGC,OAAO,kBAA5B,C,aAEqBA,OAAO,qC,CAArBC,U,UAAAA,U,CAGP,GAAIC,CAAAA,KAAJ,CAIA,QAASC,CAAAA,iBAAT,CAA2BC,UAA3B,CAAwD,CACtD,MAAO,CAAC,QAAQC,IAAR,CAAaD,UAAb,CAAD,EAA6B,QAAQC,IAAR,CAAaD,UAAb,CAApC,CACD,CAED,QAAeE,CAAAA,qBAAf,CACEC,KADF,2LAcE,GAAI,CAACL,KAAL,CAAY,CACVA,KAAK,CAAGM,MAAM,CAACN,KAAP,EAAgBF,OAAO,uBAAP,CAA+BE,KAAvD,CACD,CAEKO,SAlBR,CAkBoBV,YAAY,EAlBhC,IAmBOU,SAAS,CAACC,sBAnBjB,8BAoBU,IAAIC,CAAAA,KAAJ,CAAU,yCAAV,CApBV,QAuBMC,SAvBN,CAuBkBL,KAvBlB,CAyBE,GAAIN,UAAU,CAACY,SAAf,CAA0B,CACpBC,mBADoB,CACW,KADX,CAExBF,SAAS,CAAGL,KAAK,CAACQ,GAAN,CAAU,SAACC,KAAD,CAAuB,CAK3C,GAAI,CAACF,mBAAD,EAAwBX,iBAAiB,CAACa,KAAK,CAACC,IAAP,CAA7C,CAA2D,CAEzD,wBAAWD,KAAX,EAAkBC,IAAI,CAAEhB,UAAU,CAACY,SAAnC,GACD,CAEDC,mBAAmB,CAAG,IAAtB,CACA,MAAOE,CAAAA,KAAP,CACD,CAZW,CAAZ,CAaD,CAxCH,iDA0CyBd,KAAK,CAACO,SAAS,CAACS,GAAV,CAAgB,aAAjB,CAAgC,CAC1DC,MAAM,CAAE,MADkD,CAE1DC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CAACf,KAAK,CAAEK,SAAR,CAAf,CAFoD,CAAhC,CA1C9B,SA0CQW,QA1CR,iEA8CqBA,QAAQ,CAACC,IAAT,EA9CrB,UA8CQA,IA9CR,+CA+CSA,IAAI,CAACjB,KA/Cd,2DAkDAkB,MAAM,CAACC,OAAP,CAAiBpB,qBAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst getDevServer = require('./getDevServer');\n\nconst {SourceCode} = require('../../BatchedBridge/NativeModules');\n\n// Avoid requiring fetch on load of this module; see symbolicateStackTrace\nlet fetch;\n\nimport type {StackFrame} from './parseErrorStack';\n\nfunction isSourcedFromDisk(sourcePath: string): boolean {\n  return !/^http/.test(sourcePath) && /[\\\\/]/.test(sourcePath);\n}\n\nasync function symbolicateStackTrace(\n  stack: Array<StackFrame>,\n): Promise<Array<StackFrame>> {\n  // RN currently lazy loads whatwg-fetch using a custom fetch module, which,\n  // when called for the first time, requires and re-exports 'whatwg-fetch'.\n  // However, when a dependency of the project tries to require whatwg-fetch\n  // either directly or indirectly, whatwg-fetch is required before\n  // RN can lazy load whatwg-fetch. As whatwg-fetch checks\n  // for a fetch polyfill before loading, it will in turn try to load\n  // RN's fetch module, which immediately tries to import whatwg-fetch AGAIN.\n  // This causes a circular require which results in RN's fetch module\n  // exporting fetch as 'undefined'.\n  // The fix below postpones trying to load fetch until the first call to symbolicateStackTrace.\n  // At that time, we will have either global.fetch (whatwg-fetch) or RN's fetch.\n  if (!fetch) {\n    fetch = global.fetch || require('../../Network/fetch').fetch;\n  }\n\n  const devServer = getDevServer();\n  if (!devServer.bundleLoadedFromServer) {\n    throw new Error('Bundle was not loaded from the packager');\n  }\n\n  let stackCopy = stack;\n\n  if (SourceCode.scriptURL) {\n    let foundInternalSource: boolean = false;\n    stackCopy = stack.map((frame: StackFrame) => {\n      // If the sources exist on disk rather than appearing to come from the packager,\n      // replace the location with the packager URL until we reach an internal source\n      // which does not have a path (no slashes), indicating a switch from within\n      // the application to a surrounding debugging environment.\n      if (!foundInternalSource && isSourcedFromDisk(frame.file)) {\n        // Copy frame into new object and replace 'file' property\n        return {...frame, file: SourceCode.scriptURL};\n      }\n\n      foundInternalSource = true;\n      return frame;\n    });\n  }\n\n  const response = await fetch(devServer.url + 'symbolicate', {\n    method: 'POST',\n    body: JSON.stringify({stack: stackCopy}),\n  });\n  const json = await response.json();\n  return json.stack;\n}\n\nmodule.exports = symbolicateStackTrace;\n"]},"metadata":{},"sourceType":"script"}