{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.evaluateOnce=evaluateOnce;var _AnimatedValue=_interopRequireDefault(require(\"../core/AnimatedValue\"));var _base=require(\"../base\");function evaluateOnce(node){var children=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];var callback=arguments.length>2?arguments[2]:undefined;if(!Array.isArray(children)){children=[children];}var done=new _AnimatedValue.default(0);var evalNode=(0,_base.cond)(done,0,(0,_base.call)([node,(0,_base.set)(done,1)],function(){callback&&callback();for(var i=0;i<children.length;i++){alwaysNode.__removeChild(children[i]);}}));var alwaysNode=(0,_base.always)(evalNode);for(var i=0;i<children.length;i++){alwaysNode.__addChild(children[i]);}}","map":{"version":3,"sources":["/Users/ntareguy/Downloads/gwizamobile1/node_modules/react-native-reanimated/src/derived/evaluateOnce.js"],"names":["evaluateOnce","node","children","callback","Array","isArray","done","AnimatedValue","evalNode","i","length","alwaysNode","__removeChild","__addChild"],"mappings":"8KAAA,4EACA,6BAQO,QAASA,CAAAA,YAAT,CAAsBC,IAAtB,CAAqD,IAAzBC,CAAAA,QAAyB,2DAAd,EAAc,IAAVC,CAAAA,QAAU,2CAC1D,GAAI,CAACC,KAAK,CAACC,OAAN,CAAcH,QAAd,CAAL,CAA8B,CAC5BA,QAAQ,CAAG,CAACA,QAAD,CAAX,CACD,CACD,GAAMI,CAAAA,IAAI,CAAG,GAAIC,uBAAJ,CAAkB,CAAlB,CAAb,CACA,GAAMC,CAAAA,QAAQ,CAAG,eACfF,IADe,CAEf,CAFe,CAGf,eAAK,CAACL,IAAD,CAAO,cAAIK,IAAJ,CAAU,CAAV,CAAP,CAAL,CAA2B,UAAM,CAC/BH,QAAQ,EAAIA,QAAQ,EAApB,CACA,IAAK,GAAIM,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGP,QAAQ,CAACQ,MAA7B,CAAqCD,CAAC,EAAtC,CAA0C,CACxCE,UAAU,CAACC,aAAX,CAAyBV,QAAQ,CAACO,CAAD,CAAjC,EACD,CACF,CALD,CAHe,CAAjB,CAUA,GAAME,CAAAA,UAAU,CAAG,iBAAOH,QAAP,CAAnB,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGP,QAAQ,CAACQ,MAA7B,CAAqCD,CAAC,EAAtC,CAA0C,CACxCE,UAAU,CAACE,UAAX,CAAsBX,QAAQ,CAACO,CAAD,CAA9B,EACD,CACF","sourcesContent":["import AnimatedValue from '../core/AnimatedValue';\nimport { block, call, always, cond, set } from '../base';\n\n/**\n * evaluate given node and notify children\n * @param node - node to be evaluated\n * @param children - children (or one child) nodes to be notified\n * @param callback - after callback\n */\nexport function evaluateOnce(node, children = [], callback) {\n  if (!Array.isArray(children)) {\n    children = [children];\n  }\n  const done = new AnimatedValue(0);\n  const evalNode = cond(\n    done,\n    0,\n    call([node, set(done, 1)], () => {\n      callback && callback();\n      for (let i = 0; i < children.length; i++) {\n        alwaysNode.__removeChild(children[i]);\n      }\n    })\n  );\n  const alwaysNode = always(evalNode);\n  for (let i = 0; i < children.length; i++) {\n    alwaysNode.__addChild(children[i]);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}