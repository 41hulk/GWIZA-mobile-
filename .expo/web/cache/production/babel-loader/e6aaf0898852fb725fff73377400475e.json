{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _regenerator=_interopRequireDefault(require(\"@babel/runtime/regenerator\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _reactNative=require(\"react-native\");var _fbemitter=require(\"fbemitter\");var CTKNativeAdManager=_reactNative.NativeModules.CTKNativeAdManager,CTKNativeAdEmitter=_reactNative.NativeModules.CTKNativeAdEmitter;var nativeAdEmitter=new _reactNative.NativeEventEmitter(CTKNativeAdEmitter);var EVENT_DID_BECOME_VALID='AdsManagerDidBecomeValid';var NativeAdsManager=function(){function NativeAdsManager(placementId){var adsToRequest=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;(0,_classCallCheck2.default)(this,NativeAdsManager);this.isValid=false;this.eventEmitter=new _fbemitter.EventEmitter();this.placementId=placementId;this.adsToRequest=adsToRequest;this._listenForStateChanges();CTKNativeAdManager.init(placementId,adsToRequest);}(0,_createClass2.default)(NativeAdsManager,[{key:\"_listenForStateChanges\",value:function _listenForStateChanges(){var _this=this;nativeAdEmitter.addListener('CTKNativeAdsManagersChanged',function(managers){var isValidNew=managers[_this.placementId];var isValid=_this.isValid;if(isValid!==isValidNew&&isValidNew){_this.isValid=true;_this.eventEmitter.emit(EVENT_DID_BECOME_VALID);}});}},{key:\"onAdsLoaded\",value:function onAdsLoaded(listener){if(this.isValid){setImmediate(listener);return{remove:function remove(){}};}return this.eventEmitter.once(EVENT_DID_BECOME_VALID,listener);}},{key:\"disableAutoRefresh\",value:function disableAutoRefresh(){CTKNativeAdManager.disableAutoRefresh(this.placementId);}},{key:\"setMediaCachePolicy\",value:function setMediaCachePolicy(cachePolicy){CTKNativeAdManager.setMediaCachePolicy(this.placementId,cachePolicy);}}],[{key:\"registerViewsForInteractionAsync\",value:function registerViewsForInteractionAsync(nativeAdViewTag,mediaViewTag,adIconViewTag,clickable){return _regenerator.default.async(function registerViewsForInteractionAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return _regenerator.default.awrap(CTKNativeAdManager.registerViewsForInteraction(nativeAdViewTag,mediaViewTag,adIconViewTag,clickable));case 2:return _context.abrupt(\"return\",_context.sent);case 3:case\"end\":return _context.stop();}}},null,this);}},{key:\"triggerEvent\",value:function triggerEvent(nativeAdViewTag){return CTKNativeAdManager.triggerEvent(nativeAdViewTag);}}]);return NativeAdsManager;}();var _default=NativeAdsManager;exports.default=_default;","map":{"version":3,"sources":["../../src/facebook-ads/NativeAdsManager.tsx"],"names":[],"mappings":"waAAA,yCACA,oC,GAEQ,CAAA,kB,CAA2C,0B,CAA3C,kB,CAAoB,kB,CAAuB,0B,CAAvB,kB,CAE5B,GAAM,CAAA,eAAe,CAAG,GAAI,gCAAJ,CAAuB,kBAAvB,CAAxB,CAEA,GAAM,CAAA,sBAAsB,CAAG,0BAA/B,C,GAIM,CAAA,gB,YAqCJ,0BAAY,WAAZ,CAA0D,IAAzB,CAAA,YAAyB,2DAAF,EAAE,qDA7B1D,KAAA,OAAA,CAAmB,KAAnB,CAGA,KAAA,YAAA,CAA6B,GAAI,wBAAJ,EAA7B,CA2BE,KAAK,WAAL,CAAmB,WAAnB,CACA,KAAK,YAAL,CAAoB,YAApB,CAEA,KAAK,sBAAL,GAEA,kBAAkB,CAAC,IAAnB,CAAwB,WAAxB,CAAqC,YAArC,EACD,C,iHAMqB,gBACpB,eAAe,CAAC,WAAhB,CAA4B,6BAA5B,CAA2D,SAAA,QAAQ,CAAG,CACpE,GAAM,CAAA,UAAU,CAAG,QAAQ,CAAC,KAAI,CAAC,WAAN,CAA3B,CACA,GAAM,CAAA,OAAO,CAAG,KAAI,CAAC,OAArB,CAEA,GAAI,OAAO,GAAK,UAAZ,EAA0B,UAA9B,CAA0C,CACxC,KAAI,CAAC,OAAL,CAAe,IAAf,CACA,KAAI,CAAC,YAAL,CAAkB,IAAlB,CAAuB,sBAAvB,EACD,CACF,CARD,EASD,C,gDAQW,Q,CAAoB,CAC9B,GAAI,KAAK,OAAT,CAAkB,CAChB,YAAY,CAAC,QAAD,CAAZ,CACA,MAAO,CACL,MAAM,CAAE,iBAAK,CAAG,CADX,CAAP,CAGD,CAED,MAAO,MAAK,YAAL,CAAkB,IAAlB,CAAuB,sBAAvB,CAA+C,QAA/C,CAAP,CACD,C,+DAKiB,CAChB,kBAAkB,CAAC,kBAAnB,CAAsC,KAAK,WAA3C,EACD,C,gEAOmB,W,CAAiC,CACnD,kBAAkB,CAAC,mBAAnB,CAAuC,KAAK,WAA5C,CAAyD,WAAzD,EACD,C,4FA/EC,e,CACA,Y,CACA,a,CACA,S,+LAEa,kBAAkB,CAAC,2BAAnB,CACX,eADW,CAEX,YAFW,CAGX,aAHW,CAIX,SAJW,C,kKAQK,e,CAAuB,CACzC,MAAO,CAAA,kBAAkB,CAAC,YAAnB,CAAgC,eAAhC,CAAP,CACD,C,6CAmEY,gB","sourcesContent":["import { NativeEventEmitter, NativeModules } from 'react-native';\nimport { EventEmitter, EventSubscription } from 'fbemitter';\n\nconst { CTKNativeAdManager, CTKNativeAdEmitter } = NativeModules;\n\nconst nativeAdEmitter = new NativeEventEmitter(CTKNativeAdEmitter);\n\nconst EVENT_DID_BECOME_VALID = 'AdsManagerDidBecomeValid';\n\ntype AdManagerCachePolicy = 'none' | 'icon' | 'image' | 'all';\n\nclass NativeAdsManager {\n  /** {@string} with placement id of ads **/\n  placementId: string;\n\n  /** {@number} of ads to request at once **/\n  adsToRequest: number;\n\n  /** {@boolean} indicating whether AdsManager is ready to serve ads **/\n  isValid: boolean = false;\n\n  /** {@EventEmitter} used for sending out updates **/\n  eventEmitter: EventEmitter = new EventEmitter();\n\n  static async registerViewsForInteractionAsync(\n    nativeAdViewTag: number,\n    mediaViewTag: number,\n    adIconViewTag: number,\n    clickable: number[]\n  ) {\n    return await CTKNativeAdManager.registerViewsForInteraction(\n      nativeAdViewTag,\n      mediaViewTag,\n      adIconViewTag,\n      clickable\n    );\n  }\n\n  static triggerEvent(nativeAdViewTag: number) {\n    return CTKNativeAdManager.triggerEvent(nativeAdViewTag);\n  }\n\n  /**\n   * Creates an instance of AdsManager with a given placementId and adsToRequest.\n   * Default number of ads to request is `10`.\n   *\n   * AdsManager will become loading ads immediately\n   */\n  constructor(placementId: string, adsToRequest: number = 10) {\n    this.placementId = placementId;\n    this.adsToRequest = adsToRequest;\n\n    this._listenForStateChanges();\n\n    CTKNativeAdManager.init(placementId, adsToRequest);\n  }\n\n  /**\n   * Listens for AdManager state changes and updates internal state. When it changes,\n   * callers will be notified of a change\n   */\n  _listenForStateChanges() {\n    nativeAdEmitter.addListener('CTKNativeAdsManagersChanged', managers => {\n      const isValidNew = managers[this.placementId];\n      const isValid = this.isValid;\n\n      if (isValid !== isValidNew && isValidNew) {\n        this.isValid = true;\n        this.eventEmitter.emit(EVENT_DID_BECOME_VALID);\n      }\n    });\n  }\n\n  /**\n   * Used to listening for state changes\n   *\n   * If manager already became valid, it will call the function w/o registering\n   * handler for events\n   */\n  onAdsLoaded(listener: () => void): EventSubscription {\n    if (this.isValid) {\n      setImmediate(listener);\n      return {\n        remove: () => {},\n      } as EventSubscription;\n    }\n\n    return this.eventEmitter.once(EVENT_DID_BECOME_VALID, listener);\n  }\n\n  /**\n   * Disables auto refreshing for this native ad manager\n   */\n  disableAutoRefresh() {\n    CTKNativeAdManager.disableAutoRefresh(this.placementId);\n  }\n\n  /**\n   * Set the native ads manager caching policy. This controls which media from\n   * the native ads are cached before the onAdsLoaded is called.\n   * The default is to not block on caching.\n   */\n  setMediaCachePolicy(cachePolicy: AdManagerCachePolicy) {\n    CTKNativeAdManager.setMediaCachePolicy(this.placementId, cachePolicy);\n  }\n}\n\nexport default NativeAdsManager;\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}