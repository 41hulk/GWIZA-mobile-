{"ast":null,"code":"Object.defineProperty(exports,\"__esModule\",{value:true});exports.isSupported=isSupported;exports.requestReview=requestReview;exports.storeUrl=storeUrl;exports.hasAction=hasAction;var _reactNative=require(\"react-native\");var _expoConstants=require(\"expo-constants\");function isSupported(){return _reactNative.Platform.OS==='ios'&&_reactNative.NativeModules.ExponentStoreReview.isSupported;}function requestReview(){if(isSupported()){_reactNative.NativeModules.ExponentStoreReview.requestReview();}else{var url=storeUrl();if(url){_reactNative.Linking.canOpenURL(url).then(function(supported){if(!supported){console.log(\"Expo.StoreReview.requestReview(): Can't open store url: \",url);return;}else{return _reactNative.Linking.openURL(url);}}).catch(function(err){return console.warn('Expo.StoreReview.requestReview(): Error opening link to store: ',err);});}else{console.log(\"Expo.StoreReview.requestReview(): Couldn't link to store, please make sure the `android.playStoreUrl` & `ios.appStoreUrl` fields are filled out in your `app.json`\");}}}function storeUrl(){var OS=_reactNative.Platform.OS;if(OS==='ios'){return _expoConstants.Constants.manifest.ios.appStoreUrl;}else if(OS==='android'){return _expoConstants.Constants.manifest.android.playStoreUrl;}else{console.warn(\"Expo.StoreReview.storeUrl(): Unsupported OS: \"+OS);}return null;}function hasAction(){return!!storeUrl()||isSupported();}","map":{"version":3,"sources":["../src/StoreReview.ts"],"names":[],"mappings":"mLAAA,yCACA,6CAOM,QAAU,CAAA,WAAV,EAAqB,CACzB,MAAO,uBAAS,EAAT,GAAgB,KAAhB,EAAyB,2BAAc,mBAAd,CAAkC,WAAlE,CACD,CAKK,QAAU,CAAA,aAAV,EAAuB,CAC3B,GAAI,WAAW,EAAf,CAAmB,CACjB,2BAAc,mBAAd,CAAkC,aAAlC,GACD,CAFD,IAEO,CAIL,GAAM,CAAA,GAAG,CAAG,QAAQ,EAApB,CACA,GAAI,GAAJ,CAAS,CACP,qBAAQ,UAAR,CAAmB,GAAnB,EACG,IADH,CACQ,SAAA,SAAS,CAAG,CAChB,GAAI,CAAC,SAAL,CAAgB,CACd,OAAO,CAAC,GAAR,CAAY,0DAAZ,CAAwE,GAAxE,EACA,OACD,CAHD,IAGO,CACL,MAAO,sBAAQ,OAAR,CAAgB,GAAhB,CAAP,CACD,CACF,CARH,EASG,KATH,CASS,SAAA,GAAG,QACR,CAAA,OAAO,CAAC,IAAR,CAAa,iEAAb,CAAgF,GAAhF,CADQ,EATZ,EAYD,CAbD,IAaO,CAEL,OAAO,CAAC,GAAR,CACE,oKADF,EAGD,CACF,CACF,CAQK,QAAU,CAAA,QAAV,EAAkB,IACd,CAAA,EADc,CACP,qBADO,CACd,EADc,CAEtB,GAAI,EAAE,GAAK,KAAX,CAAkB,CAChB,MAAO,0BAAU,QAAV,CAAmB,GAAnB,CAAuB,WAA9B,CACD,CAFD,IAEO,IAAI,EAAE,GAAK,SAAX,CAAsB,CAC3B,MAAO,0BAAU,QAAV,CAAmB,OAAnB,CAA2B,YAAlC,CACD,CAFM,IAEA,CACL,OAAO,CAAC,IAAR,iDAA6D,EAA7D,EACD,CACD,MAAO,KAAP,CACD,CAKK,QAAU,CAAA,SAAV,EAAmB,CACvB,MAAO,CAAC,CAAC,QAAQ,EAAV,EAAgB,WAAW,EAAlC,CACD","sourcesContent":["import { NativeModules, Platform, Linking } from 'react-native';\nimport { Constants } from 'expo-constants';\n\n/*\n    * Platform must be iOS\n    * iOS 10.3 or greater\n    * `SKStoreReviewController` class is available\n*/\nexport function isSupported() {\n  return Platform.OS === 'ios' && NativeModules.ExponentStoreReview.isSupported;\n}\n\n/*\n    Use the iOS `SKStoreReviewController` API to prompt a user rating without leaving the app.\n*/\nexport function requestReview() {\n  if (isSupported()) {\n    NativeModules.ExponentStoreReview.requestReview();\n  } else {\n    /*\n       If StoreReview is unavailable then get the store URL from the `app.json` and open to the store.\n    */\n    const url = storeUrl();\n    if (url) {\n      Linking.canOpenURL(url)\n        .then(supported => {\n          if (!supported) {\n            console.log(\"Expo.StoreReview.requestReview(): Can't open store url: \", url);\n            return;\n          } else {\n            return Linking.openURL(url);\n          }\n        })\n        .catch(err =>\n          console.warn('Expo.StoreReview.requestReview(): Error opening link to store: ', err)\n        );\n    } else {\n      // If the store URL is missing, let the dev know.\n      console.log(\n        \"Expo.StoreReview.requestReview(): Couldn't link to store, please make sure the `android.playStoreUrl` & `ios.appStoreUrl` fields are filled out in your `app.json`\"\n      );\n    }\n  }\n}\n\n/*\n    Get your app's store URLs from the `app.json`\n\n    * iOS: https://docs.expo.io/versions/latest/workflow/configuration#appstoreurlurl-to-your-app-on-the-apple-app-store-if-you-have-deployed-it-there-this-is-used-to-link-to-your-store-page-from-your-expo-project-page-if-your-app-is-public\n    * Android: https://docs.expo.io/versions/latest/workflow/configuration#playstoreurlurl-to-your-app-on-the-google-play-store-if-you-have-deployed-it-there-this-is-used-to-link-to-your-store-page-from-your-expo-project-page-if-your-app-is-public\n*/\nexport function storeUrl() {\n  const { OS } = Platform;\n  if (OS === 'ios') {\n    return Constants.manifest.ios.appStoreUrl;\n  } else if (OS === 'android') {\n    return Constants.manifest.android.playStoreUrl;\n  } else {\n    console.warn(`Expo.StoreReview.storeUrl(): Unsupported OS: ${OS}`);\n  }\n  return null;\n}\n\n/*\n    A flag to detect if this module can do anything\n*/\nexport function hasAction() {\n  return !!storeUrl() || isSupported();\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}