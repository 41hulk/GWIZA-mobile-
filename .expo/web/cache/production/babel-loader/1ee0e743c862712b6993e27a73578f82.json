{"ast":null,"code":"var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf2=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _assertThisInitialized2=_interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));var _react=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native\");var _propTypes=_interopRequireDefault(require(\"prop-types\"));var _country=_interopRequireDefault(require(\"./country\"));var _styles=_interopRequireDefault(require(\"./styles\"));var PickerItem=_reactNative.Picker.Item;var propTypes={buttonColor:_propTypes.default.string,labels:_propTypes.default.array,confirmText:_propTypes.default.string,cancelText:_propTypes.default.string,itemStyle:_propTypes.default.object,onSubmit:_propTypes.default.func};var CountryPicker=function(_Component){(0,_inherits2.default)(CountryPicker,_Component);function CountryPicker(props){var _this;(0,_classCallCheck2.default)(this,CountryPicker);_this=(0,_possibleConstructorReturn2.default)(this,(0,_getPrototypeOf2.default)(CountryPicker).call(this,props));_this.state={buttonColor:_this.props.buttonColor||'#007AFF',modalVisible:false,selectedCountry:_this.props.selectedCountry||_country.default.getAll()[0]};_this.onPressCancel=_this.onPressCancel.bind((0,_assertThisInitialized2.default)((0,_assertThisInitialized2.default)(_this)));_this.onPressSubmit=_this.onPressSubmit.bind((0,_assertThisInitialized2.default)((0,_assertThisInitialized2.default)(_this)));_this.onValueChange=_this.onValueChange.bind((0,_assertThisInitialized2.default)((0,_assertThisInitialized2.default)(_this)));return _this;}(0,_createClass2.default)(CountryPicker,[{key:\"componentWillReceiveProps\",value:function componentWillReceiveProps(nextProps){this.setState({selectedCountry:nextProps.selectedCountry});}},{key:\"selectCountry\",value:function selectCountry(selectedCountry){this.setState({selectedCountry:selectedCountry});}},{key:\"onPressCancel\",value:function onPressCancel(){this.setState({modalVisible:false});}},{key:\"onPressSubmit\",value:function onPressSubmit(){if(this.props.onSubmit){this.props.onSubmit(this.state.selectedCountry);}this.setState({modalVisible:false});}},{key:\"onValueChange\",value:function onValueChange(selectedCountry){this.setState({selectedCountry:selectedCountry});}},{key:\"show\",value:function show(){this.setState({modalVisible:true});}},{key:\"renderItem\",value:function renderItem(country,index){return _react.default.createElement(PickerItem,{key:country.iso2,value:country.iso2,label:country.name});}},{key:\"render\",value:function render(){var _this2=this;var buttonColor=this.state.buttonColor;var itemStyle=this.props.itemStyle||{};return _react.default.createElement(_reactNative.Modal,{animationType:\"slide\",transparent:true,visible:this.state.modalVisible,onRequestClose:function onRequestClose(){console.log('Country picker has been closed.');}},_react.default.createElement(_reactNative.View,{style:_styles.default.basicContainer},_react.default.createElement(_reactNative.View,{style:[_styles.default.modalContainer,{backgroundColor:this.props.pickerBackgroundColor||'white'}]},_react.default.createElement(_reactNative.View,{style:_styles.default.buttonView},_react.default.createElement(_reactNative.TouchableOpacity,{onPress:this.onPressCancel},_react.default.createElement(_reactNative.Text,{style:[{color:buttonColor},this.props.buttonTextStyle]},this.props.cancelText||'Cancel')),_react.default.createElement(_reactNative.TouchableOpacity,{onPress:this.onPressSubmit},_react.default.createElement(_reactNative.Text,{style:[{color:buttonColor},this.props.buttonTextStyle]},this.props.confirmText||'Confirm'))),_react.default.createElement(_reactNative.View,{style:_styles.default.mainBox},_react.default.createElement(_reactNative.Picker,{ref:function ref(_ref){_this2.picker=_ref;},style:_styles.default.bottomPicker,selectedValue:this.state.selectedCountry,onValueChange:function onValueChange(country){return _this2.onValueChange(country);},itemStyle:itemStyle,mode:\"dialog\"},_country.default.getAll().map(function(country,index){return _this2.renderItem(country,index);}))))));}}]);return CountryPicker;}(_react.Component);exports.default=CountryPicker;CountryPicker.propTypes=propTypes;","map":{"version":3,"sources":["/Users/ntareguy/Downloads/gwizamobile1/node_modules/react-native-phone-input/lib/countryPicker.js"],"names":["PickerItem","Picker","Item","propTypes","buttonColor","PropTypes","string","labels","array","confirmText","cancelText","itemStyle","object","onSubmit","func","CountryPicker","props","state","modalVisible","selectedCountry","Country","getAll","onPressCancel","bind","onPressSubmit","onValueChange","nextProps","setState","country","index","iso2","name","console","log","styles","basicContainer","modalContainer","backgroundColor","pickerBackgroundColor","buttonView","color","buttonTextStyle","mainBox","ref","picker","bottomPicker","map","renderItem","Component"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Text, TouchableOpacity, View, Modal, Picker } from 'react-native';\nimport PropTypes from 'prop-types';\n\nimport Country from './country';\nimport styles from './styles';\n\nconst PickerItem = Picker.Item;\n\nconst propTypes = {\n  buttonColor: PropTypes.string,\n  labels: PropTypes.array,\n  confirmText: PropTypes.string,\n  cancelText: PropTypes.string,\n  itemStyle: PropTypes.object,\n  onSubmit: PropTypes.func,\n};\n\nexport default class CountryPicker extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      buttonColor: this.props.buttonColor || '#007AFF',\n      modalVisible: false,\n      selectedCountry: this.props.selectedCountry || Country.getAll()[0],\n    };\n\n    this.onPressCancel = this.onPressCancel.bind(this);\n    this.onPressSubmit = this.onPressSubmit.bind(this);\n    this.onValueChange = this.onValueChange.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      selectedCountry: nextProps.selectedCountry,\n    });\n  }\n\n  selectCountry(selectedCountry) {\n    this.setState({\n      selectedCountry,\n    });\n  }\n\n  onPressCancel() {\n    this.setState({\n      modalVisible: false,\n    });\n  }\n\n  onPressSubmit() {\n    if (this.props.onSubmit) {\n      this.props.onSubmit(this.state.selectedCountry);\n    }\n\n    this.setState({\n      modalVisible: false,\n    });\n  }\n\n  onValueChange(selectedCountry) {\n    this.setState({\n      selectedCountry,\n    });\n  }\n\n  show() {\n    this.setState({\n      modalVisible: true,\n    });\n  }\n\n  renderItem(country, index) {\n    return <PickerItem key={country.iso2} value={country.iso2} label={country.name} />;\n  }\n\n  render() {\n    const { buttonColor } = this.state;\n    const itemStyle = this.props.itemStyle || {};\n    return (\n      <Modal\n        animationType=\"slide\"\n        transparent\n        visible={this.state.modalVisible}\n        onRequestClose={() => {\n          console.log('Country picker has been closed.');\n        }}\n      >\n        <View style={styles.basicContainer}>\n          <View\n            style={[\n              styles.modalContainer,\n              { backgroundColor: this.props.pickerBackgroundColor || 'white' },\n            ]}\n          >\n            <View style={styles.buttonView}>\n              <TouchableOpacity onPress={this.onPressCancel}>\n                <Text style={[{ color: buttonColor }, this.props.buttonTextStyle]}>\n                  {this.props.cancelText || 'Cancel'}\n                </Text>\n              </TouchableOpacity>\n\n              <TouchableOpacity onPress={this.onPressSubmit}>\n                <Text style={[{ color: buttonColor }, this.props.buttonTextStyle]}>\n                  {this.props.confirmText || 'Confirm'}\n                </Text>\n              </TouchableOpacity>\n            </View>\n\n            <View style={styles.mainBox}>\n              <Picker\n                ref={(ref) => {\n                  this.picker = ref;\n                }}\n                style={styles.bottomPicker}\n                selectedValue={this.state.selectedCountry}\n                onValueChange={country => this.onValueChange(country)}\n                itemStyle={itemStyle}\n                mode=\"dialog\"\n              >\n                {Country.getAll().map((country, index) => this.renderItem(country, index))}\n              </Picker>\n            </View>\n          </View>\n        </View>\n      </Modal>\n    );\n  }\n}\n\nCountryPicker.propTypes = propTypes;\n"]},"metadata":{},"sourceType":"script"}