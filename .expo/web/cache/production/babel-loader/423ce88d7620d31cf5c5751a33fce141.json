{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _regenerator=_interopRequireDefault(require(\"@babel/runtime/regenerator\"));var _reactNative=require(\"react-native\");var NativeProxy=_reactNative.NativeModules.ExpoNativeModuleProxy;var modulesConstantsKey=\"modulesConstants\";var exportedMethodsKey=\"exportedMethods\";var NativeModulesProxy={};if(NativeProxy){Object.keys(NativeProxy[exportedMethodsKey]).forEach(function(moduleName){NativeModulesProxy[moduleName]=NativeProxy[modulesConstantsKey][moduleName]||{};NativeProxy[exportedMethodsKey][moduleName].forEach(function(methodInfo){NativeModulesProxy[moduleName][methodInfo.name]=function _callee(){var key,argumentsCount,_len,args,_key,_args=arguments;return _regenerator.default.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:key=methodInfo.key,argumentsCount=methodInfo.argumentsCount;for(_len=_args.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=_args[_key];}if(!(argumentsCount!==args.length)){_context.next=4;break;}throw new Error(\"Arguments count mismatch, \"+args.length+\" provided, \"+argumentsCount+\" have been expected.\");case 4:_context.next=6;return _regenerator.default.awrap(NativeProxy.callMethod(moduleName,key,args));case 6:return _context.abrupt(\"return\",_context.sent);case 7:case\"end\":return _context.stop();}}},null,this);};});NativeModulesProxy[moduleName].addListener=function(){var _NativeModules$EXReac;for(var _len2=arguments.length,args=new Array(_len2),_key2=0;_key2<_len2;_key2++){args[_key2]=arguments[_key2];}return(_NativeModules$EXReac=_reactNative.NativeModules.EXReactNativeEventEmitter).addProxiedListener.apply(_NativeModules$EXReac,[moduleName].concat(args));};NativeModulesProxy[moduleName].removeListeners=function(){var _NativeModules$EXReac2;for(var _len3=arguments.length,args=new Array(_len3),_key3=0;_key3<_len3;_key3++){args[_key3]=arguments[_key3];}return(_NativeModules$EXReac2=_reactNative.NativeModules.EXReactNativeEventEmitter).removeProxiedListeners.apply(_NativeModules$EXReac2,[moduleName].concat(args));};});}else{console.warn(\"No native NativeModulesProxy found among NativeModules, are you sure the expo-react-native-adapter's modules are linked properly?\");}module.exports=NativeModulesProxy;","map":{"version":3,"sources":["/Users/ntareguy/Downloads/gwizamobile1/node_modules/expo-react-native-adapter/src/NativeModulesProxy.js"],"names":["NativeProxy","NativeModules","ExpoNativeModuleProxy","modulesConstantsKey","exportedMethodsKey","NativeModulesProxy","Object","keys","forEach","moduleName","methodInfo","name","key","argumentsCount","args","length","Error","callMethod","addListener","EXReactNativeEventEmitter","addProxiedListener","removeListeners","removeProxiedListeners","console","warn","module","exports"],"mappings":"kKAAA,yCAEA,GAAMA,CAAAA,WAAW,CAAGC,2BAAcC,qBAAlC,CACA,GAAMC,CAAAA,mBAAmB,CAAG,kBAA5B,CACA,GAAMC,CAAAA,kBAAkB,CAAG,iBAA3B,CAEA,GAAMC,CAAAA,kBAAkB,CAAG,EAA3B,CAEA,GAAIL,WAAJ,CAAiB,CACfM,MAAM,CAACC,IAAP,CAAYP,WAAW,CAACI,kBAAD,CAAvB,EAA6CI,OAA7C,CAAqD,SAAAC,UAAU,CAAI,CACjEJ,kBAAkB,CAACI,UAAD,CAAlB,CAAiCT,WAAW,CAACG,mBAAD,CAAX,CAAiCM,UAAjC,GAAgD,EAAjF,CACAT,WAAW,CAACI,kBAAD,CAAX,CAAgCK,UAAhC,EAA4CD,OAA5C,CAAoD,SAAAE,UAAU,CAAI,CAChEL,kBAAkB,CAACI,UAAD,CAAlB,CAA+BC,UAAU,CAACC,IAA1C,EAAkD,2LACxCC,GADwC,CAChBF,UADgB,CACxCE,GADwC,CACnCC,cADmC,CAChBH,UADgB,CACnCG,cADmC,uBAAUC,IAAV,0CAAUA,IAAV,yBAE5CD,cAAc,GAAKC,IAAI,CAACC,MAFoB,+BAGxC,IAAIC,CAAAA,KAAJ,8BAAuCF,IAAI,CAACC,MAA5C,eAAgEF,cAAhE,wBAHwC,0DAKnCb,WAAW,CAACiB,UAAZ,CAAuBR,UAAvB,CAAmCG,GAAnC,CAAwCE,IAAxC,CALmC,gHAAlD,CAOD,CARD,EAeAT,kBAAkB,CAACI,UAAD,CAAlB,CAA+BS,WAA/B,CAA6C,oEAAIJ,IAAJ,+CAAIA,IAAJ,gCAC3C,kDAAcK,yBAAd,EAAwCC,kBAAxC,8BAA2DX,UAA3D,SAA0EK,IAA1E,EAD2C,EAA7C,CAEAT,kBAAkB,CAACI,UAAD,CAAlB,CAA+BY,eAA/B,CAAiD,qEAAIP,IAAJ,+CAAIA,IAAJ,gCAC/C,mDAAcK,yBAAd,EAAwCG,sBAAxC,+BAA+Db,UAA/D,SAA8EK,IAA9E,EAD+C,EAAjD,CAED,CArBD,EAsBD,CAvBD,IAuBO,CACLS,OAAO,CAACC,IAAR,CACE,mIADF,EAGD,CAEDC,MAAM,CAACC,OAAP,CAAiBrB,kBAAjB","sourcesContent":["import { NativeModules } from 'react-native';\n\nconst NativeProxy = NativeModules.ExpoNativeModuleProxy;\nconst modulesConstantsKey = \"modulesConstants\";\nconst exportedMethodsKey = \"exportedMethods\";\n\nconst NativeModulesProxy = {};\n\nif (NativeProxy) {\n  Object.keys(NativeProxy[exportedMethodsKey]).forEach(moduleName => {\n    NativeModulesProxy[moduleName] = NativeProxy[modulesConstantsKey][moduleName] || {};\n    NativeProxy[exportedMethodsKey][moduleName].forEach(methodInfo => {\n      NativeModulesProxy[moduleName][methodInfo.name] = async (...args) => {\n        const { key, argumentsCount } = methodInfo;\n        if (argumentsCount !== args.length) {\n          throw new Error(`Arguments count mismatch, ${args.length} provided, ${argumentsCount} have been expected.`);\n        }\n        return await NativeProxy.callMethod(moduleName, key, args);\n      };\n    });\n\n    // These are called by EventEmitter (which is a wrapper for NativeEventEmitter)\n    // only on iOS and they use iOS-specific native module, EXReactNativeEventEmitter.\n    //\n    // On Android only {start,stop}Observing are called on the native module\n    // and these should be exported as Expo methods.\n    NativeModulesProxy[moduleName].addListener = (...args) =>\n      NativeModules.EXReactNativeEventEmitter.addProxiedListener(moduleName, ...args);\n    NativeModulesProxy[moduleName].removeListeners = (...args) =>\n      NativeModules.EXReactNativeEventEmitter.removeProxiedListeners(moduleName, ...args);\n  });\n} else {\n  console.warn(\n    \"No native NativeModulesProxy found among NativeModules, are you sure the expo-react-native-adapter's modules are linked properly?\"\n  );\n}\n\nmodule.exports = NativeModulesProxy;\n"]},"metadata":{},"sourceType":"script"}