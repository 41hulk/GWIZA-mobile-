{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _expoCore=require(\"expo-core\");var DeviceSensor=function(){function DeviceSensor(nativeSensorModule,nativeEventName){(0,_classCallCheck2.default)(this,DeviceSensor);this._nativeModule=nativeSensorModule;this._nativeEmitter=new _expoCore.EventEmitter(nativeSensorModule);this._nativeEventName=nativeEventName;}(0,_createClass2.default)(DeviceSensor,[{key:\"addListener\",value:function addListener(listener){var _this=this;var subscription=this._nativeEmitter.addListener(this._nativeEventName,listener);subscription.remove=function(){return _this.removeSubscription(subscription);};return subscription;}},{key:\"removeAllListeners\",value:function removeAllListeners(){this._nativeEmitter.removeAllListeners(this._nativeEventName);}},{key:\"removeSubscription\",value:function removeSubscription(subscription){this._nativeEmitter.removeSubscription(subscription);}},{key:\"setUpdateInterval\",value:function setUpdateInterval(intervalMs){this._nativeModule.setUpdateInterval(intervalMs);}}]);return DeviceSensor;}();exports.default=DeviceSensor;","map":{"version":3,"sources":["/Users/ntareguy/Downloads/gwizamobile1/node_modules/expo-sensors/sensor/DeviceSensor.js"],"names":["DeviceSensor","nativeSensorModule","nativeEventName","_nativeModule","_nativeEmitter","EventEmitter","_nativeEventName","listener","subscription","addListener","remove","removeSubscription","removeAllListeners","intervalMs","setUpdateInterval"],"mappings":"yVAEA,mC,GAcqBA,CAAAA,Y,YAKnB,sBAAYC,kBAAZ,CAAoDC,eAApD,CAA6E,iDAC3E,KAAKC,aAAL,CAAqBF,kBAArB,CACA,KAAKG,cAAL,CAAsB,GAAIC,uBAAJ,CAAiBJ,kBAAjB,CAAtB,CACA,KAAKK,gBAAL,CAAwBJ,eAAxB,CACD,C,sFAEWK,Q,CAAqC,gBAC/C,GAAIC,CAAAA,YAAY,CAAG,KAAKJ,cAAL,CAAoBK,WAApB,CAAgC,KAAKH,gBAArC,CAAuDC,QAAvD,CAAnB,CACAC,YAAY,CAACE,MAAb,CAAsB,iBAAM,CAAA,KAAI,CAACC,kBAAL,CAAwBH,YAAxB,CAAN,EAAtB,CACA,MAAOA,CAAAA,YAAP,CACD,C,+DAE0B,CACzB,KAAKJ,cAAL,CAAoBQ,kBAApB,CAAuC,KAAKN,gBAA5C,EACD,C,8DAEkBE,Y,CAAkC,CACnD,KAAKJ,cAAL,CAAoBO,kBAApB,CAAuCH,YAAvC,EACD,C,4DAEiBK,U,CAA0B,CAC1C,KAAKV,aAAL,CAAmBW,iBAAnB,CAAqCD,UAArC,EACD,C","sourcesContent":["// @flow\n\nimport { EventEmitter, Platform } from 'expo-core';\n\ntype Listener<E> = E => void;\n\ntype Subscription = {\n  remove: () => void,\n};\n\ntype NativeSensorModule = Object;\n\n/**\n * A base class for subscribable sensors. The events emitted by this class are measurements\n * specified by the parameter type `M`.\n */\nexport default class DeviceSensor<M> {\n  _nativeModule: NativeSensorModule;\n  _nativeEmitter: EventEmitter;\n  _nativeEventName: string;\n\n  constructor(nativeSensorModule: NativeSensorModule, nativeEventName: string) {\n    this._nativeModule = nativeSensorModule;\n    this._nativeEmitter = new EventEmitter(nativeSensorModule);\n    this._nativeEventName = nativeEventName;\n  }\n\n  addListener(listener: Listener<M>): Subscription {\n    let subscription = this._nativeEmitter.addListener(this._nativeEventName, listener);\n    subscription.remove = () => this.removeSubscription(subscription);\n    return subscription;\n  }\n\n  removeAllListeners(): void {\n    this._nativeEmitter.removeAllListeners(this._nativeEventName);\n  }\n\n  removeSubscription(subscription: Subscription): void {\n    this._nativeEmitter.removeSubscription(subscription);\n  }\n\n  setUpdateInterval(intervalMs: number): void {\n    this._nativeModule.setUpdateInterval(intervalMs);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}