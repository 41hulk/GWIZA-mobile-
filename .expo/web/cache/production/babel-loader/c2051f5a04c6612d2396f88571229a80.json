{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.watchStepCount=watchStepCount;exports.getStepCountAsync=getStepCountAsync;exports.isAvailableAsync=isAvailableAsync;var _regenerator=_interopRequireDefault(require(\"@babel/runtime/regenerator\"));var _expoCore=require(\"expo-core\");var _invariant=_interopRequireDefault(require(\"invariant\"));var PedometerEventEmitter=new _expoCore.EventEmitter(_expoCore.NativeModulesProxy.ExponentPedometer);function watchStepCount(callback){return PedometerEventEmitter.addListener('Exponent.pedometerUpdate',callback);}function getStepCountAsync(start,end){return _regenerator.default.async(function getStepCountAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:(0,_invariant.default)(start<=end,'Pedometer: The start date must precede the end date.');_context.next=3;return _regenerator.default.awrap(_expoCore.NativeModulesProxy.ExponentPedometer.getStepCountAsync(start.getTime(),end.getTime()));case 3:return _context.abrupt(\"return\",_context.sent);case 4:case\"end\":return _context.stop();}}},null,this);}function isAvailableAsync(){return _regenerator.default.async(function isAvailableAsync$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return _regenerator.default.awrap(_expoCore.NativeModulesProxy.ExponentPedometer.isAvailableAsync());case 2:return _context2.abrupt(\"return\",_context2.sent);case 3:case\"end\":return _context2.stop();}}},null,this);}","map":{"version":3,"sources":["/Users/ntareguy/Downloads/gwizamobile1/node_modules/expo-sensors/sensor/Pedometer.js"],"names":["PedometerEventEmitter","EventEmitter","NativeModulesProxy","ExponentPedometer","watchStepCount","callback","addListener","getStepCountAsync","start","end","getTime","isAvailableAsync"],"mappings":"uVAEA,mCACA,4DAEA,GAAMA,CAAAA,qBAAqB,CAAG,GAAIC,uBAAJ,CAAiBC,6BAAmBC,iBAApC,CAA9B,CAMO,QAASC,CAAAA,cAAT,CAAwBC,QAAxB,CAA8E,CACnF,MAAOL,CAAAA,qBAAqB,CAACM,WAAtB,CAAkC,0BAAlC,CAA8DD,QAA9D,CAAP,CACD,CAEM,QAAeE,CAAAA,iBAAf,CAAiCC,KAAjC,CAA8CC,GAA9C,8HACL,uBAAUD,KAAK,EAAIC,GAAnB,CAAwB,sDAAxB,EADK,kDAEQP,6BAAmBC,iBAAnB,CAAqCI,iBAArC,CAAuDC,KAAK,CAACE,OAAN,EAAvD,CAAwED,GAAG,CAACC,OAAJ,EAAxE,CAFR,gHAKA,QAAeC,CAAAA,gBAAf,oLACQT,6BAAmBC,iBAAnB,CAAqCQ,gBAArC,EADR","sourcesContent":["// @flow\n\nimport { EventEmitter, NativeModulesProxy } from 'expo-core';\nimport invariant from 'invariant';\n\nconst PedometerEventEmitter = new EventEmitter(NativeModulesProxy.ExponentPedometer);\n\ntype PedometerResult = { steps: number };\ntype PedometerUpdateCallback = (result: PedometerResult) => void;\ntype PedometerListener = { remove: () => void };\n\nexport function watchStepCount(callback: PedometerUpdateCallback): PedometerListener {\n  return PedometerEventEmitter.addListener('Exponent.pedometerUpdate', callback);\n}\n\nexport async function getStepCountAsync(start: Date, end: Date): Promise<PedometerResult> {\n  invariant(start <= end, 'Pedometer: The start date must precede the end date.');\n  return await NativeModulesProxy.ExponentPedometer.getStepCountAsync(start.getTime(), end.getTime());\n}\n\nexport async function isAvailableAsync(): Promise<boolean> {\n  return await NativeModulesProxy.ExponentPedometer.isAvailableAsync();\n}\n"]},"metadata":{},"sourceType":"script"}