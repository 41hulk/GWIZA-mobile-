{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.logInAsync=logInAsync;var _regenerator=_interopRequireDefault(require(\"@babel/runtime/regenerator\"));var _objectSpread2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));var _expoConstants=require(\"expo-constants\");var _reactNative=require(\"react-native\");var Google=_reactNative.NativeModules.ExponentGoogle;function logInAsync(config){var behavior,scopes,androidClientId,iosClientId,logInResult,userInfoResponse,userInfo;return _regenerator.default.async(function logInAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:behavior=config.behavior;if(!behavior){behavior='system';}if(_expoConstants.Constants.appOwnership!=='standalone'&&behavior==='system'&&_reactNative.Platform.OS===\"android\"){behavior='web';}scopes=config.scopes;if(!scopes){scopes=['profile','email'];}androidClientId=_expoConstants.Constants.appOwnership==='standalone'?config.androidStandaloneAppClientId:config.androidClientId;iosClientId=_expoConstants.Constants.appOwnership==='standalone'?config.iosStandaloneAppClientId:config.iosClientId;_context.next=9;return _regenerator.default.awrap(Google.logInAsync({androidClientId:androidClientId||config.clientId,iosClientId:iosClientId||config.clientId,webClientId:config.webClientId,behavior:behavior,scopes:scopes}));case 9:logInResult=_context.sent;if(!(behavior==='web')){_context.next=20;break;}_context.next=13;return _regenerator.default.awrap(fetch('https://www.googleapis.com/userinfo/v2/me',{headers:{Authorization:\"Bearer \"+logInResult.accessToken}}));case 13:userInfoResponse=_context.sent;_context.next=16;return _regenerator.default.awrap(userInfoResponse.json());case 16:userInfo=_context.sent;return _context.abrupt(\"return\",(0,_objectSpread2.default)({},logInResult,{user:{id:userInfo.id,name:userInfo.name,givenName:userInfo.given_name,familyName:userInfo.family_name,photoUrl:userInfo.picture,email:userInfo.email}}));case 20:return _context.abrupt(\"return\",logInResult);case 21:case\"end\":return _context.stop();}}},null,this);}","map":{"version":3,"sources":["../src/Google.ts"],"names":[],"mappings":"mVAAA,6CACA,yCAEA,GAAM,CAAA,MAAM,CAAG,2BAAc,cAA7B,CAiCO,QAAe,CAAA,UAAf,CAA0B,MAA1B,6MACD,QADC,CACU,MAAM,CAAC,QADjB,CAEL,GAAI,CAAC,QAAL,CAAe,CACb,QAAQ,CAAG,QAAX,CACD,CAGD,GAAI,yBAAU,YAAV,GAA2B,YAA3B,EAA4C,QAAQ,GAAK,QAAb,EAAyB,sBAAS,EAAT,GAAgB,SAAzF,CAAsG,CAClG,QAAQ,CAAG,KAAX,CACH,CAGG,MAZC,CAYQ,MAAM,CAAC,MAZf,CAaL,GAAI,CAAC,MAAL,CAAa,CACX,MAAM,CAAG,CAAC,SAAD,CAAY,OAAZ,CAAT,CACD,CAEK,eAjBD,CAkBH,yBAAU,YAAV,GAA2B,YAA3B,CACI,MAAM,CAAC,4BADX,CAEI,MAAM,CAAC,eApBR,CAqBC,WArBD,CAsBH,yBAAU,YAAV,GAA2B,YAA3B,CAA0C,MAAM,CAAC,wBAAjD,CAA4E,MAAM,CAAC,WAtBhF,mDAwBqB,MAAM,CAAC,UAAP,CAAkB,CAC1C,eAAe,CAAE,eAAe,EAAI,MAAM,CAAC,QADD,CAE1C,WAAW,CAAE,WAAW,EAAI,MAAM,CAAC,QAFO,CAG1C,WAAW,CAAE,MAAM,CAAC,WAHsB,CAI1C,QAAQ,CAAR,QAJ0C,CAK1C,MAAM,CAAN,MAL0C,CAAlB,CAxBrB,SAwBC,WAxBD,oBAgCD,QAAQ,GAAK,KAhCZ,8EAmC0B,KAAK,CAAC,2CAAD,CAA8C,CAC9E,OAAO,CAAE,CAAE,aAAa,WAAY,WAAW,CAAC,WAAvC,CADqE,CAA9C,CAnC/B,UAmCC,gBAnCD,kEAsCkB,gBAAgB,CAAC,IAAjB,EAtClB,UAsCC,QAtCD,6EAwCE,WAxCF,EAyCD,IAAI,CAAE,CACJ,EAAE,CAAE,QAAQ,CAAC,EADT,CAEJ,IAAI,CAAE,QAAQ,CAAC,IAFX,CAGJ,SAAS,CAAE,QAAQ,CAAC,UAHhB,CAIJ,UAAU,CAAE,QAAQ,CAAC,WAJjB,CAKJ,QAAQ,CAAE,QAAQ,CAAC,OALf,CAMJ,KAAK,CAAE,QAAQ,CAAC,KANZ,CAzCL,4CAmDI,WAnDJ","sourcesContent":["import { Constants } from 'expo-constants';\nimport { NativeModules, Platform } from 'react-native';\n\nconst Google = NativeModules.ExponentGoogle;\n\ntype LogInConfig = {\n  androidClientId?: string,\n  androidStandaloneAppClientId?: string,\n  iosClientId?: string,\n  iosStandaloneAppClientId?: string,\n  webClientId?: string,\n  clientId?: string,\n  behavior?: 'system' | 'web',\n  scopes?: string[],\n};\n\ntype LogInResult =\n  | {\n      type: 'cancel',\n    }\n  | {\n      type: 'success',\n      accessToken?: string,\n      idToken: string | null,\n      refreshToken: string | null,\n      serverAuthCode: string | null,\n      user: {\n        id?: string,\n        name?: string,\n        givenName?: string,\n        familyName?: string,\n        photoUrl?: string,\n        email?: string,\n      },\n    };\n\nexport async function logInAsync(config: LogInConfig): Promise<LogInResult> {\n  let behavior = config.behavior;\n  if (!behavior) {\n    behavior = 'system';\n  }\n\n  // Only standalone apps can use system login.\n  if (Constants.appOwnership !== 'standalone' && (behavior === 'system' && Platform.OS === \"android\") ) {\n      behavior = 'web';\n  }\n  \n\n  let scopes = config.scopes;\n  if (!scopes) {\n    scopes = ['profile', 'email'];\n  }\n\n  const androidClientId =\n    Constants.appOwnership === 'standalone'\n      ? config.androidStandaloneAppClientId\n      : config.androidClientId;\n  const iosClientId =\n    Constants.appOwnership === 'standalone' ? config.iosStandaloneAppClientId : config.iosClientId;\n\n  const logInResult = await Google.logInAsync({\n    androidClientId: androidClientId || config.clientId,\n    iosClientId: iosClientId || config.clientId,\n    webClientId: config.webClientId,\n    behavior,\n    scopes,\n  });\n\n  if (behavior === 'web') {\n    // Web login only returns an accessToken so use it to fetch the same info as the native login\n    // does.\n    let userInfoResponse = await fetch('https://www.googleapis.com/userinfo/v2/me', {\n      headers: { Authorization: `Bearer ${logInResult.accessToken}` },\n    });\n    let userInfo = await userInfoResponse.json();\n    return {\n      ...logInResult,\n      user: {\n        id: userInfo.id,\n        name: userInfo.name,\n        givenName: userInfo.given_name,\n        familyName: userInfo.family_name,\n        photoUrl: userInfo.picture,\n        email: userInfo.email,\n      },\n    };\n  } else {\n    return logInResult;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}