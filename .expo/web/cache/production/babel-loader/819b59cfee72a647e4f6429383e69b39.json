{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.getAirMapName=getAirMapName;exports.default=decorateMapComponent;exports.googleMapIsInstalled=exports.createNotSupportedComponent=exports.contextTypes=exports.NOT_SUPPORTED=exports.USES_DEFAULT_IMPLEMENTATION=exports.SUPPORTED=void 0;var _propTypes=_interopRequireDefault(require(\"prop-types\"));var _reactNative=require(\"react-native\");var _ProviderConstants=require(\"./ProviderConstants\");var SUPPORTED='SUPPORTED';exports.SUPPORTED=SUPPORTED;var USES_DEFAULT_IMPLEMENTATION='USES_DEFAULT_IMPLEMENTATION';exports.USES_DEFAULT_IMPLEMENTATION=USES_DEFAULT_IMPLEMENTATION;var NOT_SUPPORTED='NOT_SUPPORTED';exports.NOT_SUPPORTED=NOT_SUPPORTED;function getAirMapName(provider){if(_reactNative.Platform.OS==='android')return'AIRMap';if(provider===_ProviderConstants.PROVIDER_GOOGLE)return'AIRGoogleMap';return'AIRMap';}function getAirComponentName(provider,component){return\"\"+getAirMapName(provider)+component;}var contextTypes={provider:_propTypes.default.string};exports.contextTypes=contextTypes;var createNotSupportedComponent=function createNotSupportedComponent(message){return function(){console.error(message);return null;};};exports.createNotSupportedComponent=createNotSupportedComponent;var googleMapIsInstalled=!!_reactNative.NativeModules.UIManager[getAirMapName(_ProviderConstants.PROVIDER_GOOGLE)];exports.googleMapIsInstalled=googleMapIsInstalled;function decorateMapComponent(Component,_ref){var componentType=_ref.componentType,providers=_ref.providers;var components={};var getDefaultComponent=function getDefaultComponent(){return(0,_reactNative.requireNativeComponent)(getAirComponentName(null,componentType),Component);};Component.contextTypes=contextTypes;Component.prototype.getAirComponent=function getAirComponent(){var provider=this.context.provider||_ProviderConstants.PROVIDER_DEFAULT;if(components[provider])return components[provider];if(provider===_ProviderConstants.PROVIDER_DEFAULT){components[_ProviderConstants.PROVIDER_DEFAULT]=getDefaultComponent();return components[_ProviderConstants.PROVIDER_DEFAULT];}var providerInfo=providers[provider];var platformSupport=providerInfo[_reactNative.Platform.OS];var componentName=getAirComponentName(provider,componentType);if(platformSupport===NOT_SUPPORTED){components[provider]=createNotSupportedComponent(\"react-native-maps: \"+componentName+\" is not supported on \"+_reactNative.Platform.OS);}else if(platformSupport===SUPPORTED){if(provider!==_ProviderConstants.PROVIDER_GOOGLE||_reactNative.Platform.OS==='ios'&&googleMapIsInstalled){components[provider]=(0,_reactNative.requireNativeComponent)(componentName,Component);}}else{if(!components[_ProviderConstants.PROVIDER_DEFAULT])components[_ProviderConstants.PROVIDER_DEFAULT]=getDefaultComponent();components[provider]=components[_ProviderConstants.PROVIDER_DEFAULT];}return components[provider];};Component.prototype.getUIManagerCommand=function getUIManagerCommand(name){return _reactNative.NativeModules.UIManager[getAirComponentName(this.context.provider,componentType)].Commands[name];};Component.prototype.getMapManagerCommand=function getMapManagerCommand(name){var airComponentName=getAirComponentName(this.context.provider,componentType)+\"Manager\";return _reactNative.NativeModules[airComponentName][name];};return Component;}","map":{"version":3,"sources":["/Users/ntareguy/Downloads/gwizamobile1/node_modules/react-native-maps/lib/components/decorateMapComponent.js"],"names":["SUPPORTED","USES_DEFAULT_IMPLEMENTATION","NOT_SUPPORTED","getAirMapName","provider","Platform","OS","PROVIDER_GOOGLE","getAirComponentName","component","contextTypes","PropTypes","string","createNotSupportedComponent","message","console","error","googleMapIsInstalled","NativeModules","UIManager","decorateMapComponent","Component","componentType","providers","components","getDefaultComponent","prototype","getAirComponent","context","PROVIDER_DEFAULT","providerInfo","platformSupport","componentName","getUIManagerCommand","name","Commands","getMapManagerCommand","airComponentName"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport {\n  requireNativeComponent,\n  NativeModules,\n  Platform,\n} from 'react-native';\nimport {\n  PROVIDER_DEFAULT,\n  PROVIDER_GOOGLE,\n} from './ProviderConstants';\n\nexport const SUPPORTED = 'SUPPORTED';\nexport const USES_DEFAULT_IMPLEMENTATION = 'USES_DEFAULT_IMPLEMENTATION';\nexport const NOT_SUPPORTED = 'NOT_SUPPORTED';\n\nexport function getAirMapName(provider) {\n  if (Platform.OS === 'android') return 'AIRMap';\n  if (provider === PROVIDER_GOOGLE) return 'AIRGoogleMap';\n  return 'AIRMap';\n}\n\nfunction getAirComponentName(provider, component) {\n  return `${getAirMapName(provider)}${component}`;\n}\n\nexport const contextTypes = {\n  provider: PropTypes.string,\n};\n\nexport const createNotSupportedComponent = message => () => {\n  console.error(message); // eslint-disable-line no-console\n  return null;\n};\n\nexport const googleMapIsInstalled = !!NativeModules.UIManager[getAirMapName(PROVIDER_GOOGLE)];\n\nexport default function decorateMapComponent(Component, { componentType, providers }) {\n  const components = {};\n\n  const getDefaultComponent = () =>\n    requireNativeComponent(getAirComponentName(null, componentType), Component);\n\n  Component.contextTypes = contextTypes; // eslint-disable-line no-param-reassign\n\n  // eslint-disable-next-line no-param-reassign\n  Component.prototype.getAirComponent = function getAirComponent() {\n    const provider = this.context.provider || PROVIDER_DEFAULT;\n    if (components[provider]) return components[provider];\n\n    if (provider === PROVIDER_DEFAULT) {\n      components[PROVIDER_DEFAULT] = getDefaultComponent();\n      return components[PROVIDER_DEFAULT];\n    }\n\n    const providerInfo = providers[provider];\n    const platformSupport = providerInfo[Platform.OS];\n    const componentName = getAirComponentName(provider, componentType);\n    if (platformSupport === NOT_SUPPORTED) {\n      components[provider] = createNotSupportedComponent(`react-native-maps: ${componentName} is not supported on ${Platform.OS}`); // eslint-disable-line max-len\n    } else if (platformSupport === SUPPORTED) {\n      if (provider !== PROVIDER_GOOGLE || (Platform.OS === 'ios' && googleMapIsInstalled)) {\n        components[provider] = requireNativeComponent(componentName, Component);\n      }\n    } else { // (platformSupport === USES_DEFAULT_IMPLEMENTATION)\n      if (!components[PROVIDER_DEFAULT]) components[PROVIDER_DEFAULT] = getDefaultComponent();\n      components[provider] = components[PROVIDER_DEFAULT];\n    }\n\n    return components[provider];\n  };\n\n  Component.prototype.getUIManagerCommand = function getUIManagerCommand(name) {  // eslint-disable-line no-param-reassign,max-len\n    return NativeModules.UIManager[getAirComponentName(this.context.provider, componentType)]\n      .Commands[name];\n  };\n\n  Component.prototype.getMapManagerCommand = function getMapManagerCommand(name) { // eslint-disable-line no-param-reassign,max-len\n    const airComponentName = `${getAirComponentName(this.context.provider, componentType)}Manager`;\n    return NativeModules[airComponentName][name];\n  };\n\n  return Component;\n}\n"]},"metadata":{},"sourceType":"script"}